<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hesy&#39;s Blog</title>
  
  <subtitle>Seek for your love</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexi519.github.io/"/>
  <updated>2020-12-13T13:25:40.371Z</updated>
  <id>https://hexi519.github.io/</id>
  
  <author>
    <name>Hesy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gurobi</title>
    <link href="https://hexi519.github.io/Codes/Gurobi/"/>
    <id>https://hexi519.github.io/Codes/Gurobi/</id>
    <published>2020-12-09T09:45:30.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li><p>python的扩展对象 TupleList TupleDict  更加高效</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/095006-189335.png" alt="image-20201209095006228" style="zoom:67%;" /><pre><code>&gt; 有高效的筛选API，而传统的python对象，就只能通过循环</code></pre><ul><li><p>TupleList快速筛选</p><p>select(‘key’,’*’)</p><p>TupleDict ( gurobi变量一般都是这个 )</p><p>select sum prod </p><p>​    prod其实是逐元素相乘</p></li></ul></li></ul><pre><code>Multidict&lt;img src=&quot;https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/095353-622995.png&quot; alt=&quot;image-20201209095343645&quot; style=&quot;zoom:67%;&quot; /&gt;</code></pre><ul><li><p>创建list  列表解析</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/112600-482003.png" alt="image-20201209095423990"></p></li><li><p>quicksum</p><p><img src="https://images.weserv.nl/?url=C:%5CUsers%5Chesy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201209112559171.png" alt="image-20201209112559171"></p></li></ul>]]></content>
    
    <summary type="html">
    
      Gurobi usage in Python
    
    </summary>
    
    
      <category term="Codes" scheme="https://hexi519.github.io/categories/Codes/"/>
    
    
  </entry>
  
  <entry>
    <title>pythonComplexity</title>
    <link href="https://hexi519.github.io/Algorithm/pythonComplexity/"/>
    <id>https://hexi519.github.io/Algorithm/pythonComplexity/</id>
    <published>2020-12-05T15:17:45.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li><p>refer</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hOGZhM2QzMWFhNDA=">python常用操作复杂度<i class="fa fa-external-link-alt"></i></span></p></li></ul><hr><p>很多时候我以为python会优化的…结果居然没有优化…</p><ul><li><p>list</p><p>list.index()    O(n)</p><p>in  O(n)</p></li><li><p>set</p><p>in  最差O(n)，平均情况下是O(1)</p></li><li><p>dict</p><blockquote><p>其实python中的dict就是一个哈希表的实现。</p><p>哈希表最差情况下查找是O(n) ,但是满足一定的假设，可以认为其平均性能是O(1)</p></blockquote><ul><li>插入、访问、清空、删除  都是O(1)</li></ul></li></ul><ul><li>OJ tips<ul><li>一般来说时间复杂度是O(1e9) , 空间复杂度不要超过O(1e7)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      有时候用python刷题不小心就out of time limit , 记录整理一些常用的python操作的时间复杂度。
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://hexi519.github.io/categories/Algorithm/"/>
    
    
      <category term="Analysis" scheme="https://hexi519.github.io/tags/Analysis/"/>
    
  </entry>
  
  <entry>
    <title>dpSummary</title>
    <link href="https://hexi519.github.io/Algorithm/dpProblemsList/"/>
    <id>https://hexi519.github.io/Algorithm/dpProblemsList/</id>
    <published>2020-12-05T13:21:13.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h1><ul><li><p>买卖股票的最佳时机系列</p><ul><li><p>Ⅰ 121</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay9zb2x1dGlvbi9jLWxpLXlvbmctc2hhby1iaW5nLXdlaS1odS15aS1nZS1kYW4tZGlhby16aGFuLXR1LS8=">单调栈的题解以及系列题目<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>单调栈的应用场景 <strong>当你需要高效率查询某个位置左右两侧比他大（或小）的数的位置的时候</strong></p></blockquote></li><li><p><input disabled="" type="checkbox">  似乎也用双指针来解决这个问题</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay9zb2x1dGlvbi9ndS1waWFvLXdlbi10aS1weXRob24zLWMtYnktejFtLw==">这个题解<i class="fa fa-external-link-alt"></i></span>真的很不错</p><blockquote><p>本题最妙的方法 其实是 dp思想的优化</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdS96MW0v">腐烂的橘子<i class="fa fa-external-link-alt"></i></span>似乎对动归的理解比较深，有时间可以看看他的系列</p><pre><code>* [ ] [背包的理解](https://leetcode-cn.com/problems/coin-lcci/solution/bei-bao-jiu-jiang-ge-ren-yi-jian-da-jia-fen-xiang-/)</code></pre></li><li><p><a href="">123 带冷冻期的股票交易</a></p></li></ul></li></ul></li><li><p>Ⅱ 122</p><ul><li><input disabled="" type="checkbox"> 这个<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay1paS9zb2x1dGlvbi90YW4teGluLXN1YW4tZmEtYnktbGl3ZWl3ZWkxNDE5LTIv">精选题解<i class="fa fa-external-link-alt"></i></span>给出了股票交易的一系列算法</li></ul></li><li><p>Ⅲ 123</p><ul><li><p><input disabled="" type="checkbox">  我想写成k在第一维度，day在第二维度的，更像是背包/阶段划分的思想</p></li><li><p><input disabled="" type="checkbox">  有人说就是个背包，其实我觉得就是最后的形式上比较像而已，没有必要强行联想…</p><p>不过可以看下人家怎么理解背包的…2333</p></li><li><p>压缩要倒着写，自己写的时候要注意下</p><ul><li><p><input disabled="" type="checkbox">  但是<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay1pdi9zb2x1dGlvbi96aHVhbmctdGFpLXlhLXN1by1zaGktZ3Vhbi15dS1rc2hpLWZvdS1kYW8teHUteWFvLS8=">这篇<i class="fa fa-external-link-alt"></i></span>分析了为什么可以正序</p><blockquote><p>“然计算过程中的一个变量值不同，但这一个值的差异并不会影响最终结果” 有点意思</p></blockquote></li></ul></li><li><p>需要注意初始化，尤其是下面的题目，K&gt;=N/2的情况要注意</p></li></ul></li><li><p>Ⅳ 188</p><ul><li><p>不停看到有人用哨兵/N指针的思路…看看呢</p></li><li><p>309 含冷冻期的买卖</p></li><li><p>714 含手续费的买卖</p></li></ul></li></ul><ul><li><p><strong>打家劫舍系列</strong></p><ul><li><p>打家劫舍Ⅰ</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植:最基础的解法<i class="fa fa-external-link-alt"></i></span>:  dp[stage][0/1] &amp; dp[i]代表偷了前i家，且一定偷第i家的(解法复杂) </p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyL3NvbHV0aW9uL2RhLWppYS1qaWUtc2hlLWRvbmctdGFpLWd1aS1odWEtamllLWdvdS1odWEtc2ktbHUtLw==">Krahets：进阶版<i class="fa fa-external-link-alt"></i></span> 虽然想起来比较难，但是时空复杂度都比较低 </p><p>dp[i]代表偷前i家的最大值，dp[i] = max( dp[i-1],dp[i-2]+nums[i] )</p><blockquote><ul><li><input disabled="" type="checkbox"> ==Krahet的题解都不错，有空可以都看看==</li></ul></blockquote></li><li><p>总结的经验就是：</p><p>像这种隔着选的问题，虽然最naive(其实也不很naive 233)的解法是要将当前阶段的决策融入状态中标明的( dp[stage][0/1] )，但其实只有两种选择的情况下，不标明也可以233…</p><p>但我个人的建议还是要标明…因为只有在 只有两种选择的情况下才可以进化成Krahet的形式。如果选择多了的话，其实Krahet的方式不是通用的。</p></li></ul></li><li><p>打家劫舍Ⅱ</p><p>化解为两个单排，问题是：存不存在两个单排的最优解都是没有取到两端的（也就是 optimal[:-1]的解 不包括num[0] ， optimal[1:]的解不包括num[-1]，所以其实第一个和最后一个都没取 ）</p><p>或者另一个思路挺好：第一个和最后一个不能共存，所以就是两种情况的最大值：</p><ul><li><p>可以取第一个，那么最后一个肯定不能取</p><p>把最后一个数设置为0，然后对整个数组进行’打家劫舍Ⅰ’的运算。因为最后一个设置为0，所以就相当于没有取（就算被选中了，也可以删去）。–》那么其实最优解 与nums[:-1]得到的最优解是一样的，所以<u>对nums[:-1]的部分数组进行’打家劫舍Ⅰ’的运算</u>即可。</p><blockquote><p>至于最优解中到底包不包含第一个，其实都可以。我们是要防止 万一最优解中有第一个的情况，此时最后一个坚决不能取。</p></blockquote><blockquote><p>那有没有可能最优解中，没取第一个（取了第二个），也没取最后一个nums[:-1]中的最后一个（也就是原序列的倒数第二个），那么此时完全可以取原序列中的最后一个，且不会产生冲突。【注意，这种情况就属于下面的情况里面包含了】</p></blockquote></li></ul><ul><li><p>一定不取第一个，但可以取最后一个</p><p>把第一个数设置为0，然后对整个数组进行’打家劫舍Ⅰ’的运算。因为第一个一个设置为0，所以就相当于没有取（就算被选中了，也可以删去）。–》那么其实最优解 与nums[1:]得到的最优解是一样的，所以<u>对nums[1:]的部分数组进行’打家劫舍Ⅰ’的运算</u>即可。</p></li><li><p>如果合并后的最优解是头尾都没选，那就说明 着实不需要这两个2333</p></li></ul></li><li><p>打家劫舍Ⅲ  【树形dp】==！！没做完&amp;整理==</p></li></ul></li></ul><ul><li><p>403Frog Jump 青蛙过河</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZnJvZy1qdW1wL3NvbHV0aW9uL3Fpbmctd2EtZ3VvLWhlLWJ5LWxlZXRjb2RlLw==">官方讲解<i class="fa fa-external-link-alt"></i></span>还是很靠谱的！思路从易到难</p><ul><li>动态规划+哈希表优化</li><li>可行性问题，而不是求最优解问题</li></ul></blockquote><p>​    最简单的能想到的就是 dp[stone][action]，其中stone和action都是 [1:max(stones)] , 因为我们在某个stone处，其实我们也不知道前面一步具体是多少。这个的问题是，直接out of memory。把dp矩阵打印出来也可以发现大部分都是False，which means是稀疏矩阵。也就是说我们的阶段和状态定义的不好。</p><blockquote><p>太可怕了，这个一开始的想法也太愚蠢了吧…</p></blockquote><p>​    我们的阶段实际上就只有stones数组里面的几个数值，并不是连续值，所以阶段就是[stone in stones]。紧接着就是action的设计考量：</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhX2thb19sYS9hcnRpY2xlL2RldGFpbHMvMTA1MTc2MDY1">想法1<i class="fa fa-external-link-alt"></i></span></p><p>​    action实际上不会超过1100（每步只会增加1，一共最多输入1100个数，还包括0）。但这个想法就是有点浪费空间，因为还是很多action是取不到的。。 但这里的更新方式就比较值得玩味了，是</p><p><code>for i in range(len(stones)): for j in range(len(i)+1)</code></p><p>, 而不是常规的</p><p><code>for i in range(len(stones)): for j in range(action_lens)</code>,</p><p>所以就比较难想。但是如果按照常规的for循环更新，就会设计到查找的优化。下文会体现。</p></li></ul></li></ul><ul><li><p>想法2</p><p>​    一个地方只能从前面的某个石子跳过来，which means也不是连续整数值可选，所以其实也只有O(num(stones))的可选项。所以又回到打家劫舍的问题的里面去了： 前i个stone，所以设计为dp[stone][stone]表示的就是从stone_idx2跳到stone_idx1是否可行。如下，但是每次状态转移，需要搜索stones的list( O(n) )，最后就是**<u>O(n^3)</u>**的复杂度了–&gt; O(10^9)直接超时。（可以用一些小trick优化到O(n^2）（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleGk1MTkvbGVldGNvZGVfcHJhYy9ibG9iLzY2NmU5NGU4Yzc2MTA3OTgwNzI5ZjBiMjNhOWU2MjFmNzc2NzFkZmIvNDAzRnJvZ0p1bXAucHkjTDM5">version2<i class="fa fa-external-link-alt"></i></span>）,但可以看到由于常数项比较大，还是跟下面常用方法2，也就是version3差了不少。)</p></li></ul><p>  <strong><u>改进思路： 降低查找的复杂度</u></strong></p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZnJvZy1qdW1wL2Rpc2N1c3MvMjIzNTg2L1B5dGhvbi1zb2x1dGlvbg==">常用方法1<i class="fa fa-external-link-alt"></i></span>：二分搜索，*<em><u>O(n^3) –&gt; O(n^2</em>logn)</u>**</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleGk1MTkvbGVldGNvZGVfcHJhYy9ibG9iLzY2NmU5NGU4Yzc2MTA3OTgwNzI5ZjBiMjNhOWU2MjFmNzc2NzFkZmIvNDAzRnJvZ0p1bXAucHkjTDY1">常用方法2<i class="fa fa-external-link-alt"></i></span>：使用额外的、低查找开销的数据结构存储经常要查找的东西。这里使用hashMap存储可用的action, 所以每次就不是搜数组，而是搜一个集合，且由于只存前一步可达的，也就是有效的action，所以相当于剪了很多枝。O(n^3)–&gt;O(n^2)，且前面的常熟会比较低</p></li></ul><hr><p>==区间dp？？==</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYXJpdGhtZXRpYy1zbGljZXMvc29sdXRpb24vZG9uZy10YWktZ3VpLWh1YS1ieS1kcmVhbV9kYXktMi8=">413 等差数列划分题解<i class="fa fa-external-link-alt"></i></span>  这个虽然不是精选，但是感觉还不错</p><blockquote><p>以A[i]结尾的子等差序&gt;列的<strong>头指针位置</strong>就比以A[i-1]结尾的子等差序列的<strong>头指针位置</strong>的<strong>选择多一位</strong>，这样也就dp[i] = 1 + dp[i-1]</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  ==446 等差数列划分2==  (做是做完了，题目也理解完了，但是感觉很生硬，后续还要复盘一遍)</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ3JhbmR5YW5nL3AvNjA1NzkzNC5odG1s">这个对为什么用hash Table 讲得很到位<i class="fa fa-external-link-alt"></i></span></p></li><li><p>什么时候用hash table来优化…就是一个状态跟之前的稀疏状态集有关联的时候 用于优化存储</p></li><li><p>经验法则就是：处理连续的子问题的时候，要找O(n)的解； 处理非连续的子问题的时候，要找O(n^2^)的解</p></li></ul></li></ul><hr><p><strong><u>二维动态规划</u></strong></p><ul><li><p><input checked="" disabled="" type="checkbox"> </p><ol start="64"><li>Minimum Path Sum (Medium) </li></ol></li><li><p><input checked="" disabled="" type="checkbox"> </p><ol start="542"><li>01 Matrix (Medium)  求出每个1距离最近的0的距离长度</li></ol><ul><li>动归的思路是可以，<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMDEtbWF0cml4L3NvbHV0aW9uLzAxanUtemhlbi1ieS1sZWV0Y29kZS1zb2x1dGlvbi8=">官方题解<i class="fa fa-external-link-alt"></i></span>给出的一个insight就是：矩阵上某个点的信息传播，可以只从左上方和右下方进行传播。</li><li>但我觉得这里，官方题解给的bfs思路更好理解一些…</li></ul></li></ul><ul><li><p><input checked="" disabled="" type="checkbox"> </p><ol start="221"><li><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW1hbC1zcXVhcmUv">最大正方形<i class="fa fa-external-link-alt"></i></span> &amp; 1277<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291bnQtc3F1YXJlLXN1Ym1hdHJpY2VzLXdpdGgtYWxsLW9uZXMv">统计全为 1 的正方形子矩阵<i class="fa fa-external-link-alt"></i></span></li></ol><p>二维的，跟矩阵有关的，都是dp[i][j] 表示(i,j)为一个范围的边界点的一个值（这里就是以(i,j)为右下角的矩阵的最大边长）。</p><p>至于为什么是右下角而不是左上角或者其他角，其实都可以，选右下角主要是为了可以方便矩阵从第一行第一个，往右、往下遍历，这个比较符合人类的直觉。</p><ul><li><p>一次递归要用到左边,上面,左上角的信息,可以用两个一维数组压缩空间,还可以用一个一维+两个临时变量进行压缩</p><ul><li><input disabled="" type="checkbox"> 就是221不知道为啥越压缩,时空性能越差….    <ul><li><input disabled="" type="checkbox"> 先看下<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnQtc3F1YXJlLXN1Ym1hdHJpY2VzLXdpdGgtYWxsLW9uZXMvZGlzY3Vzcy82NDM0MjkvUHl0aG9uLURQLVNvbHV0aW9uLSUyQi1UaGlua2luZy1Qcm9jZXNzLURpYWdyYW1zLShPKG1uKS1ydW50aW1lLU8oMSktc3BhY2U=">人家<i class="fa fa-external-link-alt"></i></span>怎么做性能优化的吧…说不定是我优化的方式错了…</li></ul></li></ul></li><li><p>至于为什么这么递推,可以看下<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291bnQtc3F1YXJlLXN1Ym1hdHJpY2VzLXdpdGgtYWxsLW9uZXMvc29sdXRpb24vdG9uZy1qaS1xdWFuLXdlaS0xLWRlLXpoZW5nLWZhbmcteGluZy16aS1qdS16aGVuLTIv">这个题解<i class="fa fa-external-link-alt"></i></span>的简单证明</p></li><li><p>1277的思路我觉得看<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291bnQtc3F1YXJlLXN1Ym1hdHJpY2VzLXdpdGgtYWxsLW9uZXMvc29sdXRpb24vdG9uZy1qaS1xdWFuLXdlaS0xLWRlLXpoZW5nLWZhbmcteGluZy16aS1qdS16aGVuLWYv">这个讲解<i class="fa fa-external-link-alt"></i></span>更靠谱…</p><blockquote><p>$\underset{i}{\sum}$宽度为 i 的正方形的个数</p></blockquote></li></ul></li></ul><ul><li>小总结<ul><li>一般的递归就是考虑左边、上面、左上，再难一点就是从多个角度传递消息（目前221可以看出来从左上和右下两个角度传递消息就差不多了），但这种实际上也不是很好想，所以可以退而求其次：</li><li>其实矩阵也是一种规整的图，用搜索的思想也很不错<ul><li>如果想到是的dfs，大概率就是一个比较差的暴力，想办法剪枝 或者 进化/优化到dp</li><li>可以往bfs想，一般都还不错 ( e.g.1277 )</li></ul></li></ul></li></ul><hr><ul><li>1147段式回文<ul><li><input disabled="" type="checkbox"> 双指针解法</li><li><input disabled="" type="checkbox"> 贪心解法</li></ul></li></ul><ul><li>1235规划兼职工作</li></ul><p>==感觉这两个应该得好好研究下双指针问题再来做做…==</p><hr><p><strong><u>字符串系列</u></strong></p><ul><li><p><input disabled="" type="checkbox">  最长回文子串，但是我只能想到中心扩散的方式咋整… 而且还没实现完</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1wYWxpbmRyb21pYy1zdWJzdHJpbmcvc29sdXRpb24vemhvbmcteGluLWt1by1zYW4tZG9uZy10YWktZ3VpLWh1YS1ieS1saXdlaXdlaTE0MTkv">这个讲解<i class="fa fa-external-link-alt"></i></span>好详细！</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzZDEzNjkxMi9hcnRpY2xlL2RldGFpbHMvNzg5ODc2MjQ=">这个讲解不错<i class="fa fa-external-link-alt"></i></span></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      leetcode上dp问题的汇总和小总结
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://hexi519.github.io/categories/Algorithm/"/>
    
    
      <category term="DP" scheme="https://hexi519.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>dp总结</title>
    <link href="https://hexi519.github.io/Algorithm/dpSummary/"/>
    <id>https://hexi519.github.io/Algorithm/dpSummary/</id>
    <published>2020-12-04T16:08:37.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="dp总结"><a href="#dp总结" class="headerlink" title="dp总结"></a>dp总结</h1><ul><li><p>初始化是很重要的</p><ul><li>如果是求…  ，  就初始化为0</li><li>如果是求… ， 就初始化为maxInf或者</li></ul></li><li><p><strong><u>阶段和状态</u>**的划分开很重要，都是一个维度。（ 其实这里的stage就是 MDP里面的S<del>1</del>，S<del>2</del>，… , S<del>n</del> , state就是每个stage具体可以取的值 s ）。一般阶段都是有</strong><u>顺序性</u>**隐含在内，是事件发生到末端所要经历的必然阶段，状态是这个阶段可以取到的值。再注意，不要把状态 和 我们要求解的值 混肴了。</p><p>很多时候可能大家以为阶段是状态，但其实不是。阶段和状态共同组成我们dp数组的维度，which will be affected by action and transformed to others。举例：</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植：序列型动态规划<i class="fa fa-external-link-alt"></i></span>中，阶段是房子的位置，状态是这家房子有没有被打劫。(要打劫整条街，我总得一个一个屋子走过去吧，这就是我要完成打劫这件事所必经的阶段)</p></li><li><p>01背包中阶段是当前要选择放进去的第i个物品，状态是当前这个阶段，包里容量的可能的大小。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMi1rZXlzLWtleWJvYXJkL3NvbHV0aW9uL2RvbmctdGFpLWd1aS1odWEteGlhbmcteGktZmVuLXhpLWppZS1zaGktd2VpLXNoaS15Lw==">只有两个键的键盘<i class="fa fa-external-link-alt"></i></span>中，阶段是当前有几个A。如果你采用主动转移的思路，那么当前的状态就是当前粘贴板上的A有多少位。</p><blockquote><p>dp[i][j] = dp[i - j][j] + 1。注意，这里的解法只是比较naive的，进一步是可以状态压缩的。</p><ul><li><input disabled="" type="checkbox"> ==什么时候可以状态压缩==  应该从式子的转移本身就能看出来</li></ul></blockquote></li><li><p>很多时候我们会发现，一个问题也有很多个刻画方式。比如 <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLWlpL3NvbHV0aW9uL3RvbmcteW9uZy1zaS1sdS10dWFuLW1pZS1kYS1qaWEtamllLXNoZS13ZW4tdGktYnktLw==">打家劫舍：labuladong解法<i class="fa fa-external-link-alt"></i></span>中，dp[i]表示的是，不是<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植<i class="fa fa-external-link-alt"></i></span>大佬讲解中的任意一种：表示到目前为止打劫到的钱的累积金额( 需要第二个维度进行辅助 ) 或者 到目前位置为止，且打劫当前位置，打劫到的钱的累积金额。不过从前往后累积和从后往前累积实际上是差不多的，我只能说，以我的感觉来说”<u><strong>从第i个位置开始，且包括第i个位置</strong></u>“的思路会比较容易理解。(应该会有些场景有区别，目前还没做到相关题目)</p><p>总之，正如<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植<i class="fa fa-external-link-alt"></i></span>所说：</p><blockquote><p>状态设计的时候，<u>也会将序列中的位置作为状态表示的一维</u>。例如 dp[i]，而这一维一般来说可以表示这几种信息：</p><ul><li>第 / 前 i 个位置的答案</li><li>前 i 个位置里，第 i 个位置一定选择的答案</li></ul></blockquote></li></ul></li></ul><blockquote><ul><li><input disabled="" type="checkbox"> **<u>卧槽  ，这里两者存在矛盾哇… 一个说“前xx”的思路的复杂度是O(N^2)</u>**，但labuladong写出来的又没有那么复杂…</li></ul></blockquote><h2 id="dfs和dp的关系"><a href="#dfs和dp的关系" class="headerlink" title="dfs和dp的关系"></a>dfs和dp的关系</h2><ul><li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZnJvZy1qdW1wL3N1Ym1pc3Npb25zLw==">403 frog jump<i class="fa fa-external-link-alt"></i></span></li></ul><h1 id="dp分类"><a href="#dp分类" class="headerlink" title="dp分类"></a>dp分类</h1><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">序列型<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUvVkZaRVhBLw==">常见普通题型及状态表示<i class="fa fa-external-link-alt"></i></span>  【内含题目和习题】  <span class="exturl" data-url="aHR0cHM6Ly93bmp4eWsudGVjaC8xMTcuaHRtbA==">周植大佬的博客也不错啊！<i class="fa fa-external-link-alt"></i></span>（还有个DP的intro还没来得及看）</p><ul><li><input disabled="" type="checkbox"> 主动转移和被动转移 目前还没有看明白，在后一个blog里面</li></ul></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVk3NDExTjdCbg==">搜索：犹豫就会败北<i class="fa fa-external-link-alt"></i></span>  万物皆可搜索！</p></li><li><p>线性动规，区域动规，树形动规【打家劫舍Ⅲ】，背包动规【股票交易Ⅳ】四类</p></li></ul><h1 id="刷题时常犯的错误-积累的经验"><a href="#刷题时常犯的错误-积累的经验" class="headerlink" title="刷题时常犯的错误/积累的经验"></a>刷题时常犯的错误/积累的经验</h1><ul><li><p>二维矩阵中常常在初始化结果矩阵的时候, 把行和列搞反,导致有时候正方形的样例可以通过,但是矩形的就不行了</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rowNum,colNum = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">dist = [[<span class="number">20000</span>] * colNum <span class="keyword">for</span> _ <span class="keyword">in</span> range(rowNum)]</span><br></pre></td></tr></table></figure></li><li><p>deque的API其实更像list</p><ul><li>pop( ) , popleft( ) </li><li>append( ) ,appendleft( )</li><li>extend( ) ,extendleft( )</li></ul></li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><p><a href="">周植的博客</a></p><blockquote><p>序列型和升级型的DP的总结，还列举除了不少题目</p></blockquote></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvMDQwOERvZGdlbWluL2RwLWNvbmNlcHRpb25z">Andrewzdm 的博客<i class="fa fa-external-link-alt"></i></span></p><blockquote><ul><li>阶段和状态的设定必须保证全局唯一（MDP），否则就可以合并。</li><li>将决策写入状态中以消除后效性影响。</li><li>提到了主动状态转移和被动状态转移的区别（大部分题目是没有区别的），并用例子进行了时间复杂度分析。</li></ul></blockquote></li><li><p>zzx的分类列表</p><blockquote><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA0OA==">https://www.luogu.org/problemnew/show/P1048<i class="fa fa-external-link-alt"></i></span> 采药（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTczNA==">https://www.luogu.org/problemnew/show/P1734<i class="fa fa-external-link-alt"></i></span> 最大约数和（01背包） 【明天把两种筛法都做一下】</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA0OQ==">https://www.luogu.org/problemnew/show/P1049<i class="fa fa-external-link-alt"></i></span> 装箱问题（01背包）</p></li><li><p>有约束的01背包</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjY2Mw==">https://www.luogu.org/problemnew/show/P2663<i class="fa fa-external-link-alt"></i></span> 越越的组队（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjQzMA==">https://www.luogu.org/problemnew/show/P2430<i class="fa fa-external-link-alt"></i></span> 严酷的训练（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTkyNg==">https://www.luogu.org/problemnew/show/P1926<i class="fa fa-external-link-alt"></i></span> 小书童（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTgwMg==">https://www.luogu.org/problemnew/show/P1802<i class="fa fa-external-link-alt"></i></span> 5倍经验日（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTYxNg==">https://www.luogu.org/problemnew/show/P1616<i class="fa fa-external-link-alt"></i></span> 疯狂的采药（完全背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTY3OQ==">https://www.luogu.org/problemnew/show/P1679<i class="fa fa-external-link-alt"></i></span> 神奇的四次方数（完全背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjkxOA==">https://www.luogu.org/problemnew/show/P2918<i class="fa fa-external-link-alt"></i></span> 买干草（完全背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjM0Nw==">https://www.luogu.org/problemnew/show/P2347<i class="fa fa-external-link-alt"></i></span> 砝码称重（多重背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTkxMA==">https://www.luogu.org/problemnew/show/P1910<i class="fa fa-external-link-alt"></i></span> L国的战斗之间谍（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTUwNw==">https://www.luogu.org/problemnew/show/P1507<i class="fa fa-external-link-alt"></i></span> NASA的食物计划（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTUwOQ==">https://www.luogu.org/problemnew/show/P1509<i class="fa fa-external-link-alt"></i></span> 找啊找啊找GF（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTg1NQ==">https://www.luogu.org/problemnew/show/P1855<i class="fa fa-external-link-alt"></i></span> 榨取kkksc03（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTc1Nw==">https://www.luogu.org/problemnew/show/P1757<i class="fa fa-external-link-alt"></i></span> 通天之分组背包（分组背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTMzNg==">https://www.luogu.org/problemnew/show/P1336<i class="fa fa-external-link-alt"></i></span> 最佳课题选择（分组背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTIxNg==">https://www.luogu.org/problemnew/show/P1216<i class="fa fa-external-link-alt"></i></span> 数字三角形</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTUwOA==">https://www.luogu.org/problemnew/show/P1508<i class="fa fa-external-link-alt"></i></span> likecloud-吃吃吃</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTExNQ==">https://www.luogu.org/problemnew/show/P1115<i class="fa fa-external-link-alt"></i></span> 最大子段和</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTcxOQ==">https://www.luogu.org/problemnew/show/P1719<i class="fa fa-external-link-alt"></i></span> 最大加权矩形</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMzkwMg==">https://www.luogu.org/problemnew/show/P3902<i class="fa fa-external-link-alt"></i></span> 递增（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjc4Mg==">https://www.luogu.org/problemnew/show/P2782<i class="fa fa-external-link-alt"></i></span> 友好城市（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA5MQ==">https://www.luogu.org/problemnew/show/P1091<i class="fa fa-external-link-alt"></i></span> 合唱队形（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTAyMA==">https://www.luogu.org/problemnew/show/P1020<i class="fa fa-external-link-alt"></i></span> 导弹拦截（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTIzMw==">https://www.luogu.org/problemnew/show/P1233<i class="fa fa-external-link-alt"></i></span> 木棍加工（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjAwOA==">https://www.luogu.org/problemnew/show/P2008<i class="fa fa-external-link-alt"></i></span> 大朋友的数字（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTU2OQ==">https://www.luogu.org/problemnew/show/P1569<i class="fa fa-external-link-alt"></i></span> 属牛的抗议</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA2Mw==">https://www.luogu.org/problemnew/show/P1063<i class="fa fa-external-link-alt"></i></span> 能量项链（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTg4MA==">https://www.luogu.org/problemnew/show/P1880<i class="fa fa-external-link-alt"></i></span> 石子合并（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjMwOA==">https://www.luogu.org/problemnew/show/P2308<i class="fa fa-external-link-alt"></i></span> 添加括号（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTYyMg==">https://www.luogu.org/problemnew/show/P1622<i class="fa fa-external-link-alt"></i></span> 释放囚犯（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjczNA==">https://www.luogu.org/problemnew/show/P2734<i class="fa fa-external-link-alt"></i></span> 游戏（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTIyMA==">https://www.luogu.org/problemnew/show/P1220<i class="fa fa-external-link-alt"></i></span> 关路灯（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTc5OQ==">https://www.luogu.org/problemnew/show/P1799<i class="fa fa-external-link-alt"></i></span> 数列（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTQ3NA==">https://www.luogu.org/problemnew/show/P1474<i class="fa fa-external-link-alt"></i></span> 货币系统（计数类dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTE5Mg==">https://www.luogu.org/problemnew/show/P1192<i class="fa fa-external-link-alt"></i></span> 台阶问题</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjgwMA==">https://www.luogu.org/problemnew/show/P2800<i class="fa fa-external-link-alt"></i></span> 又上锁妖塔</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjY5Nw==">https://www.luogu.org/problemnew/show/P2697<i class="fa fa-external-link-alt"></i></span> 宝石串</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTE2NA==">https://www.luogu.org/problemnew/show/P1164<i class="fa fa-external-link-alt"></i></span> 小A点菜</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA1Nw==">https://www.luogu.org/problemnew/show/P1057<i class="fa fa-external-link-alt"></i></span> 传球游戏</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTAwNg==">https://www.luogu.org/problemnew/show/P1006<i class="fa fa-external-link-alt"></i></span> 传纸条</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjE5Ng==">https://www.luogu.org/problemnew/show/P2196<i class="fa fa-external-link-alt"></i></span> 挖地雷</p></li></ul></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      dp问题的套路归纳
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://hexi519.github.io/categories/Algorithm/"/>
    
    
      <category term="DP" scheme="https://hexi519.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>MeetingNotes1101</title>
    <link href="https://hexi519.github.io/MeetingNotes/MeetingNotes1101/"/>
    <id>https://hexi519.github.io/MeetingNotes/MeetingNotes1101/</id>
    <published>2020-11-25T20:35:09.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly93eC52emFuLmNvbS9saXZlL3R2Y2hhdC0xNTY1MzUyMTUzP3NoYXJldWlkPTMzNzU0MTY1NCZ2cHJpZD0wJnNoYXJldHN0YW1wPTE2MDM1ODc1NjA4MTkjLw==">视频地址<i class="fa fa-external-link-alt"></i></span></p><h1 id="陈凯-net-4-AI"><a href="#陈凯-net-4-AI" class="headerlink" title="陈凯 net 4 AI"></a>陈凯 net 4 AI</h1><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/163439-988187.png" style="zoom:50%;" /><ul><li><p>compress 传输量 并不能降低尾部传输时间</p><p>当然，平均的时延是会降低</p><p>说明瓶颈不在于传输量</p></li><li><p>丢一定量的数据包并不会影响模型的convergence</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/163348-450748.png" alt="image-20201118161135895" style="zoom:50%;" /><ul><li>那么应该丢哪些包？ 后层的gradient和larger gradient更重要</li></ul></li><li><p>DNN流的特性：跟以前的信息包不一样，前者是一个message包含多个包（包之间存在依赖性），现在是一个包包含多个message（包与包之间关联性不大），所以不用太多去考虑包乱序等事情。</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/163350-390697.png" alt="image-20201118163215817" style="zoom:50%;" /><blockquote><p>至于现在 一个包 包含多个message这个特性是怎么来的，我就没有细究了。</p></blockquote><p>之前的ECMP等负载均衡，就会考虑 perflow的粒度性能就差了，perpacket的粒度还得考虑乱序问题。</p></li></ul><h1 id="李丹-Net-4-AI"><a href="#李丹-Net-4-AI" class="headerlink" title="李丹 Net 4 AI"></a>李丹 Net 4 AI</h1><p>使用==贝叶斯优化==</p>]]></content>
    
    <summary type="html">
    
      Notes of the meeting
    
    </summary>
    
    
      <category term="MeetingNotes" scheme="https://hexi519.github.io/categories/MeetingNotes/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>recommand-sys-learning</title>
    <link href="https://hexi519.github.io/Codes/recommend-sys-learning/"/>
    <id>https://hexi519.github.io/Codes/recommend-sys-learning/</id>
    <published>2020-11-25T11:02:06.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly90aWFuY2hpLmFsaXl1bi5jb20vY29tcGV0aXRpb24vZW50cmFuY2UvNTMxODQyL2luZm9ybWF0aW9u">赛题<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9uYnZpZXdlci5qdXB5dGVyLm9yZy9naXRodWIvaGV4aTUxOS90ZWFtLWxlYXJuaW5nLXJzL2Jsb2IvbWFzdGVyL1JlY29tbWFuZE5ld3MvUmVjb21tYW5kLXN5cy5pcHluYg==">myCodes<i class="fa fa-external-link-alt"></i></span> &amp; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleGk1MTkvdGVhbS1sZWFybmluZy1ycy9ibG9iL21hc3Rlci9SZWNvbW1hbmROZXdzL0Jhc2VsaW5lLmlweW5i">Baseline after comments<i class="fa fa-external-link-alt"></i></span></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li><p>数据</p><p><code>sample_submit.csv</code>：提交样例文件，对应50000个用户对5个文件的点击数预测</p><p><code>train_click_log.csv</code>：训练集用户点击日志</p><p><code>testA_click_log.csv</code>：测试集用户点击日志</p><p><code>articles.csv</code>：新闻文章信息数据表</p><p><code>articles_emb.csv</code>：新闻文章embedding<u>向量表示</u></p></li><li><p>指标</p><p>MRR(Mean Reciprocal Rank)，关注top5的预测结果。其中越前面的匹配上了就得分越高（具体可以看下baseline代码里面的讲解</p></li></ul><h1 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h1><p>reduce_mem节省内存，就是尽量降低数据精度</p><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><ul><li>如果是为了获取线上提交结果应该讲测试集中的点击数据合并到总的数据中</li></ul><blockquote><p>没懂这是什么意思</p></blockquote>]]></content>
    
    <summary type="html">
    
      recommendation system learning from datawhale
    
    </summary>
    
    
      <category term="Codes" scheme="https://hexi519.github.io/categories/Codes/"/>
    
    
      <category term="Recommendation" scheme="https://hexi519.github.io/tags/Recommendation/"/>
    
  </entry>
  
  <entry>
    <title>Metro</title>
    <link href="https://hexi519.github.io/ExtensiveReading/Route/Metro/"/>
    <id>https://hexi519.github.io/ExtensiveReading/Route/Metro/</id>
    <published>2020-11-23T13:27:31.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>FRR (fast rerouting</p></li><li><p>reverse path forwarding (RPF)</p></li><li><p>光看related work其实还是不是很明白别人做的是什么</p></li></ul><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    在大型网络中，故障是常见的，而不是例外。 为了向上层应用提供高质量的服务，期望在发生故障时能够快速启动融合备份路径。 在本文中，我们设计了一种基于IP的快速重路由(IP based Fast ReRouting)方案，该方案称为Metro，它可以解决任意单个链路/节点故障且后备路径扩展性低的情况下的流量重路由收敛问题。<br>   当网络中发生故障时，Metro首先指示将受到故障影响的所有网络区域，然后查找一些网桥链接以将受影响的网络区域中的流量排放到不受故障影响的网络区域 。 这样，Metro无需配置隧道，封装或修改数据包，因此易于在当前网络中部署。 大量的仿真表明，Metro可以解决备用路径比最新解决方案短的任意单链路/节点故障，并且Metro中约98％的备份路径延伸与最佳隧道方案相同。</p><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><blockquote><p>​    ISP网络或数据中心网络的网络都遭受无法预测的故障。 发生故障时，一个或多个网络组件（例如节点和链接）将无法传递流量，从而导致大量流量损失[1]，[2]。 此外，这种流量丢失可能给网络顶部运行的应用程序带来较大的响应延迟。 由于当前网络中的许多应用程序都对延迟敏感，因此较大的响应延迟可能会大大降低应用程序性能和用户体验。 因此，在网络故障发生后，需要快速重路由（FRR）方案来快速恢复流量传递。 为了使恢复时间最短，在这项工作中，我们集中于预先计算重新路由路径以应对网络故障的方案。  <u>FRR机制的主要关注点在于如何在效率和有效性这两个重要方面之间做出明智的权衡</u>。 一方面，FRR机制应该简单有效，以至于它几乎没有增加数据平面的开销。 另一方面，它应该达到理想的保护范围。 传统的基于纯IP的FRR机制，例如无环路替代（LFA）[3]和Uturn [4]注重效率，而许多基于隧道的机制则注重有效性。 基于IP的FRR的目标是通过使用预先计算的备用IP下一跳将故障反应时间减少到10毫秒。 在基于隧道的FRR机制中，有一些是通过多协议标签交换（MPLS）隧道实现的，例如RSPV-TE [5]，[6]，而另一些则是通过IP-in-IP隧道，数据包封装或数据包实现的。 标记[7] – [9]。 与FRR本身的实现相比，其相应平台的部署要复杂得多，更不用说由其他操作引起的其他问题了，例如数据包分段和封装。<br>   为了兼顾效率和有效性，在本文中，我们提出了Metro，一种用于处理网络故障的高效流量快速重路由方案。 就我们所知，Metro是第一个无需隧道的FRR机制，可以处理任意单个链路/节点故障而无需修改任何数据包。 与Uturn [4]相似，Metro中的交换机进行反向路径转发（RPF）检查以发出故障信息。 但是，Metro对网络拓扑进行了透彻的分析，以便在Uturn相同情况下提供全面的保护。</p></blockquote><blockquote><p>​    为了勾勒出Metro的核心概念和方法，我们看一下华盛顿特区真正的Metro（图1）的面料特征。 在华盛顿特区的地铁网络中，有许多线路通向中央枢纽站。 还可以找到许多秘密通道，这些通道主要由维护人员用于在线路之间快速行驶。 如果有人沿着其中一条线路步行到枢纽，并且发现地铁隧道被阻塞，则他/她可以通过这些秘密通道到达其他线路，而其他线路的通向枢纽的路径将绕过阻塞的线路。<br>​    Metro遵循地铁架构的相同理念，以实现基于IP的纯FRR。 对于网络中的任何目标，Metro通过分析路由树并在分支之间找到桥梁，Metro将受故障影响的分支上的流重定向到其相邻分支。</p></blockquote><ul><li><p>贡献</p><p>​    我们从理论上证明Metro可以处理任意单链路故障（SLF）和单节点故障（SNF），而无需修改重新路由的数据包。 评估真实世界和人工网络拓扑的方法也证实了这一点。<br>​    评估还表明，Metro通常会找到比其他FRR机制更短的备份路径来重定向受影响的流。<br>​    本文的其余部分安排如下。 第二节介绍FRR的背景。 第三部分简要介绍了Metro设计。 第四，第五和第六部分介绍了设计细节。 第七节对Metro进行了实际和人工拓扑评估。 最终，第八节总结了本文。</p></li></ul><h1 id="2-Background-and-relatede-works"><a href="#2-Background-and-relatede-works" class="headerlink" title="2 Background and relatede works"></a>2 Background and relatede works</h1><h2 id="A-Fast-Rerouting"><a href="#A-Fast-Rerouting" class="headerlink" title="A. Fast Rerouting"></a>A. Fast Rerouting</h2><p>​    当组件故障(链路故障或节点故障)发生在网络中，重新计算恢复方案，刷新路由表并等待路由信息收敛需要几秒钟到几分钟。 在这样的恢复期间，某些数据包可能会由于传递路径不完整或由于将流量转移到绕过故障的链路而导致的临时网络拥塞而丢失。 在高速网络中，即使恢复时间很短，也可能导致巨大的数据包丢失[10]，[11]。 为了减少网络恢复期间的流量损失，FRR旨在将受故障影响的数据包定向到预先计算的备份路径，这些路径在新路由最终收敛之前便已到达目的地[12]，[13]。<br>   反应时间对于FRR至关重要，因此在发生故障时查找备用路径是不切实际的。 转发引擎需要基于预先计算的信息在本地立即对故障做出反应[14]。 对于任何FRR机制，全面保护单个故障非常重要，这包括两个方面：</p><p>​    •对SLF的全面保护：对于网络中的任何SLF，如果故障链路的两端仍然连接，则应始终确定一条备份路径 从其中一个转移到另一个。<br>   •对SNF的全面保护：对于网络中的任何SNF，如果故障节点没有将整个网络分成多个部分，则应始终为通过该故障节点的每条路径找到备份路径。</p><p>​    在设计FRR方案时，除了确保全面保护单个故障外，还应考虑网络延迟，备份路径长度，拥塞级别[14]等。</p>]]></content>
    
    <summary type="html">
    
      Huawei,Tsinghua@ToN&#39;19
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="Routing" scheme="https://hexi519.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>grdientVisualization</title>
    <link href="https://hexi519.github.io/Codes/grdientVisualization/"/>
    <id>https://hexi519.github.io/Codes/grdientVisualization/</id>
    <published>2020-11-23T10:56:26.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VLB</title>
    <link href="https://hexi519.github.io/ExtensiveReading/Route/VLB/"/>
    <id>https://hexi519.github.io/ExtensiveReading/Route/VLB/</id>
    <published>2020-11-10T11:50:45.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>全称 valiant load balance ( 这里的Valiant是个人名)</li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><blockquote><p>在许多网络中，流量矩阵要么难以度量和预测，要么随时间变化很大。 在这些情况下，使用Valiant负载平衡（VLB）支持所有可能的流量矩阵是一种有吸引力的选择。 例如，即使由于高水平的聚集而导致Internet主干网中的流量非常平滑，但仍然很难测量。 准确地测量流量矩阵（例如使用NetFlow）太昂贵了，无法一直进行下去，而使用链路测量的标准方法会产生20％或更多的误差。 </p><p>即使可以令人满意地获得当前的流量矩阵，但由于Internet流量增长的不可预测性，将其推断到未来仍充满不确定性。 最后，由于Internet流量是动态的，因此流量矩阵可以随时偏离其正常值，从而可能导致拥塞。 网络看到的流量需求可以由流量矩阵表示，该矩阵表示每个节点向每个其他节点发起流量的速率。 我们说如果网络中的每个链接的流量矩阵所引起的负载小于链接的容量，则网络可以支持流量矩阵。 当网络无法支持提供给它的流量矩阵时，网络中至少一个链路的负载大于其容量。 发生拥塞，缓冲区中的积压积淀在拥塞的链路上，从而导致数据包丢失，增加的延迟以及延迟的高度变化。 理想情况下，我们希望设计一种可以支持各种流量矩阵的网络，以使拥塞很少发生或根本不发生。 </p><p>在本文中，我们讨论了VLB在构建网络中的使用，该网络可以有效地支持不会超额预订任何节点的所有流量矩阵。 我们首先简要地调查了VLB在网络各个方面的广泛使用，并描述了在网络中使用VLB的基本情况。</p></blockquote><ul><li><p>文章结构</p><p>第2.2节将VLB从同质设置扩展到具有任意容量的网络，第2.3节介绍了如何预防和快速恢复VLB网络中的故障，第2.4节建议使用VLB在两个网络之间路由流量。 最后，第2.5节讨论了未来可能的工作。</p></li></ul><h2 id="1-1-wide-use-of-VLB"><a href="#1-1-wide-use-of-VLB" class="headerlink" title="1.1 wide use of VLB"></a>1.1 wide use of VLB</h2><blockquote><p>在1980年代初期，Valiant [19]首次提出了一种通过随机挑选的中间节点到数据包目的地的路由方法。 他表明，<u>在N节点的二元立方网络中，在任何排列流量矩阵的情况下，分布式两阶段随机路由可以在O（log N）时间内以压倒性的概率将每个数据包路由到其目的地。 这是在O（log N）时间内在稀疏网络中路由任意置换的第一个方案</u>。 <strong>从那时起，这种随机路由已被广泛使用，通常称为（VLB），随机负载平衡或两阶段路由</strong>。  VLB具有许多良好的特性。 <strong>它是分散的，每个节点都在本地决策。 这也使该方案可扩展。</strong>  VLB is agonistic to traffic matrix，because <u><strong>randomness erases the traffic pattern ( 我觉得这里的意思是随机性会抵消流量模式 )，and different traffic pattern can result in the same load on the links</strong></u>。 </p><p><u>在发明之后不久，它就被用于其他互连网络中以进行并行通信，以缩短传送时间[1]，并减轻不利的流量模式的影响[13]</u>。 ==还有这种作用…[13]里面提到的omega network又是什么?下面的torus network又是啥…== 近年来，它适用于环形网络（torus networks）中的路由[17，18]，以便在不牺牲平均情况性能的情况下提供最坏情况的性能保证。 关键是使用VLB adaptively，这是基于以下观察：在低负载下，仅进行少量负载平衡就可以避免拥塞。  VLB还用于楼宇网络交换机，具有极大的可扩展性和性能保证，而无需集中式调度程序。 它用于ATM交换机[7]，路由器[4、5]，光路由器[3、9]和软件路由器[2]。 特别是，该方案is rediscovered (我觉得这里可以理解为重新挖掘)，用于设计路由器交换结构[4]来缓解路由器的扩展挑战，因为集中式方案很难跟上不断增长的链路速度。 在这种情况下，已证明拆分流量 in a round-robin fashion对链路负载的影响与随机拆分[4]相同，就支持所有流量矩阵所需的总互连容量而言，这是最有效的[8]。 </p><p>几乎同时，几个groups将VLB的思想独立地应用于Internet的流量工程和网络设计，以便有效地支持所有可能的流量矩阵。  Kodialam等人的两阶段路由[11，12] 是个traffic engineering方法，其中在固定容量的链路上建立了完整的隧道网格，并在网络的两个阶段（即两跳）中发送数据包。 网络。  Winzer等人的选择性随机负载平衡[14、16、21]使用VLB及其变体来设计经济高效的光网络。 他们的模型假设链路的成本包括光纤和终端设备，因此有减少链路的动机。 在最佳设计中，流量仅负载均衡到几个中间节点。  Zhang-Shen和McKewon [23，25]提出在骨干网的逻辑全网状网络( logical full mesh )上使用VLB，以支持所有流量矩阵并快速从故障中恢复。 另外，VLB还用作以太网LAN [20]中的光路由策略，用于城域WDM环中的调度[10]，电路交换网络[22]，以及数据中心网络的规模化和commoditizing[6]。</p><p>对VLB网络的排队属性的研究[15]发现，VLB消除了网络中的拥塞，伪随机（例如，循环）负载平衡减少了排队延迟。 当用于在网络之间路由流量时，VLB还可以消除对等链路上(peering links)的拥塞[26]。</p></blockquote><ul><li><p>==??== 如何做到的，本地决策，随机路由？还是没说啊…</p></li><li><p>可以在application flow level 处理 packet-by-packet或者flow-by-flow</p></li><li><p>分割按照random和deterministic都是一样的效果（已经证明出来</p></li></ul><h2 id="1-2-Simple-VLB-Network"><a href="#1-2-Simple-VLB-Network" class="headerlink" title="1.2 Simple VLB Network"></a>1.2 Simple VLB Network</h2><blockquote><p>这里的capacity指的是可以发起(initiate)和接收(receive)多少流量，缓冲区采用absorb这个词</p></blockquote><p>在full-mesh且每个节点的接收容量都是r的前提下，我们可以得到结论 : 相比于没有LB的（routing through direct path），VLB可以达到N/2倍的效率</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20201111145531666.png" alt="image-20201111145531666" style="zoom:80%;" /><h1 id="2-VLB-in-Heterogeneous-Networks"><a href="#2-VLB-in-Heterogeneous-Networks" class="headerlink" title="2 VLB in Heterogeneous Networks"></a>2 VLB in Heterogeneous Networks</h1><p>牵扯到分配比了，异构里面最简单的就是按r<del>i</del>的大小为权重进行分配，which is a direct generalization from uniform multicommodity flow in the homogeneous case to product multicommodity flow.</p><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li>里面有问题还是要ask下…<ul><li>smooth traffic</li><li>NetFlow to measure traffic matrix accurately<ul><li>using link measurement ，难道还有别的方法么？</li><li>配置在哪里，需要路由器配置一些特殊服务么？</li></ul></li><li>N-node binary cube network这个架构要了解下，可以问问王帅</li></ul></li><li>应该找个综述看看…(比如说18年那个)</li><li>路由分割如何保证包不乱序</li><li>流量工程和路由什么关系…</li></ul><ul><li>整理下好词好句</li></ul><h1 id="inspiration"><a href="#inspiration" class="headerlink" title="inspiration"></a>inspiration</h1><ul><li>感觉思路是 证明是NP难问题，然后用强化学习去解？</li></ul><h1 id="基于Internet的路由策略综述研究-另外开一个中文综述的文件"><a href="#基于Internet的路由策略综述研究-另外开一个中文综述的文件" class="headerlink" title="基于Internet的路由策略综述研究 另外开一个中文综述的文件"></a><span class="exturl" data-url="aHR0cDovL3d3dy5qc2preC5jb20vQ04vYXJ0aWNsZS9vcGVuQXJ0aWNsZVBERi5qc3A/aWQ9MTUxODE=">基于Internet的路由策略综述研究<i class="fa fa-external-link-alt"></i></span> 另外开一个中文综述的文件</h1><blockquote><p>这篇文章不错啊，文绉绉的。</p></blockquote><ul><li><p>QoS路由问题的核心就是对网络多约束条件下路由选择中的额NP完全性问题求解。</p></li><li><p>这是为啥</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20201111154656841.png" alt="image-20201111154656841" style="zoom:67%;" /></li><li><p>路由策略设计原则</p><ul><li><p>等强设计原则</p></li><li><p>降低成本原则</p><ul><li>需要信息越多，消耗的成本越高</li></ul></li><li><p>面向应用中的服务质量要求的原则</p><ul><li>网络应用大致分为四类<ul><li>非实时数据</li><li>实时图像</li><li>实时声音</li></ul></li><li>视频会议</li></ul></li></ul></li><li><p>03年的时候，不确定模型、动态模型、自适应模型是研究热点</p><ul><li><p>不确定性模型</p><p>针对网络状态信息不精确提出的。途径有：</p><ul><li><p>采用模糊理论进行不精确描述和概率分析 ；</p><ul><li>鉴 于神经网络不需要精确的系统描述（？这个着实没懂😓），只需要训练学习，能够实现联 想推理，容错性强，且 具有并行结构，实时性强 ，因此可以采用神经络对不精确模型进行 建模 ；</li><li>在网络系统的路由 、调度 、接纳控制等算法中引入随机 性方 法 与策 略 ；</li></ul></li><li><p>将预先计算和在线计算相结合</p></li></ul></li><li><p>动态模型</p><p>动态特性，即系统必须在运行过程中实时处理出现的异常、随机事件和局部故障，实现动态重构。【有点像快速重路由干的事情】</p></li><li><p>自适应模型</p><p>感觉就是我们现在做的事情</p></li></ul></li></ul><h1 id="基于深度强化学习的物联网智能路由策略"><a href="#基于深度强化学习的物联网智能路由策略" class="headerlink" title="基于深度强化学习的物联网智能路由策略"></a>基于深度强化学习的物联网智能路由策略</h1>]]></content>
    
    <summary type="html">
    
      Algorthms for Next Generation Netwroks&#39;2010
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Routing" scheme="https://hexi519.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>NUM</title>
    <link href="https://hexi519.github.io/NUM/"/>
    <id>https://hexi519.github.io/NUM/</id>
    <published>2020-11-10T11:50:45.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>考虑一个由一组容量的单向链路组成的网络，该网络由一组源共享，其中源的特征在于效用函数的传输速率呈凹形增加，目标是计算使总和最大化的源速率 的公用事业超过了容量限制。 集中解决该问题不仅需要了解所有实用程序功能，而且更糟糕的是，由于通过共享链接进行的源耦合，可能导致所有源之间的复杂协调。 取而代之的是，我们提出了一种分散式方案，该方案消除了这一要求，并自然地适应了不断变化的网络状况。 关键是要考虑对偶问题，其结构建议将网络链接和源视为分布式计算系统的处理器，以使用梯度投影法解决对偶问题。 每个处理器执行局部算法，将其计算结果传达给其他处理器，然后重复该循环。 该算法采用熟悉的反应流控制形式。 每个链路基于本地总的源速率，计算出链路上带宽单位的“价格”。源被反馈到标量价格，在标量价格中，使用的所有链路的总和将被收取，并且它选择传输速率以最大化自身的利益。 公用事业减去带宽成本。 这些单独的最优价格对于一般的价格向量可能不是社会最优的，即，它们可能不会使总效用最大化。 该算法迭代地接近使个人和社会最优性保持一致的价格向量，从而确实使总效用最大化。<br>   该算法是部分异步的[5，Ch。  [图6]中，源和链路可以基于过时的信息进行计算，它们可以在不同的时间以不同的频率进行通信，并且通信延迟可能很大，不同并且随时间变化。 我们证明只要更新之间的间隔是有界的，该算法就会收敛以产生最佳速率。 在平衡状态下，共享相同链接的源不一定平等地共享可用带宽。 相反，它们的份额反映了它们如何根据效用函数来表示对资源的重视程度，以及它们对资源的使用如何暗含了他人的成本。 这可能是根据不同的费率分配提供差异化服务的基础。 推导了基本算法，并在静态环境中证明了其收敛性，该环境中的链路容量和活动源集保持不变。 该算法直接推广到时变环境的情况。 我们从原型中给出了一些测量结果，这些测量结果说明了网络条件变化时算法的收敛性。 本文的结构如下。 在第二节中，我们提出了优化问题及其激励我们方法的对偶。 在第三部分中，我们导出了同步算法并描述了其收敛性。 该算法及其收敛证明在第四节中扩展为异步设置。 在第五节中，我们谈到公平和定价。 在第六节中，我们介绍了从原型获得的收敛性实验结果。 收敛性证明在两个附录中。  </p></blockquote><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    We propose an optimization approach to flow control where the objective is to maximize the aggregate source utility over their transmission rates。 我们将网络链接和源视为分布式计算系统的处理器，使用gradient project algorithm去解决dual problem。 在此系统中，源选择传输速率以最大化their own benefits, utility minus bandwidth cost，and network links adjust bandwidth prices to coordinate the sources’ decisions.  We provide asynchronous distributed algorithms and prove their convergence in a static environment. We present measurements obtained from a preliminary prototype to illustrate the convergence of the algorithm in a slowly time- varying environment. We discuss its fairness property.。 我们允许 feedback delays to be different, substantial（很大的意思），and time varing，并且链接和源可以在不同的时间以不同的频率进行更新。 我们提供了异步分布式算法，并证明了它们在static environment中的收敛性。我们介绍了从初步原型获得的测结果，以说明算法在slowly time-varying的环境中的收敛性。 我们讨论其公平性(We discuss its fairness property)。</p><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><p>It seems better to 使用可变比特率（ABR）而不是恒定比特率（CBR）服务为可变带宽的弹性流量[31]提供服务[31]。的确，这种folklore可以在以下抽象模型中得到正式证明：假设网络为一组弹性资源提供固定和可变带宽，并根据过量需求对其定价，并且资源自由购买以最大程度地发挥自己的利益。 解释是，在模型中仅需要固定带宽的源实际上将订阅CBR，而同时需要固定带宽和可变带宽的源将subscribe to ABR with a minimum cell-rate guarantee。 我们在[23]，[24]中表明，在均衡状态下，所有信号源都处于最佳状态，需求等于供给，每个信号源都希望有严格正数的可变带宽。 这种观察可能为端到端流量控制提供了另一个动机，因为无功流量控制是提供可变带宽的一种实用方法，在无功流量控制中，源响应网络条件的变化来调整其传输速率。 本文的目的是提出一种流量控制的优化方法，其中将控制机制作为优化网络性能全局度量的一种手段。 我们将介绍同步和异步算法，并证明它们在静态网络环境中的收敛性。 然后，我们将描述一个原型，并提供实验测量值以说明算法的收敛性。</p><blockquote><p>这里把reactive flow control都叫做无功流量控制…</p></blockquote><h2 id="A-summary"><a href="#A-summary" class="headerlink" title="A summary"></a>A summary</h2><ul><li><p>背景/元素介绍</p><ul><li><p>a set L of 无向链路 of capacities $c_l, l\in L$</p></li><li><p>the network is shared by a set of $S$ of sources , and $s$ is characterized by a utility function  $U_s(x_s)$, <strong><u>which is concave</u></strong> increasing in its transmission rate $x_s$  ==居然是凹的..能理解为啥一定要是凹的么==</p></li><li><p>The goal is to calculate source rates that maximize the sum of the utilities $\sum_{s\in S} U_s(x_s)$ over $x_s$ subject to capacity constraints</p><p>集中解决该问题不仅需要了解所有实用程序功能，而且更糟糕的是，由于通过共享链接进行的源耦合，可能导致所有源之间的复杂协调。 取而代之的是，我们提出了一种分散式方案，**<u>该方案消除了这一要求</u>**【==居然可以去耦合，惊了==】，并自然地适应了不断变化的网络状况。 关键是要考虑对偶问题，其结构建议将网络链接和源视为分布式计算系统的处理器，以使用梯度投影法解决对偶问题。 每个处理器执行局部算法，将其计算结果传达给其他处理器，然后重复该循环。</p></li></ul></li></ul><ul><li><p>该算法采用熟悉的**<u>reactive flow control</u>**。</p><ul><li><p>流程</p></li><li><p>每个链路$l$基于local aggregate source rate==这个指的是收包的速率?==，计算出链路上带宽单位的“价格”$p_l$。A source $s$ is fed back the scalar price  $p^s=\sum p_l$，where the sum is taken over all links that  $s$ uses, and it chooses a transmission rate  $x_s$  that maximizes it own benefit $U_s(x_s)-p^sx_s$ , utility minus the bandwidth cost。</p></li><li><p>这些单独的最优价格对于a general price vector( $p_l,l\in L$ )可能不是social optimal，i.e.，它们可能不会使总效用最大化。该算法iteratively approaches a price vector ( $p_l^*,l\in L$ ) that aligns 个人和社会最优性保持一致的价格向量，从而( $x(p_l^{*s}),s\in S$ )确实使总效用最大化。</p><blockquote><p>我觉得这里a general price vector翻译成总体的价格向量</p><p>==所以这里的意思是调整价格向量？==</p></blockquote></li><li><p>该算法是<u>部分异步</u>的[5,Ch. 6]中，源和链路可以基于过时的信息进行计算，它们可以在不同的时间以不同的频率进行通信，并且通信延迟可能很大，不同并且随时间变化。 </p><ul><li><p>我们证明只要更新之间的间隔是有界的，该算法就会收敛以产生最佳速率。 </p></li><li><p>在平衡状态下，共享相同链接的源不一定平等地共享可用带宽。 相反，它们的份额反映了how they value their use of the resources，以及它们对资源的使用如何暗含了a cost on others。 这可能是根据不同的费率分配提供差异化服务的基础。 </p></li><li><p>基本算法 is derived and its convergence proved in a <u>static environment</u>，where 链路容量和活动源集保持不变。 该算法直接推广到时变环境的情况。 我们从原型中给出了一些测量结果，这些测量结果说明了<u>网络条件变化时</u>算法的收敛性。 </p><blockquote><p>定义了什么是static environment</p></blockquote></li></ul></li></ul></li><li><p>本文的结构如下。</p><ul><li>在第二节中，我们提出了优化问题及其激励我们方法的对偶。 </li><li>在第三部分中，我们导出了同步算法并描述了其收敛性。</li><li>该算法及其收敛证明在第四节中扩展为异步设置。</li><li>在第五节中，我们谈到公平和定价。 </li><li>在第六节中，我们介绍了从原型获得的收敛性实验结果。 收敛性证明在两个附录中。</li></ul></li></ul><h2 id="B-extensions"><a href="#B-extensions" class="headerlink" title="B extensions"></a>B extensions</h2><ul><li><p>现在，我们评论过去的作品和扩展。 **<u>基本算法已在[20]中提出，初步原型在[19]中进行了简要讨论</u>**。 在本文中，我们通过分析和实施来分析其收敛性和公平性。 基本算法要求将链接价格传递给源，将源速率传递给链接，<u>因此无法在Internet上实现</u>。 </p></li><li><p><u><strong>如下[25]，[21]大大简化了此通信要求</strong></u>。</p><p>在[25]中，我们描述了一种使用本地信息进行链接以估算源速率的方法，并证明了仍然保持了最优性。 这消除了从源到链接的显式通信的需要。 </p><p>相反，我们在[21]中提出了一种方法，该方法仅使用二进制反馈即可完成从链接到源的通信。 这可以通过使用IP头[9]，[27]中建议的显式拥塞通知（ECN）位来实现。 这两个简化组合成一个流控制方案，我们称之为随机早期标记（REM），它是随机早期检测（RED）的一种形式[10]，它不仅可以稳定网络队列，而且可以跟踪全局最优值。 面对较大的反馈延迟，使链接的价格取过去价格的加权平均值，REM变得更强大[1]。  REM及其增强功能将在本文的第二部分中详细介绍。</p></li></ul><ul><li><p>**<u>本文提出的优化模型具有双重价值</u>**。 首先，although it may not be possible, or critical, that optimality is exactly attained in a real network，但优化框架提供了一种将整个网络明确引导至desirable operating point的方法。下面我们将看到流控制可以看作是网络上的分布式计算，因此，整个网络的行为很容易理解。 其次，将实用的流控制方案简单地视为某种优化算法的实现是有用的。 然后，优化模型使系统的方法可以设计和完善这些方案，其中对流控制机制的修改以对优化算法的修改为指导。</p><p>例如，众所周知，牛顿算法的收敛速度比梯度投影算法快得多。 通过用牛顿算法代替本文提出的梯度投影算法，我们在[2]中推导了一种实用的牛顿式流量控制方案，该方案可以证明保持最佳状态，并且与此处的基本方案具有相同的通信要求，但享有更好的收敛性。 我们还将线性控制中的pole-placement technique应用于此模型，以在面对较大的反馈延迟时稳定其瞬态。 这导致了更健壮的REM，见[1]。 </p></li></ul><h2 id="C-related-work"><a href="#C-related-work" class="headerlink" title="C related work"></a>C related work</h2><p>​    关于流量控制的文献很多，包括原始的TCP流量控制[15]和最近[10]的enhancement，例如[28]，[6]的二进制反馈方案，[22]的两位反馈方案。例如[3]，[29]，[7]等的控制理论方法。另请参阅[14]中的recent review。 </p><p>​    基于优化的流量控制的关键前提[8]，[11]-[13]，[16]，[17]，[19]-[21]，[25]是带宽评估不同的源应做出不同的反应去应对网络拥塞。所有这些工作都通过优化问题来激发流控制，并导出其控制机制作为优化问题的解决方案。 它们在目标功能或解决方案的选择上有所不同，并导致在源和网络链路上实施的流控制机制大不相同。</p><p>我们的模型最接近[16]，[17]。 确实，他们和我们的工作都具有最大化总source utility的相同目标。 在[16]，[17]中，该目标被分解为网络和资源的优化子问题，并且他们为解决方案提出了一种不同的机制，其中每个资源选择支付意愿，网络将价格分配给这些资源, in a way that is proportionally fair。 他们的方法的一个有趣特征是，它允许用户决定他们的payments并接收what the network allocates，而在我们的方法中，users decide their rates and pay what the network charges。 </p><p>参见第3节中算法A1之后的Remark 3中的更详细比较。</p><h1 id="2-Optimization-Problem"><a href="#2-Optimization-Problem" class="headerlink" title="2 Optimization Problem"></a>2 Optimization Problem</h1><p>In this section, we state the optimization problem that leads to our congestion control framework, and suggest a solution approach. Algorithms to solve the problem will be given in the following sections.</p><h2 id="A-Primal-Problem"><a href="#A-Primal-Problem" class="headerlink" title="A Primal Problem"></a>A Primal Problem</h2><ul><li><p>无向链路集合<img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/061641-41204.png" alt="image-20201112093628276">with capacity $c_L$ , and node set $S$</p></li><li><p>source $s$ is characterized by 4 parameters $(L(s),U_s,m_s,M_s )$</p><ul><li><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/093928-566242.png" alt="image-20201112093823706">是s使用的链路</li><li><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/093928-477615.png" alt="image-20201112093839793">是效用函数 ==这里给映射到负的去了。。可以。不过效用函数本来是正的 ？？why一定positive== 是严格凹的 in its argument 【==in its argument就不是很懂什么意思了…==】</li><li><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/093931-317765.png" alt="image-20201112093928373">是最小和最大的传输速率，required by source $s$. <img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/061911-954792.png" alt="image-20201112094016129"><ul><li>这里画蛇添足定义了个区间<img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094201-949888.png" alt="image-20201112094200258"> and vector <img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094251-895066.png" alt="image-20201112094214541">，也许是为了后面方便描述吧</li><li>以及<img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094319-535488.png" alt="image-20201112094302977"> 还有他们之间的关系 : <img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094409-28038.png" alt="image-20201112094353039"><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094418-230495.png" alt="image-20201112094417287"></li></ul></li></ul></li><li><p>目标是</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/100622-139567.png" alt="image-20201112094447875"></p><p>​    约束（2）说，任何链路上的总源速率不超过容量。 由于目标函数严格是凹的，因此是连续的，并且可行解集很紧凑，因此存在一个称为初始最优解的唯一最大化器。</p><p>​    尽管目标函数是分散在$x_s$中的，但源速率是由约束条件（2）耦合的。 解决原始问题（1）–（2）直接需要可能所有来源之间的协调，这在实际网络中是不切实际的。 分布式和分散式解决方案的关键是看它的dual。</p></li></ul><h2 id="B-dual-problem"><a href="#B-dual-problem" class="headerlink" title="B dual problem"></a>B dual problem</h2><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/031850-49320.png" alt="image-20201112100641332"></p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/031915-980440.png" alt="image-20201112101120788"></p><p>==这里的转换后面要再品品==</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/101552-854681.png" alt="image-20201112101128691"></p><p>至于$p_l$和$c_l$为什么能提出来，是因为其与$s$无关。这里$p$一定是正的，因为这里是拉格朗日的罚函数</p><ul><li>假如把$p_l$当作是link l 每单位带宽的价格，那么$p^s$就是节点s所有links的总的带宽均价，所以$x_sp^s$代表 s 以一定速率传输时源的带宽成本 , and $B_s(p^s)$ 代表在给定价格$p^s$下可以实现的最大收益我们将在下面看到，该标量$p^s$ summarizes了所有源需要知道的拥塞信息。</li><li>A source $s$ can be induced to solve maximization (3) by bandwidth charging. 【我这里的理解就是，可以通过调节s的charging，也就是调节p，来达到最大化全局奖励】对于每一个$p$，都有一个唯一的最大化器，用表示，因为它是严格凹的。</li><li>通过对偶理论… 因此，我们将专注于解决对偶问题（5）。 一旦我们获得了$p^*$, 原始的最佳源速率就可以通过（3）求解by简单的最大化（见下面的（6））。<strong>要注意的重要一点是，给定单个来源可以独立求解（3），而无需与其他来源进行协调。 从某种意义上说，它是将（3）的个人最优与（1）的社会最优对齐的协调信号</strong>。</li></ul><blockquote><p>对偶问题，最小化对偶问题，就是最大化原始问题的上界</p></blockquote><h2 id="C-Notations-and-Assumptions"><a href="#C-Notations-and-Assumptions" class="headerlink" title="C Notations and Assumptions"></a>C Notations and Assumptions</h2><p>routing matrix $R_{ls}$</p><ul><li>第一段的==induced norm?==</li><li>Kuhn-Tucker theorem 就是KKT条件</li></ul><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li><p>abstract都没怎么看懂…</p></li><li><p>对偶问题，拉格朗日要满组KKT才是强对偶（check</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zbGlkZXBsYXllci5jb20vc2xpZGUvODExMzQxMi8=">这个link<i class="fa fa-external-link-alt"></i></span>是这篇文章的slide link</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNlLnJ1dGdlcnMuZWR1L35tYXJzaWMv">这个老师的博客<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    <summary type="html">
    
      TON&#39;98@墨尔本大学
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Routing" scheme="https://hexi519.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>MRTE</title>
    <link href="https://hexi519.github.io/ExtensiveReading/Route/MRTE/"/>
    <id>https://hexi519.github.io/ExtensiveReading/Route/MRTE/</id>
    <published>2020-11-04T10:53:07.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
    
    <summary type="html">
    
      SIGCOMM&#39;19@Tsinghua
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="Routing" scheme="https://hexi519.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>LearningToRoute</title>
    <link href="https://hexi519.github.io/ExtensiveReading/Route/LearningToRoute/"/>
    <id>https://hexi519.github.io/ExtensiveReading/Route/LearningToRoute/</id>
    <published>2020-11-04T10:36:46.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>传统的问题是</p><ul><li>1</li><li>2</li></ul><blockquote><p>==其实感觉跟CC方面遇到的问题很相似？==</p></blockquote></li><li><p>建模假设</p><ul><li>流量需求的历史情况包含未来的一些信息</li><li>DM存在一定的规律</li></ul></li><li><p>思路是，如果已知DM，自然是可以用LP做全局优化，但是现在未知。另一方面，先预测后做决策的效果太慢了。</p></li></ul><ul><li>这篇文章的文笔很好…写作可以学习（辞藻、结构、连接句 都可，一开始的时候我还没有好好看…）</li></ul><p><u><strong>使用的是TRPO</strong></u></p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    近来，人们已经集中精力关注是否/何时依赖于人类专家的算法洞察力的传统网络协议设计可以被数据驱动（即机器学习）方法代替的问题。 我们在可能是最基本的网络任务：路由的背景下探讨这个问题。 是否可以利用机器学习（ML）的思想和技术来自动生成“良好”的路由配置？ 我们关注域内流量工程的经典设置。 我们注意到，这种情况对数据驱动协议设计提出了重大挑战。 关于数据驱动路由功能的初步结果表明，在这种情况下应用ML（特别是深度强化学习）可产生高性能，并且是进一步研究的有希望的方向。 我们概述了ML导向路由的研究议程（We outline a research agenda for ML-guided routing）。</p><h1 id="1-Introducion"><a href="#1-Introducion" class="headerlink" title="1 Introducion"></a>1 Introducion</h1><h2 id="why-apply-ML-to-routing"><a href="#why-apply-ML-to-routing" class="headerlink" title="why apply ML to routing"></a>why apply ML to routing</h2><p>​    传统上，路由优化以两种方式之一来应对未来交通状况的不确定性：</p><ul><li>针对先前观察到的交通状况优化路由配置，希望这些配置也能与未来相得益彰 ，</li><li>针对各种可行的交通场景进行优化，以期在整个范围内提供高性能[7，10，16，29]。 </li></ul><p>​    缺陷是</p><pre><code>* &lt;u&gt;即使在不太不同的流量条件下，针对特定流量条件进行优化的路由配置也可能惨败，无法获得良好的性能&lt;/u&gt;* &lt;u&gt;此外，在各种考虑的交通场景中优化最坏情况的性能可能会以远离实际交通状况的最佳实现为代价。&lt;/u&gt;</code></pre><p>​    机器学习提出了第三种选择：利用有关过去交通状况的信息来学习针对未来状况的良好路由配置。 尽管决策者事先无法确定确切的未来流量需求，但现实的假设是流量需求的历史记录包含有关未来的一些信息（例如，一天中的流量变化，流量的偏斜度，是否一定的结束时间）  -主机经常通信等）。 因此，一种自然的方法是持续观察流量需求，并根据（隐式或显式）关于未来的预测调整路由。</p><h2 id="intradomain-TE-as-a-case-study"><a href="#intradomain-TE-as-a-case-study" class="headerlink" title="intradomain TE as a case study"></a>intradomain TE as a case study</h2><p>​    我们通过检查域内TE的经典环境[10、15-17、24、29、50]来启动ML引导路由的研究，which是在a single,self-administered 网络中优化路由的方法。 <u>我们将在其他情况下对数据驱动路由的研究留给以后的研究（第7节）。 我们提供了一个基于数据驱动（域内）路由的模型，该模型建立在域内TE [10、15–17、24、29、50]和[多商品[5、7、10、16、22，  29，43]）流程优化</u>。 </p><p>​    我们在这个模型中研究了不同的机器学习范式和机器的应用。 在我们研究ML引导域内TE的过程中，**<u>我们解决了两个主要问题</u>**：</p><ul><li>如何将路由表述为ML问题？  </li><li>在该领域学习的输入和输出是什么合适的表示？ 接下来，我们将探讨这些挑战中的每一个。</li></ul><h3 id="learn-what-future-TE-demands-or-routing-configurations-Supervised-learning-or-RL"><a href="#learn-what-future-TE-demands-or-routing-configurations-Supervised-learning-or-RL" class="headerlink" title="learn what ? future TE demands or routing configurations? Supervised learning or RL?"></a>learn what ? future TE demands or routing configurations? Supervised learning or RL?</h3><p>​    一种基于ML的路由的自然方法如下：观察过去的流量需求，应用ML明确预测即将到来的流量需求，并根据预测的需求优化路由。 用机器学习的术语来说，这是一个监督学习任务[39]。</p><p>​    我们评估了几种监督学习方案，以预测交通需求。 我们的初步结果令人沮丧，这表明<u>如果交通状况不具有很高的规律性，监督学习可能会无效</u>。 接下来，我们将注意力转向另一种方法：强化学习[45]。 现在，与其明确地了解未来的流量需求并针对这些需求进行优化，不如从观察到的流量需求历史到路由配置中学习一个良好的映射。 我们的初步结果表明，这种方法更有希望，但要意识到这一点需要谨慎，如下所述。</p><h3 id="What-should-the-output-of-the-learning-scheme-be"><a href="#What-should-the-output-of-the-learning-scheme-be" class="headerlink" title="What should the output of the learning scheme be?"></a>What should the output of the learning scheme be?</h3><p>​    域内路由上下文对强化学习的应用提出了重大挑战。 一个关键挑战是路由方案的自然“输出”是一组规则的集合，这些规则指定如何将流量从每个源转发到每个目的地。 此输出的幼稚表示形式涉及大量参数（与之相对，例如，从相当小的集合中选择单个动作[32，33]）。我们的初步结果表明，这会使学习缓慢而无效。 因此，我们设计了一些方法来限制输出的大小，而又不会在路由选择的复杂性上“损失太多”。 我们利用有关逐跳流量工程的文献[16、35、50]的思想，通过深度强化学习有效地学习良好的路由配置。 我们的初步发现表明，这是改善当今域内TE的有希望的方向。</p><h3 id="Outlining-a-research-agenda-for-data-driven-routing"><a href="#Outlining-a-research-agenda-for-data-driven-routing" class="headerlink" title="Outlining a research agenda for data-driven routing"></a>Outlining a research agenda for data-driven routing</h3><p>我们相信下面的investigation仅仅只是在数据驱动路由领域隔靴搔痒。 我们给读者留下了许多有趣的研究问题，包括</p><ul><li>将我们的方法扩展到其他路由环境</li><li>检查其他性能指标</li><li>识别更好的监督学习方法以进行流量需求估算</li><li>扩展 在这种情况下以及其他情况下的强化学习</li></ul><p>我们将在第7节中讨论此研究议程。</p><h1 id="2-Data-driven-routing-model"><a href="#2-Data-driven-routing-model" class="headerlink" title="2 Data-driven routing model"></a>2 Data-driven routing model</h1><p>​    在我们的框架中，决策者（网络运营商/自动化系统）反复选择路由配置。 流量条件各不相同，并且路由决策不会影响未来的流量需求。 我们的重点是将流量工程literature中的链接的over-utilization最小化（也称为最小化拥塞）的常规优化目标[7，10，16，29]。</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><blockquote><p>我们将网络建模为a capacitated directed graph G =（V，E，c），其中V和E分别是顶点和边集，而c：E→R +为每个边分配一个容量。 令n表示V中的顶点数，而Γ（v）表示G中顶点v的相邻顶点。</p></blockquote><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><blockquote><p>该网络的路由策略R为每个源顶点s和目标顶点 t 指定了遍历v的从s到t的流量如何在v的邻居之间分配。 因此，路由策略为每个顶点v和源－目的地对（s，t）指定了一个介于v的邻居到值[0，1]，Rv，（s，t）的映射：Γ（v  ）→[0，1]，因此Rv，（s，t）（u）是从s到t穿越v且v转发到其邻居u的流量的一部分。 我们要求对于每个s，t∈V和v，t，Pu∈Γ（v）Rv，（s，t）（u）= 1（在非目标位置没有流量被Blackholed），并且对于每个 s，t∈V，u∈Γ（v）Rt，（s，t）（u）= 0（到目的地的所有流量都在该目的地吸收）。</p></blockquote><h2 id="Induced-flows-of-traffic"><a href="#Induced-flows-of-traffic" class="headerlink" title="Induced flows of traffic"></a>Induced flows of traffic</h2><blockquote><p>需求矩阵（DM）D是一个n×n矩阵，其第（i，j）个条目Di，j指定了源i和目的地j之间的流量需求。 观察到任何需求矩阵D和路由策略R都会引起网络中的流量流，如下所述。 从每个来源s到目的地t的流量都根据Rs（s，t）在s的邻居之间分配。 同样，从s到t的流量经过s的邻居v会根据Rv，（s，t）等在v的邻居之间分配。</p></blockquote><h2 id="How-good-is-a-traffic-flow"><a href="#How-good-is-a-traffic-flow" class="headerlink" title="How good is a traffic flow"></a>How good is a traffic flow</h2><blockquote><p>我们采用了最小化链接（过度）使用率的经典目标函数[7，10，16，29]。 特定多商品流f下的链路利用率为maxe∈Ec（e），<strong>其中fe是流f下横穿edge e的流的总量</strong>。 我们的公式很容易扩展到其他基于多商品流的目标函数。 我们将其他目标（例如，流完成时间，延迟）的评估留给以后的研究（第7节）。</p></blockquote><p>hesy: 这里的居然不是所有流经过该链路的总流量,而是某个流 f 经过该链路的流量。【注意跟别的文章的区分，也许别的文章就是在讲这个】</p><p>我们指出，对于任何给定的需求矩阵，可以通过线性编程[7，16，22]以一种计算有效的方式来执行使链路利用率最小的多商品流f的计算。 <strong>相反，我们的重点是在实际情况下事先不知道DM。</strong></p><h3 id="Routing-future-traffic-demands"><a href="#Routing-future-traffic-demands" class="headerlink" title="Routing future traffic demands"></a>Routing future traffic demands</h3><p>​    时间分为连续的间隔，称为“时期”，其长度为<u><strong>δt（δt由网络运营商确定</strong></u>）。 在每个时期t的开始，确定该时期的路由策略R（t）。  R（t）只能取决于过去的流量模式和路由策略的历史记录（从时期1，…，t-1）。 </p><p>​    我们做出两个简化的假设：</p><ul><li>需求矩阵在每个时间段都是固定的；==这个假设没有很懂==</li><li>事后可以推断出需求矩阵（例如，通过网络测量）。</li></ul><p>​    我们将对数据驱动路由的研究放在更复杂的流量模式下（例如，IP流在每个时期内进出），以及对信息约束的路由决策（例如，仅关于过去流量需求的部分信息）的研究。</p><p>​    在选择了针对时间段t的路由策略R（t）之后，针对时间段t的需求矩阵以及相关的成本就最大的链路利用而言被揭示出来。 决策者的目标是选择一种路由策略，其方式应始终导致较低的链路过度使用率。</p><h1 id="3-What-to-learn"><a href="#3-What-to-learn" class="headerlink" title="3 What to learn"></a>3 What to learn</h1><p>我们的基本假设是DM中存在某种规律性，下面的研究目的是探索如何推断出这种规律性并利用它们来优化路由。 <strong>我们考虑两种不同的规律性表现形式：将确定性规律性嵌入DM序列中，并从固定的概率分布中抽取DM。还有两种高级学习方法：监督学习和强化学习</strong>。</p><h2 id="3-1-Supervised-Learning-Approach"><a href="#3-1-Supervised-Learning-Approach" class="headerlink" title="3.1 Supervised Learning Approach"></a>3.1 Supervised Learning Approach</h2><blockquote><p>由于对于给定的需求矩阵（DM），最佳路由策略是可有效计算的，因此自然的方法是反复尝试预测（即学习）下一个DM，然后为该DM计算最佳路由策略。 用机器学习术语来说，这是一个监督学习问题。</p></blockquote><h3 id="什么是监督学习"><a href="#什么是监督学习" class="headerlink" title="什么是监督学习"></a>什么是监督学习</h3><h3 id="如何生成DM"><a href="#如何生成DM" class="headerlink" title="如何生成DM"></a>如何生成DM</h3><ul><li>gravity model [40] &amp; bimodal model[34]</li><li>sparsification of gravity/bimodal DMs</li></ul><blockquote><p>我们考虑生成DM的两种标准方案：（确定性）引力模型[40]和（概率性）双峰模型[34]。 直观地，前者捕获了端点之间的通信与它们的输出带宽成比例的场景，而后者捕获了通信端点被分为小流量（小鼠）和大流量（大象）的场景。 <a href="">****</a></p><p>我们还考虑了重力/双峰DM的“稀疏化”，它是通过随机地均匀选择通信对的p分数（对于p∈[0，1]）并消除所有其他交通需求而产生的 对考虑。 我们将p称为DM的稀疏性。 我们的实验需要生成DM序列，为每个时间段指定一个DM。 </p></blockquote><p>我们检查了两类DM序列：</p><h4 id="Class-I"><a href="#Class-I" class="headerlink" title="Class I"></a>Class I</h4><p>DM sequences in which the next DM is deterministically derived from past DMs.</p><p>DM是有周期性规律的，我们评估了周期为q的DM cycles，which q=5，10，15，20，其中每个DM是前q=5，10，15，20个DM的均值。且DM为稀疏的。</p><blockquote><p>这里还给了一个例子，which证明了流量模式具有temporal consistencies</p></blockquote><h4 id="Class-Ⅱ"><a href="#Class-Ⅱ" class="headerlink" title="Class Ⅱ"></a>Class Ⅱ</h4><p>DM sequences in which each DM is independent of the previous DMs. </p><p>现在，与每个DM上的固定概率分布（即稀疏重力/双峰DM）无关地绘制每个时期的DM。 <u>我们指出，这种流量模式通常用于评估数据中心的体系结构和协议[4、19、25、51]，</u><strong>因为数据中心的流量通常被认为是高度偏斜且不可预测的[18、20]。</strong>    </p><h3 id="监督学习方法"><a href="#监督学习方法" class="headerlink" title="监督学习方法"></a>监督学习方法</h3><p>评估了3种不同的DNN体系结构。 这三种架构的输入都是最近观察到的k个DM，而输出则是DM。 我们检查k的不同值（5、10和20）。 我们使用Frobenius（或l2）范数[21]来量化相对于实际DM的输出质量。 三种体系结构的不同之处在于，神经网络的结构将输入层（代表DM的k长历史记录）和输出层（代表下一个DM）相互连接。 我们评估</p><ul><li>FCN，一个三层全连接网络</li><li>CNN，一个四层卷积神经网络[30]</li><li>NAR-NN，一个非线性自回归模型[11] 通过四层神经网络实现，对于输入需求矩阵D(1),…, D(k)学习k矢量α＝（α1，…，αk）和n×n矩阵β，并输出<img src="https://images.weserv.nl/?url=C:%5CUsers%5Chesy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201104154216675.png" alt="image-20201104154216675">。</li></ul><h3 id="evaluation-framework"><a href="#evaluation-framework" class="headerlink" title="evaluation framework"></a>evaluation framework</h3><p>​    在稀疏度p = 0.3、0.6、0.9、1和每个顶点传出带宽的值（从10 MB到10 GB）变化的情况下，我们选取了(9×9, 12×12, 23×23, 30×30, 50 × 50, and 100 × 100) size的模型。</p><p>​    我们考虑了各种DM序列长度来训练和测试模型（从DM的10到100的范围）。 对于为q，p，k和序列长度分配参数的每个选择，我们都会生成10个DM序列的训练集和3个DM序列的测试集。 我们将学习epoch定义为训练集的完整遍历。 我们为每个神经网络训练<strong>2000个学习epoch</strong>。</p><h3 id="results"><a href="#results" class="headerlink" title="results"></a>results</h3><p>​    我们的实验结果（针对测试的DM序列）表明，对于表现出确定性的DM序列（即DM和“平均DM”的周期），仅NAR-NN的性能相当好，并且仅针对所检查历史之间的特定关系 （k），周期的大小/ DM的平均值超过（q）。 具体而言，当q≤k时，NAR-NN对DM的周期很好地逼近下一个DM，并且在平均DM上表现良好。 当q&gt; k时，NAR-NN在平均DM上继续表现良好，但在q&gt; k的DM周期中失败。 对于随机生成的DM，所有3种架构都无法近似下一个DM（这并不奇怪，因为序列中DM之间没有时间相关性）。 我们在具有30个顶点的网络G上显示NAR-NN的代表性结果。 我们根据预测的DM与实际DM的距离（y轴）绘制学习历元（x轴）上的损失。 图1b和图1a表明，使用平均和循环DM序列生成时，该模型成功学习了下一个DM。 图1c展示了从概率分布中得出的学习下一个DM的失败。 我们将继续研究在未来对交通需求进行更好的监督学习是否可行（请参见第7节）。<br>   3.2</p><p>16:40开始读阿里的</p><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><h2 id="to-be-summarized"><a href="#to-be-summarized" class="headerlink" title="to be summarized"></a>to be summarized</h2><h3 id="辞藻"><a href="#辞藻" class="headerlink" title="辞藻"></a>辞藻</h3><p>Unfortunately 是另一个能很好的表达转折意味的副词</p><p>a rich body of 丰富的 （ a rich body of literature/researches )</p><p>a bunch of </p><p>render 造成 –&gt; make</p><p>devise  发明，想出，设计  design</p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><ul><li><p>勾画出来的文献要整理一下 </p></li><li><p>==有实验数据或者论文支撑么==</p><blockquote><p>intro: 我们评估了几种监督学习方案，以预测交通需求。 我们的初步结果令人沮丧，这表明<u>如果交通状况不具有很高的规律性，监督学习可能会无效</u></p></blockquote></li><li><p>文中标红的再看一下</p></li><li><p>第三章节的建模里面： 三种体系结构的不同之处在于，神经网络的结构将输入层（代表DM的k长历史记录）和输出层（代表下一个DM）相互连接。？？？</p></li><li><p>TRPO是15年的论文，DDPG是16年的，为什么17年投的这篇Hotnets应该做的时候两个算法都有，且DDPG更为state-of-art，想请问下采用DDPG</p></li></ul>]]></content>
    
    <summary type="html">
    
      HotNets&#39;17@Hebrew University of Jerusalem
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="Routing" scheme="https://hexi519.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>paperWriting</title>
    <link href="https://hexi519.github.io/Summary/paperWriting/"/>
    <id>https://hexi519.github.io/Summary/paperWriting/</id>
    <published>2020-10-26T19:02:43.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4d1623528c7a47c5fc34f8a69e4c2cd762849291765d20620f0830d39897dc47"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Paper Writing pattern
    
    </summary>
    
    
      <category term="Summary" scheme="https://hexi519.github.io/categories/Summary/"/>
    
    
      <category term="Writing" scheme="https://hexi519.github.io/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzy Kanerva-based TCP Q-learning</title>
    <link href="https://hexi519.github.io/ExtensiveReading/CC/FuzzyKanerva-basedTCPQ-learning/"/>
    <id>https://hexi519.github.io/ExtensiveReading/CC/FuzzyKanerva-basedTCPQ-learning/</id>
    <published>2020-10-25T16:13:55.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Hesy-summary"><a href="#Hesy-summary" class="headerlink" title="Hesy summary"></a>Hesy summary</h1><p>主要用于梳理下行文思路，用于写作学习。abstraction,design,performance都很出彩</p><ul><li><p><a href="#abstract">abstract</a>的三段论值得学习</p></li><li><p>introduction的逻辑应该是 <code>我们提出了XXXX，能克服前人工作的xx缺点</code> 而不是<code>前人工作有xx缺点，为此我们提出了XXXX</code></p></li><li><p>related work里面的抨击值得摘抄！</p></li><li><p>design的逻辑很好！</p><ul><li>整体的运行架构是什么 （ 如何将Q-learning算法结合我们的场景进行运行</li><li>RL的几个要素分别是什么 （ 如何结合Q-learning算法和我们的问题进行芥末</li><li>实现上遇到的challenge 以及我们的解决方案 , which is another 华彩</li></ul></li><li><p><a href="#Performance">performance</a>的逻辑和布局也学习到了！</p><ul><li>实验设置</li><li>整体在xx 和 yy 方面的提升 &amp;  为何会出现这样情况的分析</li><li>在xx方面的结果 翔实的展示； 在yy方面的结果 翔实的展示</li></ul></li><li><p>小细节</p><ul><li>自己拼接造出的单词 ，dash别忘了<ul><li>sub-component</li><li>pre-configured</li><li>re-think</li></ul></li></ul></li></ul><a id="more"></a><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><ul><li><p>【<strong>Background: important things and urgent need</strong>】 </p><p>Advances in YY technology have resulted in <strong>pervasive deployment</strong> of devices of … . <strong>The need</strong> for <strong>XX</strong> that ….( 描述下对XX的性能期待, e.g. 高吞吐,低延迟 )  <strong>necessitate re-thinking</strong> of conventional design of （你要研究的领域/东西）.</p><blockquote><p>无线技术的进步已导致在尺寸，存储和计算能力方面具有高度可变性的设备的普遍部署(pervasive deployment)。 为了保持以高可靠性传送数据的连续连接，需要重新考虑传统的传输层协议设计。</p></blockquote></li></ul><ul><li><p>【<strong>What we propose and what’s its features</strong>】</p><p><strong>This paper investigates</strong> the use of  <strong>ZZ ** （你使用的算法/技巧/工具） in **YY</strong>（你研究的领域）… , <strong>wherein</strong> …（描述下你做了什么）. <strong>Furthermore</strong>, it demonstrates how …(具体描述下研究工作中华彩的细节，套路大概就是”我发现了xx(性能瓶颈)在实现的时候很关键，我们是这样解决的”)</p><blockquote><p>本文研究了在拥塞避免状态期间Q学习在TCP cwnd adaptation中的使用，其中窗口的经典alternation已被replaced，从而允许协议立即响应先前看到的网络条件。此外，它展现了内存如何在构建探索空间中发挥关键作用，并提出了通过函数逼近来减少此开销的方法。[ 后面这句话实际上不是一个addtional point，还是在讲这个scheme本身，只不过是scheme的细节，which 是自己的巧思体现之处。] </p></blockquote></li></ul><ul><li><p>【<strong>Performance description</strong>】</p><p><strong>The superior performance</strong> of <u>our</u> approach over <em>Baseline XX</em> is <strong>demonstrated through a comprehensive simulation study</strong>, <strong>revealing</strong> xx% and xx% improvement in <em>metric1</em> and <em>metric2</em> respectively,on real-world(classic) traces/topologies. <strong>We also show</strong> <strong>how</strong> <strong>ZZ **（你使用的算法/技巧/工具） **can be used to</strong> (处理上一段所说的性能瓶颈，while 保持了一个好的performance( 高吞吐/低延迟,这个还是要细点说的) ) .</p><ul><li>这里our换成别个描述characteristic的形容词更好，e.g. learning-based/data-driven</li></ul><blockquote><p>通过全面的仿真研究证明了基于学习的方法优于TCP New Reno的性能，对于评估的拓扑，吞吐量和延迟分别提高了33.8％和12.1％。 我们还展示了如何使用函数逼近来显着降低基于学习的协议的内存需求，同时保持相同的吞吐量和延迟。</p></blockquote></li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><p>快到1页</p><p>==这里的表达不应该是“以往的工作有xx缺点，为改进此缺点我们提出…”，而应该是“以往的工作有xx缺点。我们提出了基于xx技术的XX。它的表现…and… ”==</p><h1 id="2-motivation-and-practical-relevance"><a href="#2-motivation-and-practical-relevance" class="headerlink" title="2 motivation and practical relevance"></a>2 motivation and practical relevance</h1><p>快到1页</p><h1 id="3-related-work"><a href="#3-related-work" class="headerlink" title="3 ==related work=="></a>3 ==related work==</h1><blockquote><p>这一段写的贼好，要好好学习！</p></blockquote><p>一栏</p><ul><li><p>传统CC的问题</p></li><li><p>现在CC的问题</p></li><li><p>其他CC相关的工作</p><blockquote><p>应用机器学习来帮助提高TCP性能的其他工作很少。 例如，[13]使用机器学习来构建损耗分类器，以区分链路损耗和拥塞损耗，[14]和[15]使用机器学习来更好地估计RTT和吞吐量。 这些技术都不能直接调整cwnd。</p></blockquote></li></ul><h1 id="4-Q-learning-based-TCP"><a href="#4-Q-learning-based-TCP" class="headerlink" title="4 Q-learning-based TCP"></a>4 Q-learning-based TCP</h1><blockquote><p>整体</p></blockquote><p>​    我们提出的算法TCPLearning是基于强化学习的协议。 在强化学习中，学习主体在没有先验知识的情况下与环境交互，根据所学习的策略选择动作，获得正面或负面的奖励，然后观察环境的下一个状态。学习代理的目标是制定一种策略，即状态空间到动作空间的映射，以最大化长期打折的奖励。 此后，TCPLearning不再想PCC那样使用probe来检测不同动作对性能的影响，而是使用增强算法Q-Learning来学习最佳策略，以根据经验直接在每个状态下做出动作选择。<br>   TCPLearning发送方使用New Reno协议的正常慢启动阶段。 如果慢启动在cwnd超过阈值时结束，则拥塞控制过程将进入拥塞避免阶段，我们的学习算法将接管控制cwnd。 如果由于观察到拥塞而导致慢速启动结束，则New Reno协议继续，并且不使用学习算法。 如果在拥塞避免阶段检测到数据包丢失，则学习算法将停止，并且将应用New Reno协议来实现快速重传和快速恢复。<br>   <strong>与在New Reno中一样，TCPLearning的最重要任务是调整cwnd的大小。 在每个时间段（通常是一个RTT）中，我们的算法通过处理ACK信息来收集吞吐量和RTT值，然后将它们组合成单个效用函数U。效用函数随着吞吐量的增加和延迟的减少而增加。 该算法的目标是了解cwnd大小的变化如何增加效用函数的值。<br>   学习算法使用Q学习来学习策略以选择动作并实现其目标。Q学习使用简单的值迭代更新过程。 在时间t处，对于每个状态st和at处的每个动作，算法按如下方式计算对其预期折现奖励或动作值函数Q（st，at）的更新：</strong></p><p>​    其中rt + 1是时间t +1的即时奖励，αt（st，at）是折现因子，使得0≤γ&lt;1。Q学习是学习率，使得0≤αt（st，at）≤  1和γ将Q（st，at）值存储在称为Q表的表中。 更新Q（st，at）值的时间复杂度为O（| A |），其中| A | 是动作数。</p><hr><blockquote><p>状态</p></blockquote><p>​    系统的状态由四个状态变量表示，<u>状态变量的值通过离散化划分</u>：</p><p>   •新接收到的ACK之间的间隔时间的移动平均值，离散为10个间隔。<br>   •发送方发送的数据包之间的间隔时间的移动平均值，离散为10个间隔。<br>   •当前的RTT与到目前为止找到的最佳RTT之比，离散为10个间隔。<br>   •缓慢启动阈值，离散为10个间隔。</p><hr><blockquote><p>动作</p></blockquote><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/25/210337-366485.png" alt="image-20201025210336629"></p><p>​    表II总结了更改cwnd的可用操作。 </p><p>​    奖励函数基于效用值的变化：</p><p>​                U = loge（吞吐量）-δ×loge（延迟）吞吐量</p><p>​    其中δ表示延迟相对于效用函数的相对重要性。 在我们的实验中，δ设置为1。</p><p>​    奖励函数等于：</p><ul><li>+2，如果效用在时间段t之后增加</li><li>-2，如果效用在时间段t之后减少。    </li></ul><p>​    其中t设置为0.1s（在我们的实验中为一个RTT）</p><h1 id="5-FUZZY-KANERVA-BASED-TCP-Q-LEARNING"><a href="#5-FUZZY-KANERVA-BASED-TCP-Q-LEARNING" class="headerlink" title="5  FUZZY KANERVA-BASED TCP Q-LEARNING"></a>5  FUZZY KANERVA-BASED TCP Q-LEARNING</h1><blockquote><p>先讲总体的思路，再讲细节的设计</p></blockquote><blockquote><p>==对应于我就是先讲总体的流程，然后再讲 1. lstm的设计  2. attention的设计（不仅能提高观察，还能提高性能 !  理由，在平缓的时候关注点能平坦,,, 在剧烈变化的时候关注点能聚焦… –&gt; 需要做个对比试验，此外，关于理由还是要再想清楚点.. ）==</p></blockquote><ul><li><p>function approximator的重要性</p><ul><li><p>现有的一些方法，以及他们存在的一些问题</p></li><li><p>我们使用的Kanerva编码的原理和formulation，以及如何融入我们这个框架里面的 【创新和修改部分】</p><blockquote><p>请注意，这里阐述细节并不是为了讲算法原理，而是要讲清楚如何讲算法应用到我们这里面来的</p></blockquote></li><li><p>给出伪代码</p></li><li><p>描述伪代码的流程 ( lines xx-xx ) ，这里还分析了下代码的时空复杂度</p></li></ul></li></ul><h1 id="6-Performance-Evaluation"><a href="#6-Performance-Evaluation" class="headerlink" title="6 Performance Evaluation "></a>6 Performance Evaluation <h2 id="Performance"></h2></h1><ul><li>实验设置<ul><li>评估了三个方法，baseline是New Reno</li><li>单源拓扑上测试了性能，哑铃状拓扑测试了公平性，每个算跑8次</li><li>链路设置：RTT为100ms；每800s在7.5Mbps和2.5Mbps之间切换；缓冲区大小为BDP，which is 50个数据包</li><li>每个算法跑了8次</li></ul></li></ul><blockquote><p>我们使用基于ns-3的数据包级仿真，通过与TCP New Reno进行比较，来评估在不同带宽条件下TCPLearning，CMAC和Fuzzy TCPLearning的性能。 我们从图1（a）所示的单瓶颈网络开始，然后将评估范围扩展到图1（b）所示的更复杂的多流网络，以进行与公平相关的研究。 我们使用这些拓扑来演示受控环境中学习的特征，并显示对吞吐量和延迟的影响。 瓶颈带宽（在路由器-接收器链路上）每800s交替在7.5Mbps和2.5Mbps之间切换。 网络RTT设置为100ms，缓冲区大小设置为BDP，在我们的仿真中为50个数据包。 我们使用每种算法进行8个实验，并报告平均吞吐量和延迟。 值的标准偏差使用误差线显示。<br>   一种。</p></blockquote><blockquote><p>We use ns-3 based packet level simulations to evaluate the performance of TCPLearning, CMAC and Fuzzy TCPLearning in varying bandwidth conditions by comparing with TCP New Reno. We begin with a single-bottleneck network shown in Fig. 1(a) and later extend the evaluation to a more complex multi-flow network shown in Fig. 1(b) for fairness-related studies. We use these topologies to demonstrate the characteristic features of learning in controlled environments and show the impact on throughput and delay. The bottleneck bandwidth (on the router-receiver link) switches alternately between 7.5Mbps and 2.5Mbps every 800s. The network RTT is set to 100ms and the buffer size is set to BDP, which is 50 packets in our simulation. We conduct 8 experiments using each algorithm and report the average throughput and delay. The standard deviation of values is shown using error bars.</p></blockquote><h2 id="A-TCP-Learning-without-Function-Approximation"><a href="#A-TCP-Learning-without-Function-Approximation" class="headerlink" title="A. TCP-Learning without Function Approximation"></a>A. TCP-Learning without Function Approximation</h2><p>在这种情况下，我们禁用函数逼近并设置探索率？ 对于TCPLearning到0.1。 初始学习率α设置为0.3，并且每隔10s降低0.995倍。 总仿真时间设置为<u>6400s</u>。</p><hr><ul><li><p>平均吞吐量和延迟： 【是一个总体的视图】</p><ul><li><p><strong>陈述了</strong>不同带宽情况下，算法和baseline之间的吞吐量情况差距</p><blockquote><p>​    <strong>图2（a）</strong>比较了TCP New Reno和TCPLearning在瓶颈带宽每800s介于7.5Mbps和2.5Mbps之间切换时获得的<strong>平均吞吐量</strong>。 结果表明，随着瓶颈带宽的波动，TCPLearning的性能明显优于TCP New Reno。 我们观察到，在7.5Mbps的瓶颈带宽下，TCPLearning的平均吞吐量为6.72Mbps，而TCP New Reno的平均吞吐量为4.46Mbps。 在瓶颈带宽为2.5Mbps的情况下，TCPLearning的平均吞吐量为2.27Mbps，而TCP New Reno的平均吞吐量为2.26Mbps。 我们注意到，由于默认缓冲区大小在100ms的网络RTT和2.5Mbps的瓶颈带宽下是最佳的，因此TCP New Reno充分利用了该缓冲区，并且TCPLearning获得了同样好的性能。</p><p>​    <strong>图2（b）</strong>比较了在相同网络设置下TCP New Reno和TCPLearning实现的<strong>平均RTT</strong>。 结果表明，在瓶颈带宽为7.5Mbps时，TCPLearning的平均RTT为111ms，而TCP New Reno的平均RTT为109ms。 在瓶颈带宽为2.5Mbps时，TCPLearning的平均RTT为114ms，而TCP New Reno的平均RTT为154ms。 在任何瓶颈带宽下，TCPLearning在平均吞吐量方面都优于TCP New Reno。 图2（a）表明，在这种高带宽波动的网络中，TCPLearning将平均吞吐量提高了33.8％。 当考虑图2（b）所示的延迟时，尽管TCPLearning的性能稍差一些，但在这种情况下，在2.5Mbps的瓶颈带宽下性能下降了1.8％，在7.5Mbps的瓶颈带宽下，其性能优于TCP New Reno 26％。 平均而言，TCPLearning可将延迟减少12.1％。</p></blockquote></li><li><p>开始<strong>分析解释</strong>为啥人家会差【我觉得这一段批评classic的，我可以学习下】，我们会好</p><p>请注意，<strong>要用图片来佐证你的分析</strong></p><blockquote><p>​    我们观察到，TCP New Reno的平均吞吐量为4.46Mbps，远小于瓶颈带宽7.5Mbps。 这是因为TCP New Reno的预定义的拥塞避免算法使cwnd超出了连接所能支持的范围，最终使网络拥塞，最终导致cwnd和吞吐量显着下降。 <u>更糟糕的是，由于TCP New Reno算法无法存储过去的操作以及这些操作对性能的影响，因此它会重复相同的行为。 图3显示了在模拟TCP New Reno期间cwnd的大小与时间的关系。 该图表明，该算法反复做出相同的错误决策，从而降低了性能。</u><br>   另外，TCP new Reno在cwnd每次<u>显着下降之后需要花费大量时间来恢复</u>，因为它必须在避免拥塞阶段线性增加cwnd。 但是，TCPLearning通过学习经验来克服了这一缺陷。 图3还显示了在TCPLearning仿真期间，cwnd的大小与时间的关系。 该图显示，随着学习过程的进行，TCPLearning进行了各种实验，这些实验会修改cwnd直到110s。  110s之后，学习到的动作值函数Q（s，a）收敛到最佳动作值函数Q ∗（s，a）。这时，TCPLearning找到一个最佳动作，该动作充分利用了缓冲区并且不会触发任何动作 数据包丢失。 这种习得的动作使cwnd足够大，可以达到良好的性能，但是比发生包丢失的上限稍小。 通过这种最佳操作获得的高吞吐量将保持稳定，直到800s之后，瓶颈带宽才会切换。</p></blockquote></li></ul></li></ul><hr><blockquote><p>讲完整体视图/情况  以及 为什么会这样 之后，开始讲实时的指标 ( 细化 )</p></blockquote><ul><li><p>实时吞吐量 【还是踩了别人一脚，分析也比较少了</p><blockquote><p>​    图4显示了TCP New Reno和TCPLearning的实时吞吐量，其中每800s的高带宽在7.5Mbps和2.5Mbps之间切换。 该图显示，当瓶颈带宽为7.5Mbps（在最初的800秒钟内）时，TCP New Reno会经历重复的数据包丢失，从而导致平均吞吐量较低且不稳定。 当瓶颈带宽切换到一个较小的值（800s后为2.5Mbps）时，TCP New Reno会充分利用缓冲区并获得高而稳定的吞吐量。 我们观察到，在使用TCP New Reno时，那些具有高瓶颈带宽的方案会有效并严重降低吞吐量。 但是，波动的瓶颈带宽对TCPLearning实现的吞吐量影响很小。 如图4所示，TCPLearning用110s来学习7.5Mbps瓶颈带宽时的最佳策略，并保持高而稳定的吞吐量，直到800s。 当瓶颈带宽在800s之后切换到2.5Mbps时，TCPLearning会非常迅速地收敛，并且仍然可以实现稳定的吞吐量，直到瓶颈带宽再次切换为止。</p></blockquote></li><li><p>实时RTT 【</p><blockquote><p>图5显示了在上述相同带宽切换情况下TCP New Reno和TCPLeaning的实时RTT。 我们发现，在瓶颈带宽波动的情况下，TCPLearning比TCP New Reno实现了更稳定和更低的RTT。</p></blockquote></li></ul><h2 id="B-TCPLearning-with-Function-Approximation-We"><a href="#B-TCPLearning-with-Function-Approximation-We" class="headerlink" title="B. TCPLearning with Function Approximation We"></a>B. TCPLearning with Function Approximation We</h2><blockquote><p>我们通过将CMAC算法和Fuzzy TCPLearning算法应用于图1（a）所示的相同网络拓扑来评估其性能。  CMAC算法将状态动作空间划分为一组不同的图块，并创建多个图块以在学习中提供粗粒度和细粒度的概括。 在我们的实验中，我们使用5个切片，每个切片有3,125个切片，因为我们有5个可能的操作和4个状态变量，每个变量均等地划分为5个间隔。 要学习动作值，我们需要存储15625个θ值，这些值等于每个平铺3125个图块乘以5个平铺。 由于每个平铺都有大的平铺，因此需要较少的内存来存储所有θ值。  Fuzzy TCPLearning算法将函数逼近与连续的隶属度等级结合使用，以控制并显着减少存储学习值（对于TCPLearning而言是Q表）所需的内存量，同时保持性能。<br>   为了进行实验，我们首先随机生成一组100个原型，然后初始化相应的θ值。 然后，使用等式2通过Q学习过程更新每个原型的θi值。</p></blockquote><ul><li><p><strong>平均吞吐量和延迟</strong></p><blockquote><p>图2还比较了CMAC和Fuzzy TCPLearning在两个交替的瓶颈带宽下获得的平均吞吐量和延迟。我们观察到，在两个不同的瓶颈带宽上，CMAC和Fuzzy TCPLearning在吞吐量和延迟方面都优于TCP New Reno。我们注意到，当瓶颈带宽为7.5Mbps时，与TCPLearning相比，CMAC和Fuzzy TCPLearning的吞吐量都有轻微下降。 当瓶颈带宽为2.5Mbps时，可以观察到几乎相同的吞吐量。 此外，就两个瓶颈带宽的延迟而言，CMAC和Fuzzy TCPLearning的性能均比New Reno更好，而性能比TCPLearning差。 我们得出结论，就吞吐量和延迟而言，平均而言，TCPLearning表现最佳。 但是，利用功能逼近技术，CMAC和模糊TCPLearning可以显着减少内存使用，同时实现可比的性能。</p></blockquote></li><li><p><strong>减少内存使用的影响</strong></p><blockquote><p>TCPLearning算法分配内存以存储可能遇到的50,000个状态操作对中的每对。 由于4个字节用于存储与一个状态操作对相对应的Q值，因此TCPLearning使用200KB的内存存储。 相反，CMAC算法仅需要存储θ值，该值可能远小于状态动作对的数量。 我们的实验中使用的θ值总数为15,625，最终的内存使用量为62.5KB，不到TCPLearning使用的内存的1/3。 模糊TCPLearning算法为100个状态-动作对分配存储。 由于需要20个字节来存储一个状态-动作对，另外400个字节用于存储100个原型的θ值，因此它仅使用2.4KB内存，因此非常适合物联网应用。</p></blockquote></li></ul><h2 id="C-Fairness-Observations"><a href="#C-Fairness-Observations" class="headerlink" title="C. Fairness Observations"></a>C. Fairness Observations</h2><p>​    我们通过评估图1（b）所示的哑铃网络拓扑中的性能来评估TCPLearning算法的公平性。 该拓扑包括<u>2个发送器和2个接收器，它们在100ms RTT时共享2.5Mbps的瓶颈带宽。 瓶颈路由器缓冲区大小设置为100个数据包</u>。 两个流中的数据传输同时开始。 表III显示了TCP New Reno和TCPLearning的两个竞争流的平均吞吐量。 我们观察到，使用TCP New Reno和TCPLearning两种流的平均吞吐量几乎相同，因此在the那教的公平性指数中得分均相等。</p>]]></content>
    
    <summary type="html">
    
      DCOSS&#39;16
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="Congestion Control" scheme="https://hexi519.github.io/tags/Congestion-Control/"/>
    
  </entry>
  
  <entry>
    <title>QTCP, Adaptive Congestion Control with Reinforcement Learning</title>
    <link href="https://hexi519.github.io/ExtensiveReading/CC/Q-TCP/"/>
    <id>https://hexi519.github.io/ExtensiveReading/CC/Q-TCP/</id>
    <published>2020-10-25T15:57:22.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    下一代网络访问技术和Internet应用程序增加了向具有传统拥塞控制协议的用户提供令人满意的体验质量的挑战。 在广泛的网络场景下，通过根据特定的网络体系结构或应用程序修改核心拥塞控制方法来优化TCP性能的努力并未得到很好的推广。 这种限制源于基于规则的设计原理，其中，性能与网络的观察状态到相应操作之间的预定映射有关。 因此，这些协议无法适应其在新环境中的行为，也无法从经验中学习以获得更好的性能。 我们通过在我们称为QTCP的方法中将基于增强的Q学习框架与TCP设计集成在一起来解决此问题。  QTCP使发送者能够以在线方式逐渐了解最佳拥塞控制策略。  QTCP不需要硬编码的规则，因此可以推广到各种不同的联网方案。 此外，我们开发了一种广义的Kanerva编码函数逼近算法，该算法降低了值函数的计算复杂度和状态空间的可搜索大小。 我们展示了QTCP在保持低传输延迟的同时，提供了59.5％的更高吞吐量，从而胜过了传统的基于规则的TCP。</p><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li>这篇由于篇幅够长，所以逻辑上的展开比DCOSS’16的那一篇要好不少，尤其是还有不少[好词好句好图](#good sentense &amp; good pics)值得学习(introduction的论述也可以摘抄)</li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1. introduction"></a>1. introduction</h1><ul><li><p>这段抨击rule-based CC特别值得学习</p><ul><li><p>指出classical CC的特征rule-based 并解释 rule-based的具体体现是什么</p><p>This limitation stems from the fact that these protocols are built on the common concept of relying on <u>pre-configured</u> rules to guide the behavior of end hosts (e.g., how to change the congestion window size) given specific observations of the surrounding environment (e.g., mea- sured throughput, RTT). For example, the NewReno protocol uses the well-known additive increase, multiplicative decrease (AIMD) strategy, and Cubic adopts a well-crafted function to adjust the congestion window size (cwnd) given feedback from the receiver.</p></li><li><p>说明rule-based带来了两方面的影响【我觉得缺少引用】</p><p>This rule-based design can cause two problems: First, it causes congestion control protocols to be unable to adapt to new scenarios when a network environment changes. Since different kinds of networks differ in significant ways with respect to bandwidth, delay and network topology, a given TCP flavor that works well for a specific network might not work in another. Second, the rules of operation are usually built upon standard assumptions or the network model. When either changes, the fixed mapping between observation and actions means that TCP does not intelligently adjust its behavior by learning from experience. As a result, the protocol repetitively adopts the same cwnd changing rules that bring sub-optimal performance, without the flexibility to adjust behaviors for better performance (Sec. 2).</p></li></ul></li><li><p>proposed approach:</p><ul><li><p>先描述这是个什么</p><ul><li><p>功能、使用的工具简介 ( 主要要针对你要抨击的点 )</p><blockquote><p>在这项工作中，我们使用强化学习（RL）设计一种称为QTCP（基于Q学习的TCP）的拥塞控制协议，该协议可以自动识别最佳的拥塞窗口（cwnd）变化策略，并对此进行了观察。 在线方式连接周围的网络环境。 它不需要手工制定的规则集或耗时的离线培训过程。  RL使代理能够根据实时反馈调整其行为，并通过阻止无效行为来避免重复相同的错误。 </p></blockquote></li><li><p>主打的特点 ( 还是要针对你要抨击的点 )</p><blockquote><p>我们在QTCP中利用此功能，使发件人可以动态地学习不同的策略以更好地适应各种网络情况，而不必机械地遵循固定的规则。 具体来说，QTCP基于从网络环境收集的性能指标的测量值，连续更新协议的可能状态-动作对的值，并使用Q学习算法搜索最佳动作，即如何调整Cwnd。 在特定状态下，以使发送者的长期回报最大化。</p></blockquote></li></ul></li></ul></li><li><p>Challenges and Innovations: </p><blockquote><p>尽管已证明RL在许多困难的问题（例如Go，自动驾驶）上表现良好，但由于问题的连续高维状态空间，将其应用于TCP拥塞控制尤其具有挑战性。 状态空间的大小可以随状态空间的大小呈指数增长，从而导致存储状态操作值所需的表的大小显着增加。 在如此大的表中更新条目通常非常耗时，这会导致培训时间过长。 为了加快学习过程2327-4697并使QTCP易于处理，我们应用了函数逼近[6]，这是一种有效的方法，可以减少使用抽象状态表示进行搜索和探索所需的状态空间大小。 尽管有许多函数逼近算法可用，但我们选择Kanerva编码[7]，也被称为稀疏分布式内存（SDM），因为它的复杂度低，收敛速度快，并且在解决大，高维和连续状态的问题上的有效性 空格。  Kanerva编码的思想考虑了这样一种设置：整个状态空间由精心选择的状态空间子集表示，基于该子集存储训练值并评估派生的策略，从而显着降低了内存消耗和价值训练的计算复杂性 。 但是，我们发现，由于状态空间子集的选择不当，原始Kanerva编码的性能在实践中并不令人满意。 为了解决这个问题，我们提出了一种新的方法，即基于泛化的Kanerva编码，该方法可以调整状态空间子集的每个条目的抽象级别，从而在探索该子集时动态重新分配该子集以找到其接近最佳的结构。 状态空间。 我们的方法允许根据访问状态来更改状态抽象的粒度，其中将检查具有不正确泛化级别的子集的不太重要的条目，并将其替换为提供更好泛化的条目。 这克服了传统的Kanerva编码算法及其变体的局限性，使QTCP具有更快的收敛速度和更好的整体学习性能。</p></blockquote></li><li><p>Contribution</p><p>• 我们描述了QTCP，这是一种基于Q学习的拥塞控制协议，它可以自动学习有效的策略来调整cwnd以在线方式实现高吞吐量和低延迟。 这从根本上改变了以前类似NewReno的TCP变体的设计，这些变体需要固定的手动选择的规则。<br>  • 我们提出了一种新型的Kanerva编码算法，该算法在应用于大型复杂状态空间时可以很好地缩放，并且可以大大加快收敛速度并提供稳定的性能。 我们的算法允许学习值不再以表格形式存储，因此消除了在应用于大规模问题域时RL技术的重要限制，例如无法处理巨大状态。</p></li></ul><h1 id="2-Background-and-motivation"><a href="#2-Background-and-motivation" class="headerlink" title="2. Background and motivation"></a>2. Background and motivation</h1><h1 id="3-QTCP-APPLY-Q-LEARNING-TO-TCP-CONGES-TION-CONTROL"><a href="#3-QTCP-APPLY-Q-LEARNING-TO-TCP-CONGES-TION-CONTROL" class="headerlink" title="3. QTCP: APPLY Q-LEARNING TO TCP CONGES- TION CONTROL"></a>3. QTCP: APPLY Q-LEARNING TO TCP CONGES- TION CONTROL</h1><ul><li><p>good sentenses</p></li><li><p>逻辑</p></li><li><p>开场白如上</p></li><li><p>overveiw of Q-TCP</p><ul><li><p>交互框架</p></li><li><p>强化学习问题的五元素 简介（具体的再后面有更加翔实的接好</p><blockquote><p>这里给出了一个很好的提醒，应该是“马尔可夫<strong>过程</strong>”和“强化学习<strong>问题</strong>”，以前一直说的是“马尔可夫<strong>问题</strong>”，which不正确哇，MDP是用于RL问题建模中的一部分而已。</p></blockquote></li><li><p>实现中的challenge以及我们的解决方案（华彩</p></li></ul></li></ul><p>……</p><h1 id="good-sentense-amp-good-pics"><a href="#good-sentense-amp-good-pics" class="headerlink" title="good sentense &amp; good pics"></a>good sentense &amp; good pics</h1><ul><li><p>preliminary statements of Section 3</p><p>​    在本节中，我们探索使用RL来自动设计拥塞控制策略。RL具有克服上述基于规则的TCP问题的潜力，因为它可以使代理从过去的经验中学习，而无需手动制定规则或网络场景的先验知识。<br>​    Specifically，**<u>我们讨论如何将经典的RL算法Q学习应用于拥塞控制问题和提出QTCP领域</u>**：一种新的拥塞控制协议，该协议使发送者可以通过与 网络方案。</p></li></ul><hr><ul><li>good pics</li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/26/111948-47405.png" alt="image-20201026111944751"></p>]]></content>
    
    <summary type="html">
    
      TNSE&#39;19 主要梳理下行文思路，用于写作学习 (思路跟Fuzzy Karnerva-based那篇文章是一样的)
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="Congestion Control" scheme="https://hexi519.github.io/tags/Congestion-Control/"/>
    
  </entry>
  
  <entry>
    <title>spinningUpCodesReading</title>
    <link href="https://hexi519.github.io/Codes/spinningUpCodesReading/"/>
    <id>https://hexi519.github.io/Codes/spinningUpCodesReading/</id>
    <published>2020-10-24T09:12:07.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
    
    <summary type="html">
    
      notes of reading spinnigup Codes
    
    </summary>
    
    
      <category term="Codes" scheme="https://hexi519.github.io/categories/Codes/"/>
    
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>rlDemo</title>
    <link href="https://hexi519.github.io/Codes/rlDemo/"/>
    <id>https://hexi519.github.io/Codes/rlDemo/</id>
    <published>2020-10-22T01:54:51.000Z</published>
    <updated>2020-12-13T13:25:40.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Q-learning"><a href="#Q-learning" class="headerlink" title="Q-learning"></a>Q-learning</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhdGF3aGFsZWNoaW5hL2xlZWRlZXBybC1ub3Rlcy9ibG9iL21hc3Rlci9jb2Rlcy9RLWxlYXJuaW5nL21haW4ucHk=">base代码<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 老是说我没有权限就很烦...</span></span><br><span class="line">sudo /home/hesy/.conda/envs/py36/bin/python main.py <span class="comment"># use default config  0.9,0.9,0.1,200,0.1,500</span></span><br><span class="line">sudo /home/hesy/.conda/envs/py36/bin/python main.py --gamma 0.95 --me 100</span><br><span class="line">sudo /home/hesy/.conda/envs/py36/bin/python main.py --gamma 0.95 --es 0.99 --me 100</span><br></pre></td></tr></table></figure><ul><li><p>ε-decay和ε-start还有ε-end是耦合的，第一个感觉比较难调整，就调后面两个好了</p>  <img   src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031909-640019.png" alt="image-20201022023149453" style="zoom: 50%;" /><ul><li><p>先用默认参数跑了下，发现其实100步已经妥妥收敛了（右边），所以<strong>me果断设置100</strong> ，确实还不错（见下）</p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/030751-545506.png" alt="image-202010220307622" style="zoom: 67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031416-949404.png" alt="image-20201022041939" style="zoom:67%;" /></p></li><li><p>最短路径是15步，所以<strong>gamma</strong>我取了个1-1/15，<strong>约等于0.95</strong></p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/025053-715031.png" alt="image-20201022025051942" style="zoom: 67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031206-822872.png" alt="image-20201022024836105" style="zoom:50%;" /></p><p>目前看效果还不错（如上），肯定是train好了，接着调</p></li><li><p><strong>ee 调到0.99</strong>，希望一开始探索多一点</p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031126-830561.png" alt="image-20201022025738159" style="zoom:67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031206-89443.png" alt="image-20201022025802328" style="zoom:67%;" /></p><blockquote><p>可以看到一开始探索多了以后，学习得居然也快了,说明探索到了好的方法</p></blockquote></li><li><p>再分别试试<strong>调大学习率</strong>（0.15）和<strong>调小学习率（0.05</strong>）</p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/030056-455700.png" alt="image-20201022030055460" style="zoom:67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/030335-443486.png" alt="image-20201022030055460" style="zoom:67%;" /></p><blockquote><p>学习率大了以后果然学的就是快hhh </p></blockquote></li></ul></li></ul><h1 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>游戏：CartPole-v0，action是两维度(左和右，分别用0和1表示)， state是四维的（$x,\overset{·}x,\theta,\overset{·}\theta$）（位置，速度，杆子与竖直方向的夹角，角度变化率）；左移或者右移小车的<em>action</em>之后，<em>env</em>会返回一个+1的<em>reward</em>。其中<em>CartPole-v0</em>中到达200个<em>reward</em>之后，游戏也会结束，而<em>CartPole-v1</em>中则为<em>500</em>。最大奖励（<em>reward</em>）阈值可通过前面介绍的注册表进行修改。</p><h2 id="错误记录-amp-修正"><a href="#错误记录-amp-修正" class="headerlink" title="错误记录 &amp; 修正"></a>错误记录 &amp; 修正</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line 158, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">eval</span>(cfg)</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line 130, <span class="keyword">in</span> <span class="built_in">eval</span></span><br><span class="line">    action = agent.choose_action(state,train=False)  <span class="comment"># 根据当前环境state选择action</span></span><br><span class="line">  File <span class="string">&quot;/home/hesy/rlreview/leedeeprl-notes/codes/dqn/agent.py&quot;</span>, line 76, <span class="keyword">in</span> choose_action</span><br><span class="line">    q_value = self.target_net(state)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py&quot;</span>, line 541, <span class="keyword">in</span> __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/rlreview/leedeeprl-notes/codes/dqn/model.py&quot;</span>, line 29, <span class="keyword">in</span> forward</span><br><span class="line">    x = F.relu(self.fc1(x))</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py&quot;</span>, line 541, <span class="keyword">in</span> __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/modules/linear.py&quot;</span>, line 87, <span class="keyword">in</span> forward</span><br><span class="line">    <span class="built_in">return</span> F.linear(input, self.weight, self.bias)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/functional.py&quot;</span>, line 1370, <span class="keyword">in</span> linear</span><br><span class="line">    ret = torch.addmm(bias, input, weight.t())</span><br><span class="line">RuntimeError: Expected object of device <span class="built_in">type</span> cuda but got device <span class="built_in">type</span> cpu <span class="keyword">for</span> argument <span class="comment">#2 &#x27;mat1&#x27; in call to _th_addmm</span></span><br></pre></td></tr></table></figure><blockquote><p>choose_action在eval的时候默认选择了CPU，但是模型可能load在GPU上..</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/130645-532470.png" alt="image-20201118130642905"></p></blockquote><ul><li>==？==我想问下这里使用CPU进行evaluation是必须的么？是考虑到不想把变量转移到GPU上增加开销才写死到CPU上进行evaluation的吗？写死的话…就会出现问题….</li></ul>]]></content>
    
    <summary type="html">
    
      toy play of rl
    
    </summary>
    
    
      <category term="Codes" scheme="https://hexi519.github.io/categories/Codes/"/>
    
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>MORL</title>
    <link href="https://hexi519.github.io/PaperReading/MORL/"/>
    <id>https://hexi519.github.io/PaperReading/MORL/</id>
    <published>2020-10-20T01:28:19.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>A Generalized Algorithm for Multi-Objective Reinforcement Learning and Policy Adaptation<br>NIPS’19  普林斯顿</p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>我们引入了一种具有==线性偏好==的多目标强化学习（MORL）的新算法(with linear preferences)，其目标是能够对新任务进行少量调整。 在MORL中，目的是学习有关多个竞争目标的策略，这些目标的相对重要性（偏好）对于代理人是未知的。 虽然这减轻了对标量奖励设计的依赖，但是策略的预期收益会随着偏好的变化而发生显着变化，这使得学习单一模型以在不同的偏好条件下产生最优策略具有挑战性。 我们提出Bellman方程的广义形式，以学习在所有可能的偏好范围内获得最优政策的单个参数表示。 <strong>在初始学习阶段之后，我们的代理可以在任何给定的首选项下执行最佳策略</strong>，或者自动通过很少的样本来推断潜在的首选项。 在四个不同领域的实验证明了我们方法的有效性。</p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><blockquote><p>我们解决了MORL中的两个具体挑战：</p><ol><li>提供具有线性偏好的MORL多目标版本Q学习的理论收敛性结果，以及</li><li>证明有效利用深度神经网络将MORL扩展到更大的领域。 </li></ol><p>我们的算法基于两个关键的见解</p><ol><li>带有偏好的Bellman方程[10]的广义版本的最优算子是有效收缩，以及</li><li>多目标Q值的凸包络的优化确保了 偏好与相应的最优政策之间的有效协调。 我们使用HER对有采样优先级的经验回放[11]和homotopy optimization[12]的学习过渡，以确保易于学习。 此外，我们还演示了如何通过策略梯度和对偏好参数的随机搜索的组合，使用训练有素的模型自动推断新任务的隐性偏好（仅提供标量奖励）。</li></ol><p>此外，我们还演示了如何使用我们训练有素的模型，通过结合政策梯度，在仅提供标量奖励的情况下自动推断新任务的隐藏偏好。</p></blockquote><h1 id="2-Background"><a href="#2-Background" class="headerlink" title="2 Background"></a>2 Background</h1><h2 id="MOMDP"><a href="#MOMDP" class="headerlink" title="MOMDP"></a>MOMDP</h2><ul><li>Parrto Frontier</li><li>CCS</li></ul><h2 id="related-work"><a href="#related-work" class="headerlink" title="related work"></a>related work</h2><ul><li>MORL <ul><li>single-policy 在给定preference的情况下学习一个策略 &amp; multiple-policy 在不同preference情况下学习多组相应最优的策略</li><li>scalarized Q-learning  使用ourler loop去搜索最佳策略(OLS)<ul><li>[里面引用了2016年开源的那篇文章]</li></ul></li></ul></li></ul><h1 id="3-算法"><a href="#3-算法" class="headerlink" title="3 算法"></a>3 算法</h1><ul><li>T $\mathcal{T}$ 单目标和多目标中Q函数的贝尔曼优化算子</li><li>H $\mathcal{H}$  单目标和多目标中Q函数的optimal filter</li><li>d( Q,Q’ )</li><li>$L^A(\theta)$ 与$L^B(\theta)$ </li><li>learning algorithm 以及 policy adaption两个part</li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/25/140616-919388.png" alt="image-20201025140615145"></p><h1 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4 Experiments"></a>4 Experiments</h1><ul><li></li><li><p>实验设置</p><ul><li>指标 CR （Coverage Ratio）、AE（Adaptation Error）、UT（Average Utility）</li><li>四个场景<ul><li>DST FTN Dialog  SuperMario</li></ul></li><li>三个baseline<ul><li>==check下哪个可以输出连续动作哇…==</li></ul></li></ul></li><li><p>结果</p><ul><li>几个指标上的胜利，但是提升的点并不是很多哇</li><li>scalability</li><li>sample efficiency</li><li>policy adaptation</li><li>revealing underlyging preferences<ul><li>这部分的结果分析的意思应该是，policy adaptaion不是一个必要环节，one of its 作用就是去uncover underlying preferences.</li></ul></li></ul></li></ul><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><ul><li><p>optimality filter 指的是argmax 或者 sup ?</p></li><li><p>o.w.什么意思…</p></li><li><p>truncated multivariable Gaussian distribution 是什么意思</p></li></ul><p>prediction based</p><hr><h1 id="abstract-1"><a href="#abstract-1" class="headerlink" title="abstract"></a>abstract</h1><p>许多现实世界中的控制问题都涉及目标冲突，我们需要一套密集而高质量的控制策略，这些策略对于不同的目标偏好是最优的（称为帕累托最优）。 尽管为解决此类问题已进行了多目标强化学习（MORL）的广泛研究，但对于复杂连续机器人控制的多目标优化仍处于探索中。 在这项工作中，我们提出了一种有效的进化学习算法，通过扩展最先进的RL算法并提出一种新颖的预测模型来指导学习过程，从而找到连续机器人控制问题的帕累托集近似值 。 除了有效地发现Pareto前沿的单个策略外，我们还通过Pareto分析和内插法构造了一组连续的Pareto最优解。 此外，我们设计了七个具有连续动作空间的多目标RL环境，这是第一个评估MORL算法解决各种机器人控制问题的基准平台。 我们对提出的基准问题测试了先前的方法，并且实验表明，与现有算法相比，我们的方法能够找到更密集，质量更高的帕累托策略集。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><blockquote><p>​    多目标问题已经引起了广泛的关注，因为大多数现实情况都涉及对不同性能指标的权衡。 在机器人控制中尤其如此，其中性能概念通常涉及不同的冲突目标。例如，当为运行中的四足机器人设计控制策略时，我们需要考虑两个相互矛盾的目标：运行速度和能效。与单目标环境相比，单目标环境使用单个标量值来衡量性能，并且在存在单个最佳解决方案的情况下，对于多目标问题，性能是使用多个目标进行衡量的，并且存在多个最佳解决方案。 一种最优策略可能会以降低能源效率为代价来偏爱高速度，而另一种最优策略可能会以降低速度为代价偏向于高能量效率。 通常，根据这两个度量之间的选择权衡，存在许多最佳策略。 最后，由人负责在不同指标之间选择偏好，这决定了相应的最佳策略。</p><p>​    解决多目标控制问题的一种流行方法是计算meta policy（Chen等，2018）。 元策略是一种通用策略，它不一定是最佳策略，但可以相对快速地适应性能目标之间的不同折衷。 不幸的是，这种adaptive的控制策略不一定是最优的。例如，为四足机器人适应通用元控制策略以使其尽可能快地运行，通常会导致该指标的策略欠佳。 例如，为四足机器人适应通用元控制策略以使其尽可能快地运行，通常会导致该指标的策略欠佳。</p><p>​    在这项工作中，我们表明，获得多目标机器人控制的最佳性能折衷的有效代表是一组帕累托控制策略。 我们的经验表明，不能使用单个连续的策略族来有效地表示帕累托集。 相反，帕累托集由一组不相交的策略族组成，每个策略族在参数空间中占据一个连续的流形，并负责性能空间中帕累托前沿的一个部分（图1）。</p><p>为了找到这种帕累托表示，我们提出了一种有效的算法来计算帕累托策略集。 我们的算法分两个步骤进行。 第一步，我们使用基于a novel prediction-guided evolutionary learning algorithm，在帕累托前沿找到密集且高质量的策略集。 在每一generation中，每种策略都适合使用分析模型，以预测沿每个优化方向的预期改进。 然后解决优化问题，以选择可以最好地改善Pareto质量的策略和相关的优化方向。 在第二步中，我们对计算出的Pareto最优策略进行Pareto分析，以识别不同的策略系列，并为每个策略系列计算连续的表示形式。</p><p>​    ==上面这一段的翻译不是很好==</p><p>​    为了对我们提出的算法进行基准测试，我们设计了一组具有连续动作空间的多目标机器人控制问题。 可以使用基于物理的模拟系统来评估每个策略的性能（Todorov等，2012）。 我们的实验表明，与现有方法相比，该算法可以有效地找到一组质量更高的帕累托最优策略。 此外，基于这些策略，它可以重建跨越整个帕累托前沿的连续策略系列。</p></blockquote>]]></content>
    
    <summary type="html">
    
      A Generalized Algorithm for Multi-Objective Reinforcement Learning and Policy Adaptation, NIPS&#39;19  普林斯顿
    
    </summary>
    
    
      <category term="PaperReading" scheme="https://hexi519.github.io/categories/PaperReading/"/>
    
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>rlReview</title>
    <link href="https://hexi519.github.io/Summary/rlReview/"/>
    <id>https://hexi519.github.io/Summary/rlReview/</id>
    <published>2020-10-20T01:28:19.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="回顾时-一下子没想出来的问题"><a href="#回顾时-一下子没想出来的问题" class="headerlink" title="回顾时 一下子没想出来的问题"></a>回顾时 一下子没想出来的问题</h1><ul><li><p>强化学习相对于监督学习为什么训练会更加困难？（强化学习的特征）</p><ul><li><p>强化学习处理的多是序列数据，其很难像监督学习的样本一样满足IID（独立同分布）条件。( needs trivial handling )</p></li><li><p>强化学习有奖励的延迟（Delay Reward），即在Agent的action作用在Environment中时，Environment对于Agent的State的奖励的延迟（Delayed Reward），使得反馈不及时。</p></li><li><p>相比于监督学习有正确的label，可以通过其修正自己的预测，强化学习相当于一个“试错”的过程，其完全根据Environment的“反馈”更新对自己最有利的Action。</p></li></ul></li><li><p>为什么在马尔可夫奖励过程（MRP）中需要有<strong>discount factor</strong>?</p><ul><li><p>有些马尔可夫过程是<strong>带环</strong>的，它并没有终结，然后我们想<strong>避免这个无穷的奖励</strong>；</p></li><li><p>当前步对遥远未来的reward的<strong>贡献</strong>比较小，所以用discount factor弱化未来的奖励在当前步骤的累加值；</p></li><li><p>考虑奖励的<strong>不确定性</strong>：假设在从当前步采取同样的action开始，采样不同的trace，可能有的会会有最终奖励、有的不会（这里以打游戏为例，通关得到的最终奖励远大于平时每个步骤得到的微小奖励 ( 有的设置里面平时的奖励实际上都没有，就只设置最终步骤的奖励 ) ）。综上，未来的奖励是受后续trace影响的，也就是不确定的，有一定概率的，所以从这个角度来看，我们也要给这个未来奖励打一个折扣。</p><blockquote><p>从另一个角度思考，考虑不打折扣的情况–》γ都是1的情况下，就很糟糕。</p></blockquote></li></ul></li><li><p>为什么说Sarsa ( on-policy ) 更加保守，而Q-learning ( off-policy ) 更加大胆且鼓励探索呢？</p><p><img src="https://images.weserv.nl/?url=https://datawhalechina.github.io/leedeeprl-notes/chapter3/img/3.18.png" alt="img"></p><ul><li><strong>鼓励探索</strong></li></ul><p>可以看到，虽然都是使用ε-greedy算法选择动作，但是对于同一个动作( especially探索出来的动作 )，Q-learning给分会比较高（毕竟是给了一个argmax的action对应的值哇）。那么一旦给分高了以后，偏向选择这个动作的概率就会大，就会探索出更多以这个action开头的trace，其中说不定能找到一个比之前更好的trace。而如果是Sarsa的话，这一次探索之后该动作对应的Q值一跃成为最大值可能性就小很多了。与之相比，Q-learning其实就是鼓励探索的。</p><ul><li><strong>更加大胆</strong></li></ul><p>一个很经典的例子就是cliffWalking里面，Q-learning的最终解可以贴着悬崖边上走，但是SARSA是不可以的，这是因为SARSA会考虑到这个贴着悬崖的状态有ε/4的概率会选择向下的动作，然后掉下去( 非最优动作的探索率是 ε/|A|,这里一共有四个动作:上\下\左\右 )，所以这ε/4的低分(死亡)会把这个状态的分数拉下去(而远离悬崖的状态都安全多了，不会有掉下去的概率)；但是Q-learning是只看这个状态会导致的最好结果，which means只看到最后成功的结果，忽视会掉下去的情况，倾向于”铤而走险“。所以个人认为，单纯从找到一个解决方案来看，还是Q-learning比较占优势。</p><blockquote><p> <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGV2aWxtYXljcnk4MTI4Mzk2NjgvcC8xMDMxMjY4NS5odG1s">但是实际中SARSA会比Q-learning表现得更好<i class="fa fa-external-link-alt"></i></span> 其实我觉得这个还得看我们用强化学习来解决什么问题了。我们是要用它来找到一个最优解，还是要让他从头到尾”完备、安全“地做完某事。博客中显然是选择了前一种的概念。</p></blockquote><blockquote><p><code>&quot;那么一旦给分高了以后，偏向选择这个动作的概率就会大&quot;</code></p><p> 这里要区分一个概念：对于ε-greedy来说，除了使得值函数的值最大的那个action以外，其他所有的action的选取概率实际上都是一样的。如果想要按照值函数大小为概率来选择动作的话，可以考虑玻尔兹曼策略或者UCB策略。</p><p>所以，这句话的隐含意思是，<strong>很大可能</strong>这次更新后( 因为加上的是最大值啊喂 )，这个动作对应的Q-value就一跃成为最大值（之一）了，此时其被选取、探索的概率就会变大。</p></blockquote><blockquote><p><strong>个人认为</strong>，Q-learning这方法会跟UCB做赌博机的那个实验效果一样，倾向于<strong>把所有的动作空间都try一遍</strong>（因为一旦概率落到新动作上，如果学习率比较大，那么这个新动作的Q值一下子就会变得很大，一跃成为Q值最大的，所以下次会优先(大概率)选择它，然后就相当于展开了以它为根结点的探索空间）……</p><p>支撑论据：</p><blockquote><p>refer@<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2ODQ2MTg2Ng==">知乎<i class="fa fa-external-link-alt"></i></span>，which第一个高票回复我觉得不对，直接在评论里面怼回去了。</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/011454-204261.png" alt="image-20201021175117502" style="zoom: 70%;" /><ul><li><p>可以看到同样的情况下，Q-learning收敛比较慢（因为探索的概率更大哇），但是一旦收敛，就比较稳定了。但是Sarsa就不一样，收敛了以后，由于探索性探索到的动作之前没有好好学习到，所以经常会出现锯齿（which Q-learning已经在前期探索到比较好的策略了）[所以<span class="exturl" data-url="aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlZGVlcHJsLW5vdGVzLyMvY2hhcHRlcjMvY2hhcHRlcjM=">有人<i class="fa fa-external-link-alt"></i></span>说的“sarsa因为要兼顾探索所以策略不稳定“是这个意思( 并不是说q-learning就没有兼顾探索了hh) ]</p></li><li><p>另一方面，Sarsa由于缺乏探索性（偏向保守），所以没有收敛到一个最优解，也许需要更长的时间才能收敛到Q-learning的程度 ( 可以看到收敛曲线其实还是在缓慢下降的 )</p></li></ul></blockquote><p>所以动作空间别太大哈，不然不就凉凉了2333 【个人觉得off-policy 学习率大的时候适合动作空间比较小的】</p><blockquote><p>which事实证明并不是的2333….我着实没想通</p></blockquote></blockquote><blockquote><p><strong>异策略可以保证充分的探索性</strong>。例如⽤来评估和改善的策略是贪婪策略，⽤于产⽣数据的探索性策略为探索性策略，如ε-soft策略。  – 郭宪 《深入浅出强化学习：原理入门》</p></blockquote></li></ul><ul><li><p>ε-greedy策略是是ε-soft策略中的一种</p><p>如果“严格”的说，ε-greedy策略是 $\frac{\epsilon}{A(s)}-soft$ 的策略。</p><p>解释请参考<span class="exturl" data-url="aHR0cDovL2ZhbmN5ZXJpaS5naXRodWIuaW8vYm9va3MvcmwzLw==">这个博客<i class="fa fa-external-link-alt"></i></span></p><p>进行符号测试： $\frac{\epsilon}{A(s)}-soft$  成果</p><p>进行符号测试： $ \frac{\epsilon}{A(s)}-soft $  成果</p><p>符号 $$ \frac{\epsilon}{A(s)}-soft$$  测试2</p></li><li><p>值迭代和策略迭代</p><ul><li><p>参考<span class="exturl" data-url="aHR0cDovL3d1bGMubWUvMjAxOC8wNS8wNS8lRTUlQkMlQkElRTUlOEMlOTYlRTUlQUQlQTYlRTQlQjklQTAlRTclQUMlOTQlRTglQUUlQjAoMSktJUU2JUE2JTgyJUU4JUJGJUIwLw==">这个笔记<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>policy iteration 最后收敛的 value V 是当前 policy 下的 value 值（也做对policy进行评估），目的是为了后面的policy improvement得到新的policy；所以是在<strong>显式地不停迭代 policy</strong>。</p><p>而value iteration 最后收敛得到的 value 是当前state状态下的最优的value值。当 value 最后收敛，那么最优的policy也就得到的。虽然这个过程中 policy 在也在隐式地更新，但是<strong>一直在显式更新的是 value</strong> 的，所以叫value iteration。</p><blockquote><p>那从这个角度来看，PG似乎应该属于policy gradient 2333,毕竟是直接对策略进行更改 ( PG中是直接输出策略而非值函数了，也就是update参数实际上就是update策略 。DQN的话update 参数其实是在更新值函数，因为其模型输出是值函数233 ） </p></blockquote></blockquote></li><li><p>SARSA和Q-learning也都是值迭代引出来的，只不过一个是同策略（on-policy），另一个是异策略（off-policy）。至于是TD还是MC，只不过采样方式和训练效率上的差别而已。</p></li></ul></li><li><p>PG和AC的划分标准可以参考<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTY0NTc2OA==">这个知乎<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>A2C实际上是Advantage Actor-Critic的缩写</p></li><li><p><code>在PG策略中，如果我们用Q函数来代替R，那么我们就得到了Actor-Critic方法。</code></p><blockquote><p>所以这里我的理解是：引入了值函数去估计期望累计回报，which作为critic，就是Actor-Critic，有没有baseline并不是最重要的（AC里面，baseline也不一定要用$V(S_t)$ ，不过是因为一般来说，都有了$Q(s,a)$去估计累计期望回报，没道理不用$V(S_t)$作为baseline ,Vanilla PG里面的baseline也是用的$V(S_t)$,但还是PG系列 ）</p></blockquote></li></ul></li></ul><ul><li><p>环境non-deterministic 和 deterministic的区别</p><ul><li><p>取决于state是不是只受action影响，env自己是不是也在演化。</p></li><li><p>比如下棋，俄罗斯方块，你做了你的决定，你的下一个状态不是确定的 ( P(s,a)转移阵不是非0即1的 )</p><p>俄罗斯方块游戏里面的状态是</p></li><li><p>马里奥游戏就是deterministic的</p></li></ul><blockquote><p>网络中，输入的流量矩阵也是一个会引起state变化的，有一定概率的东西，所以也是non-deterministic</p></blockquote><ul><li>non-stationary和non-deterministic异同：env肯定都是在演化的，但是前者env演化的模式并不固定( 以泊松分布为例，env的演化可以符合参数为$\lambda$的泊松分布( non-derterministic ) (这是一个概率分布)，但是$\lambda$参数本身不能随时间变化，否则相当于演化的概率分布发生了变动，也就是演化的模式是不固定的(non-deterministic)  )</li></ul></li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><p>data-whale强化学习教程</p></li><li><p>刘建平的系列博客确实不错,有空回顾下</p><ul><li><p>已完成</p><ul><li><p>8(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTcxNDY1NS5odG1s">价值函数的近似表示与Deep Q-Learning<i class="fa fa-external-link-alt"></i></span>) [NIPS’13] + 9(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTc1NjA3NS5odG1s">Deep Q-Learning进阶之Nature DQN<i class="fa fa-external-link-alt"></i></span>) [NIPS’15]</p><ul><li><p>三种神经网络的输入输出方式</p></li><li><p>NIPS’13 , 改进主要是经验池回放 ,Q-learning–&gt;DQN</p></li><li><p>NIPS’15 , 改进主要是双网络,  DQN –&gt;Nature DQN</p><blockquote><p>注意,<u>双网络并不是DDQN才提出来的</u></p></blockquote></li><li><p>介绍了下CartPole-v0的基本情况</p></li><li><p>8里面说PG用的是交叉熵，我就不是很懂了</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/14/104102-559352.png" alt="image-20201114104101708"></p><ul><li><p><input disabled="" type="checkbox">  【建模思想】奖励设置要均匀，进一步还可以尝试下下归一化 ==其实我是有点疑惑，后面看看能不能找到理论依据==</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/14/111303-795092.png" alt="image-20201114110105580"></p></li></ul></li><li><p>8的评论里面还提到了为何现在用的都是TD(0)：实现方便，如果是多步TD，需要改变buffer的构造，改成( s,a,r,s’,a’,r’,s’’… ) ，比较麻烦。虽然经验表明了TD(λ)在λ&gt;1的时候效果比较好（注意，TD(λ)是给多步TD加了权重，更复杂），但是实际上单步TD就够用了。</p></li></ul></li><li><p>10(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTc3ODA2My5odG1s">Double DQN (DDQN)<i class="fa fa-external-link-alt"></i></span>)</p><ul><li><p>DQN存在过度估计的问题,which我没有细究(原文有),有一些文章(e.g.<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC85Nzg1MzMwMA==">JQWang的知乎专栏<i class="fa fa-external-link-alt"></i></span>)在对论文的详解中有说,但是刘建平这里缺失了</p><blockquote><ul><li><p><input disabled="" type="checkbox">  JQWang的论文解读专栏还是挺详细的</p></li><li><p><input disabled="" type="checkbox">  评论里面提到了过度估计的事情，which感觉还不错。==优先学习一下==</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlZGVlcHJsLW5vdGVzLyMvY2hhcHRlcjcvY2hhcHRlcjc=">DataWhale的教程<i class="fa fa-external-link-alt"></i></span>给的解释还是不错的，但其实我觉得没有说清楚:过高估计本身是没影响的，最重要的还是策略的问题，有了双网络，就能有个理性的target，朝正确的方向更新，本身选动作不是很重要，没选到$\underset{a}argmax Q’(s,a)$的话我就当作探索的一个experience也可以哇，重要的是更新价值函数！！</p></li></ul></blockquote></li><li><p>改进就是 表现网络/当前网络中找action ( via argmax ),在target网络中找Q值</p></li><li><p><input disabled="" type="checkbox">  提到了ICML’16的<span class="exturl" data-url="aHR0cHM6Ly9pY21sLmNjLzIwMTYvdHV0b3JpYWxzL2RlZXBfcmxfdHV0b3JpYWwucGRm">rl tutorial<i class="fa fa-external-link-alt"></i></span> ,也可以翻翻后面几年的</p></li><li><p><input disabled="" type="checkbox">  由S和A得到R, S’和is_end时，R和is_end是根据环境反馈回来的，which对应的是：<strong>S</strong>是否is_end以及S情况下采取A得到的R</p><blockquote><p>确定么？我总感觉是S’是否是end ， V(end_state)=0</p></blockquote></li></ul></li><li><p>11(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTc5NzY5NS5odG1s">Prioritized Replay DQN<i class="fa fa-external-link-alt"></i></span>)</p><ul><li></li></ul></li><li><p>19<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvMTA2MDkyMjguaHRtbA==">AlphaZero<i class="fa fa-external-link-alt"></i></span>建模设计中有奖励回溯的部分</p></li></ul></li></ul></li><li><p><input disabled="" type="checkbox">  抓到一个大佬的<span class="exturl" data-url="aHR0cHM6Ly9odWppYW4uZ2l0Ym9vay5pby9kZWVwLXJlaW5mb3JjZW1lbnQtbGVhcm5pbmcv">gitbook<i class="fa fa-external-link-alt"></i></span> (hujian.gitbook.io)</p></li></ul><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li><p><input disabled="" type="checkbox">  【强化学习】中Q-learning,DQN等off-policy算法不需要重要性采样的原因</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzg5NTMzOS9hcnRpY2xlL2RldGFpbHMvODQ4ODExNjk=">CSDN<i class="fa fa-external-link-alt"></i></span></p></li><li><p>同策略 采样大，收敛慢； Q-learning 是异策略，还不需要importance sampling </p><blockquote><p>但是我看Q-learning也是一步一更新哇…感觉采样大这个劣势并没有利用好？</p></blockquote></li></ul></li><li><p><input checked="" disabled="" type="checkbox">  编程实战书P21 要结合历史观测 是因为部分可观测性？而不是因为非马尔可夫性？</p><p>似乎说得通… 我是因为没有认清当前的状态是什么所以才需要多个state拼在一起的窗口</p></li><li><p><input disabled="" type="checkbox">  交叉熵与one-hot之间的联系</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlZGVlcHJsLW5vdGVzLyMvY2hhcHRlcjQvY2hhcHRlcjQ=">百度飞桨部分给出了一些解释<i class="fa fa-external-link-alt"></i></span>给出了点解释，which我觉得还是没有讲清楚</li><li>check下<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pob3Vib2xlaS9pbnRyb1JM">强化学习纲要<i class="fa fa-external-link-alt"></i></span>对应部分的讲解</li></ul></li><li><p><input disabled="" type="checkbox">  epsilon的减小方式有没有什么特别的讲究\</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXdhNHkxNzdRMQ==">正月灯笼<i class="fa fa-external-link-alt"></i></span>函数式编程让我感到疑惑:</p><p>up说函数式编程可以避免在debug的时候陷入循环中，那么我很好奇函数式编程如何debug<br>list.append为何拖累了速度呢？up有没有相关资料可以分享一下~<br>想问下第二种方式和第三种方式是不是除了形式上并没太大的区别，主要还是第一种方式里面的append是性能瓶颈?</p></li></ul>]]></content>
    
    <summary type="html">
    
      Summary
    
    </summary>
    
    
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>DRL-TE | Experience-driven Networking, A Deep Reinforcement Learning based Approach</title>
    <link href="https://hexi519.github.io/ExtensiveReading/Route/DRL-TE/"/>
    <id>https://hexi519.github.io/ExtensiveReading/Route/DRL-TE/</id>
    <published>2020-10-19T10:25:51.000Z</published>
    <updated>2020-12-13T13:25:40.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>感觉这篇文章文笔不行啊…一看就是中国人写的…[果然，作者全都是中国名…]</p></li><li><p>整体思路是：</p><p>​    决定链路分割比是一个连续控制问题，如果用的是离散控制的强化学习算法，会导致解空间成指数级的爆炸性增长，所以我们要使用连续控制的强化学习算法。连续型的，一开始的想法就是怼一个state-of-art的模型上去。但问题是，做出来效果不好，所以就用了AC算法，并基于AC算法加了<u>两个改进</u>：TE-aware exploration &amp; 训练上的trick。前者实际上就是结合网络的这个背景，对探索进行了一定的约束，后者实际上就是添加了优先级回放的功能。</p></li></ul><hr><ul><li>evaluation还是很不错==哪里不错??==</li></ul><ul><li><p>创新点/主要思想</p><ul><li><p>首次用DRL做TE</p></li><li><p>提出了DRL-TE的框架 </p><blockquote><p>这里主要指的是 将DRL用在网络中需要改进的一些点 ( action<del>base</del> )</p></blockquote></li><li><p>改进了算法</p></li></ul></li><li><p>算法使用</p><ul><li>RL （AC）<ul><li>进行了技术上的改进：TE-aware expoloration : 在action<del>base</del>上添加噪声； 添加了缓冲区权重</li></ul></li></ul></li><li><p>实验设置</p><ul><li>集中式的</li><li>ns3</li><li>代表性和随机性的网络拓扑  （from zoo and generated by brite）</li></ul></li><li><p>效果</p><ul><li>提升了吞吐，降低了延迟 ( 毕竟考虑了延迟的这个目标 )</li><li>对网络变化更有鲁棒性  (==evaluation部分是如何得出这个结论的？==需要再整理下)</li></ul></li></ul><hr><ul><li><p>排队论不适合多跳排队问题的建模</p><ul><li>强假设不能满足</li><li>多跳排队还是个open problem  </li><li>为什么排队论和NUM不适合</li></ul><p>==那排队论研究的是什么问题??==</p></li></ul><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​        现代通信网络已经变得非常复杂且高度动态，这使其难以建模，预测和控制。 在本文中，我们开发了一种新颖的体验驱动方法，可以像人类学习新技能（例如驾驶，游泳等）一样，根据自身的经验而不是准确的数学模型来学习很好地控制通信网络。 具体来说，我们首次建议利用新兴的深度强化学习（DRL）在通信网络中实现无模型控制； 并针对基础网络问题：流量工程（TE），提出了一种新颖且高效的基于DRL的控制框架DRL-TE。通过共同学习网络环境及其动态性，并在强大的深度神经网络（DNN）的指导下进行决策，<strong>所提出的框架最大程度地提高了广泛使用的效用函数</strong>。<strong>我们提出了两种新技术</strong>，即TE感知探索和基于行为者批评的优先体验重播，以优化通用DRL框架，尤其是针对TE的框架。 为了验证和评估所提出的框架，我们在<strong>ns-3</strong>中实施了该框架，<strong>并使用代表性和随机生成的网络拓扑进行了全面测试</strong>。 </p><blockquote><p>这里的代表性和随机性</p></blockquote><p>​    广泛的数据包级仿真结果表明：1）与几种广泛使用的基准方法相比，DRL-TE显着<u>降低了端到端延迟</u>，并不断提高了网络实用性，<u>同时提供了更好或相当的吞吐量</u>；  2）DRL-TE对网络的变化更具有鲁棒性； 和3）DRL-TE始终优于最新的DRL方法（用于连续控制），即深度确定性策略梯度（DDPG），which不能提供令人满意的性能。</p><blockquote><p>创新：</p><ul><li>我们是第一个为TE提供高效，实用的基于DRL的经验驱动控制框架DRL-TE。（就是第一个用DRL做TE的）</li><li>对结合network使用RL做出了巨大的贡献：1. 提出了DRL-TE的框架； 2. 在AC上进行改进，实验证明比ddpg效果要好不少</li></ul></blockquote><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><blockquote><p>Our general goal(e.g. 拯救世界)  &amp;  SDN is promising</p></blockquote><p>​    因此，我们的目标是开发一种新颖的，无需经验的无模型方法，该方法可以像人类学习技能（例如驾驶，游泳等）一样，从经验中学习很好地控制通信网络，而不是精确的数学模型。我们认为，某些新兴的联网技术，例如软件定义网络（SDN）[18]，可以很好地支持这种体验/数据驱动的方法。 例如，SDN中的<strong>Openflow</strong>控制器可以用作中央控制单元，用于收集数据，制定决策和部署解决方案。</p><blockquote><p>开始喷前人的工作</p></blockquote><p>​    一个基本的网络问题是流量工程（TE）：给定一组具有源节点和目标节点的网络流，请找到一种解决方案，以最大化实用功能为目标转发数据流量。 简单且广泛使用的解决方案包括：始终通过最短路径路由流量（例如，开放式最短路径优先（OSPF）[24]）； 或通过多个可用路径平均分配流量（例如，有效负载平衡<strong>（VLB）[38]**）。 显然，它们都不是最优的。 如果存在针对网络环境，用户需求及其动态的准确且数学可解的模型，则可以开发出更好的解决方案。 <u>排队论已被用于对通信网络进行建模并协助资源分配[15]，[25]，[26]，[37]</u>。 **但是，由于以下原因，它可能不适用于涉及多跳路由和端到端性能（例如延迟）的网络问题</strong>：1）在排队论中，queueing network（而不是单个队列）中的许多问题仍然是开放问题，而具有网状拓扑结构的通信网络则表示相当复杂的多点到多点排队网络，其中来自一个队列可以被分布到多个下游队列，并且一个队列可以从多个不同的上游队列接收分组。  2）<u>排队理论只能在一些强假设下（例如，元组到达遵循泊松分布等）提供准确的排队延迟估计，但是在复杂的通信网络中可能不成立</u>。 请注意，即使到达每个源节点的数据包都遵循泊松分布，到达中间节点的数据包也可能不会。</p><p>​    另外，对**<u>网络效用最大化（NUM）[17]</u><strong>的研究也很深入，它通常通过制定和解决优化问题来提供资源分配解决方案。 但是，</strong>这些方法可能会遇到以下问题**：1）它们通常假定一些关键因素（例如用户需求，链接使用等）作为输入给出，但是，这些因素很难估计或预测。  2）由于给定了资源分配的决策变量（例如TE），因此很难通过显式地将其包含在效用函数中来直接最小化端到端延迟，因此很难在 由于需要一个精确的数学模型来实现此目的，因此它们必须是封闭的形式（尽管如上所述，排队理论在这里可能不起作用）。  3）这些工作未能很好地解决网络动态性问题。 他们中的大多数声称提供了一种“良好”的资源分配解决方案，该解决方案是最佳的或接近最佳的，但仅适用于网络快照。 但是，大多数通信网络时变很大。 这些NUM方法尚未很好地解决如何调整或重新计算资源分配以适应这种动态情况。 </p><blockquote><p>讲了下为何用DRL</p></blockquote><ul><li><p>DRL is in succsess</p><ul><li>DRL is promising<ul><li>model-free ,not relying on exact model (e.g. queueing model)<ul><li>handle complicated action space with DDPG</li><li>can handle dynamic env， due to it is AI method</li></ul></li></ul></li></ul></li></ul><blockquote><p>contribution</p></blockquote><ul><li><p>我们是第一个为TE提供高效，实用的基于DRL的经验驱动控制框架DRL-TE。</p></li><li><p>我们讨论并表明，**<u>直接应用最先进的DRL解决方案进行连续控制，即深度确定性策略梯度（DDPG）[16]，对TE问题效果不佳。</u>** 【有意思了。意思来了】</p><blockquote><p>论文中并没有分析为什么DDPG做的不好，我们的理解是，他只是想体现他的工作量：他做了这么多建模和算法上的尝试。</p></blockquote></li><li><p>我们提出了两种新技术，即TE-aware exploration 和 AC-based prioritized experience replay，以优化通用DRL框架，尤其是针对TE的框架。 </p><p>我们通过使用具有代表性和随机网络拓扑的ns-3进行的广泛数据包级仿真，表明DRL-TE明显优于几种广泛使用的基线方法。</p></li></ul><h1 id="2-DRL"><a href="#2-DRL" class="headerlink" title="2 DRL"></a>2 DRL</h1><h1 id="3-Problem-Statement"><a href="#3-Problem-Statement" class="headerlink" title="3 Problem Statement"></a>3 Problem Statement</h1><p>==这里是为啥突然要提出delay这个指标来着？==</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/210803-186164.png" alt="image-20201104210801863" style="zoom: 80%;" /><p>分割比$w_{k,j}$ , 备选路径集合$P_k$ , traffic load $f_{k,j}$</p><ul><li><p>$\alpha-faireness$ 的文献要好好读读这个指标的含义</p><ul><li><p>又提到了，$\alpha$ 可以被用来balance fairness和efficiency 。 当$\alpha=1$的时候，可以获得proportional fairness</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/211336-513625.png" alt="image-20201104211329992" style="zoom: 80%;" /></li><li><p>仿照Remy提了个指标</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/211424-585348.png" alt="image-20201104211423959" style="zoom:80%;" /></li></ul></li></ul><h1 id="4-Proposed-DRL-Based-Control-Framework"><a href="#4-Proposed-DRL-Based-Control-Framework" class="headerlink" title="4. Proposed DRL-Based Control Framework"></a>4. Proposed DRL-Based Control Framework</h1><p>在本节中，我们介绍了针对上述TE问题的建议的基于DRL的控制框架DRL-TE。</p><p>所提出的控制框架的核心是一个代理，该代理运行DRL算法（算法1）以在每个决策时期找到最佳动作，将动作带入网络（**<u>例如，通过网络控制器</u><strong>），观察网络状态，并 收集过渡样本。  TE问题显然是一个</strong><u>连续的控制问题</u>**。</p><ul><li><p>state</p><p>点对的集合</p></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/211803-272410.png" alt="image-20201104211802927"></p><ul><li><p>actors</p><p>分割比的集合</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/03/121443-968455.png" alt="image-20201203121442730"></p></li><li><p>reward</p></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/03/121455-73685.png" alt="image-20201203121454816"></p><ul><li><p>algorithm :</p><ul><li><p>AC算法</p></li><li><p>动作加随机噪声</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/212915-598687.png" alt="image-20201104212913054"></p><p>​    所提出的控制框架不限于针对abase的任何特定的基础TE解决方案，可以通过许多不同方式来获得该解决方案。 </p></li></ul></li></ul><blockquote><p> 例如，一种简单的解决方案是使用最短路径为每个通信会话传递所有数据包，这在大多数情况下不是最佳的，但足以切断作为探索的基准。</p><p>另一种解决方案是将每个通信会话的流量负载平均分配到所有候选路径。</p><p>基于NUM的方法也可以用于查找基本解决方案。 例如，我们可以通过解决以下数学编程来获得TE解决方案：</p><p>​                                    <img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/213935-479446.png" alt="image-20201104213933393"  />    </p></blockquote><p>​    In this formulation，目的是使产量方面的总效用最大化。 请注意，很难在效用函数中包含端到端延迟项，因为不存在可以准确地在端到端延迟与其他决策变量&lt;xk，fk,j&gt;</p><blockquote><p> Note that it is hard to include the end- to-end delay term in the utility function since there does not exists a mathematical model that can accurately establish a connection between end-to-end delay and the other decision variables &lt; xk, fk,j &gt;. </p></blockquote><p>​    这就是为什么NUM上大多数现有作品都没有很好地解决端到端延迟的原因。</p><p>​    约束（6b）确保每条链路上的总流量负载不超过其容量Ce，其中pj是Pk中的第j条路径。 约束（6c）确保每个会话k的总吞吐量不超过其需求Bk（可以估算）。 约束（6d）在两组决策变量<xk>和&lt;fk，j&gt;之间建立联系。 如果α= 1，Uα（xk）= log xk，则该问题变为凸编程问题，which可以通过我们的实现中使用的Gurobi Optimizer [10]有效解决。</p><hr><blockquote><p>建模完成后就开始说如何解了</p></blockquote><p><strong>AC算法</strong></p><ul><li><p>加上了优先级经验回放，which author claim 是他们的扩展，不是AC本身自带的</p></li><li><p>网络架构</p><ul><li><p>Actor</p><ul><li>2 FC ( 64,32 ) Leaky Rectifier激活函数，输出层softmax作为激活函数来确保输出值的总和等于1。</li></ul></li><li><p>Critic</p><ul><li>2 FC ( 64,32 ) Leaky Rectifier激活函数</li></ul><blockquote><p>A和C最后一层网络架构的不一样的原因是，前者输出动作概率，所以需要softmax，后者只要输出一个数值，所以不需要用softmax归一化。</p></blockquote></li><li><p>本算法对于优先级采样的一些设计/改进</p><ul><li><p>为了以等式（9）给出的概率对N个转换进行采样，将范围[0，p<del>total</del>]划分为N个子范围，并从每个子范围中均匀采样一个转换，其中p<del>total</del>是重播缓冲区中的所有transition的他优先级之和。 正如[30]所建议的，我们使用求和树来实现优先级概率，这类似于二进制堆。</p></li><li><p>区别在于1）叶节点存储转换的优先级；  2）内部节点存储其子节点的总和。 这样，root的值为p<del>total</del>，更新和采样的时间复杂度为O（logN<del>tree</del>），其中N<del>tree</del>是求和树中节点的数量。</p></li><li><p>超参数设置</p><p>ξ：= 0.01，β<del>0</del>：= 0.6，β<del>1</del>：= 0.4，γ：= 0.99，ϕ：= 0.6，η<del>π</del>：= 0.001，η<del>Q</del>：  = 0.01，τ：= 0.01，N = 64。</p></li></ul></li></ul></li></ul><h1 id="5-Performance-Evaluation"><a href="#5-Performance-Evaluation" class="headerlink" title="5. Performance Evaluation"></a>5. Performance Evaluation</h1><ul><li><p><strong>Testbed</strong></p><p>ns-3, Tensorflow, with topo of NSFNET[23] &amp; ARPANET[1] &amp; 网络拓扑生成器BRITE [19]随机生成了一个具有20个节点和80个链接的网络拓扑</p></li><li><p>实验设置</p><p>对于每种网络拓扑，我们分配 <strong><u>K = 20 </u>**个通信会话，每个会话都有随机选择的源节点和目标节点。 对于每个通信会话，我们选择3条最短路径（就跳数而言）作为其候选路径。 每个链接的容量设置为</strong><u>100Mbps</u><strong>。 数据包到达每个通信会话的源节点（即流量需求）遵循泊松过程（请注意，数据包到达中间节点可能不遵循泊松过程），</strong><u>其平均值均匀地分布在一个20Mbps大小的窗口内</u><strong>。 在我们的实验中，我们最初将窗口设置为[0，20] Mbps，然后通过以每次运行5Mbps的步长滑动窗口来增加流量需求。 我们为效用函数设置</strong>α：= 1<strong>和</strong>σ：= 1**以平衡吞吐量，延迟和公平性，即</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/05/005550-301559.png" alt="image-20201105005550050"></p></li></ul><ul><li><p><strong>Baselines</strong></p><ul><li><p>最短路径（SP）：每个通信会话都使用最短路径来传递其所有数据包。</p></li><li><p>负载平衡（LB）：每个通信会话均将其流量负载平均分配给所有候选路径。</p></li><li><p>网络实用程序最大化（NUM）：它通过解决凸编程问题Ⅳ中给出的NUM-TE来获得TE解决方案。</p></li><li><p>DDPG：为公平起见，我们在保持其他设置（例如状态，动作，奖励和DNN）相同的情况下，用DDPG算法[16]替换为DRL-TE算法（算法1）。</p></li></ul></li></ul><ul><li><p><strong>Evaluation指标</strong> &amp; 图释说明</p><ul><li>我们将总的端到端吞吐量，端到端平均数据包延迟和网络（即总）效用值用作比较的性能指标。 </li><li>我们在图5和6中显示了相应的仿真结果。图1-3每个对应于一个网络拓扑。 <ul><li>注意，x轴上的数字是相应交通需求窗口（如上所述）的中心值。 </li></ul></li><li>根据奖励显示了在在线学习过程中三种网络拓扑上两种DRL方法（DDPG和DRL-TE）的性能。 <ul><li>为了便于说明和比较，我们使用常用方法（r-rmin）/（rmax-rmin）归一化和平滑了奖励值（其中r是实际奖励，rmin和rmax是在线学习期间的最小和最大奖励）和著名的**<u>前后过滤算法[11]</u><strong>。 我们在</strong><u>图4</u>**中给出了相应的仿真结果。</li><li>请注意，对于这些结果，使用窗口[10，30] Mbps生成了相应的流量需求。</li></ul></li></ul></li></ul><ul><li><p><strong>结论</strong>    </p><ul><li><p>端到端时延</p><ul><li><p>从图1a，2a和3a中可以看出，与所有四种基线方法相比，DRL-TE显着降低了所有三种拓扑的端到端延迟。 例如，在NSF拓扑上，当流量负载为中等时（即流量需求窗口为[10，30] Mbps），DRL-TE可以将端到端延迟显着降低51.6％，28.6％，74.6％ 与SP，LB，NUM和DDPG相比分别为50.0％和50.0％。 总体而言，DRL-TE分别平均降低了55.4％，47.1％，70.5％和44.2％。 </p></li><li><p>与吞吐量相比，端到端延迟更难处理，因为如上所述，它缺乏能够很好地捕捉其特性和运行时动态的精确数学模型。 看到NUM导致性能相当差是不足为奇的，因为NUM无法明确解决端到端延迟，并且其设计基于网络状态相当稳定或变化缓慢的假设，这可能不是事实。 尽管诸如SP和LB之类的简单解决方案凭直觉可以提供预期的性能，但最短的路径和负载平衡（可以避免拥塞）可以帮助减少延迟。  DRL-TE毫无疑问在端到端延迟方面提供了卓越的性能，因为它不断学习运行时动态，并在DNN的帮助下做出明智的决策以使其达到最佳状态。</p></li></ul></li><li><p>吞吐量</p><p>即使DRLTE的目的（奖励功能）不是简单地最大化端到端吞吐量，它仍然提供令人满意的性能，如图1和2所示。  1b，2b和3b。 与所有其他方法相比，DRL-TE可以持续提高NSFNST拓扑的吞吐量。 在ARPANET和随机拓扑上，DRL-TE给出的吞吐量值可与LB给出的吞吐量值相媲美（负载均衡在整个过程中应产生很高的收益），但仍高于SP和NUM提供的吞吐量值。  </p></li><li><p>效用函数</p><p>如预期的那样，我们可以从图2和3中看到。 从图1c，2c和3c可以看出，DRL-TE在总效用方面胜过所有其他方法，因为其奖励功能已设置为最大化。 平均而言，DRL-TE分别胜过SP，LB，NUM和DDPG 7.7％，9.1％，26.4％和12.6％。 </p></li><li><p>使用并且无论选择哪种网络拓扑，吞吐量和延迟都基本上与流量需求有关（无论什么方法，什么拓扑，throughpout和delay就是会随着流量需求增大而上升，the total utility 通常会下降）。 这很容易理解，因为流量负载越高，通常吞吐量就越高，但是由于等待时间更长甚至拥塞而导致的延迟也就越大，从而降低了总实用性。 此外，吞吐量不会单调增加，当网络变得饱和时，由于拥塞和数据包丢失，更高的流量需求甚至可能导致吞吐量变差。 我们还注意到DRL-TE在流量负载和网络拓扑的变化方面具有鲁棒性，因为在所有流量需求设置和所有拓扑中，DRL-TE的性能始终优于所有其他方法。</p></li><li><p>另外，我们还可以从图1和图2中观察到。  1-3指出DDPG在这些拓扑上效果不佳。 例如，与SP和LB相比，就总效用而言，它通常表现较差，即使它提供了稍微更好的端到端延迟。 为了进一步说明DRL-TE为什么比DDPG更好的原因，我们还显示了图4中三种网络拓扑在在线学习过程中奖励价值的变化。显然，在所有这些网络拓扑中，DRL-TE很快（仅在几个范围内） 数以千计的决策时代）达到了很好的解决方案（给予了很高的回报）； 而DDPG似乎停留在具有较低奖励价值的局部最优解决方案上。 特别是，在随机拓扑上，我们只能看到前几百个世代的微小改进，然后它无法找到更好的解决方案（动作）来提高奖励。 这些结果清楚地证明了所提出的新技术的有效性，包括TE感知探索和基于行为者批评的优先体验重播。</p><blockquote><p>==??==问题就来了，DDPG不能加优先级体验重播么…</p></blockquote></li></ul></li></ul><h1 id="5-Related-Work"><a href="#5-Related-Work" class="headerlink" title="5. Related Work"></a>5. Related Work</h1><p>==关于网络的这一部分要好好看下==</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li><p><input checked="" disabled="" type="checkbox">  我觉得第四节中 一定概率选择$a_{base}$而不是$a_{random}$ 会不会造成随机性的丢失? </p><blockquote><p>不会！ 因为有噪声！而且a<del>base</del>设计的好，是可以覆盖全网的信息的。</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  NUM到底是什么模型？？这里指的应该是 以网络链路利用率最大化 （Network utility maxmization）</p><ul><li>attention！ 这里的U不是utilization，而是utility！e.g. utility function = - utilization</li></ul><blockquote><p>NUM就是一个满足网络状况的线性规划模型，which also includes MCF</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  路由和TE的区别到底是什么</p><blockquote><p>路由就是保持包可达性的；TE的话，正如本文所说，是有一个优化目标的</p></blockquote></li></ul><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><ul><li><p>VLB和ECMP的区别</p></li><li><p>标红的句子根本是看不懂。。问下飞哥</p></li><li><p>Caida数据集</p></li><li><p>看看人家代码里面的split ratio</p></li><li><p>还是那个问题。。这里reward的设立是不是有问题….看下Pensive，人家比较有建模经验</p><blockquote><p>其实我感觉没太大问题了</p></blockquote></li><li><p>evaluation </p><ul><li>结论部分讲端到端时延的其实我没有很懂</li></ul></li></ul><ul><li><p>APRANET</p></li><li><p>经常看到的empirical research/study 是什么意思</p></li></ul><h1 id="inspiration"><a href="#inspiration" class="headerlink" title="inspiration"></a>inspiration</h1><ul><li>不是直接套state-of-art就行</li></ul>]]></content>
    
    <summary type="html">
    
      Infocom&#39;18 【一句话概括这个工作】
    
    </summary>
    
    
      <category term="ExtensiveReading" scheme="https://hexi519.github.io/categories/ExtensiveReading/"/>
    
    
      <category term="Network" scheme="https://hexi519.github.io/tags/Network/"/>
    
      <category term="Reinforcement Learning" scheme="https://hexi519.github.io/tags/Reinforcement-Learning/"/>
    
      <category term="Routing" scheme="https://hexi519.github.io/tags/Routing/"/>
    
  </entry>
  
</feed>
