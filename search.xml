<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>minimizing_congestion_in_general_networks</title>
      <link href="/ExtensiveReading/minimizing-congestion-in-general-networks/"/>
      <url>/ExtensiveReading/minimizing-congestion-in-general-networks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Management-and-Routing-in-General-Networks</title>
      <link href="/ExtensiveReading/Data-Management-and-Routing-in-General-Networks/"/>
      <url>/ExtensiveReading/Data-Management-and-Routing-in-General-Networks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>oblivious_robust_routing</title>
      <link href="/ExtensiveReading/oblivious-robust-routing/"/>
      <url>/ExtensiveReading/oblivious-robust-routing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><p>​    近年来，NTRA-DOMAIN流量工程已广受欢迎-好的流量工程工具可以极大地促进大型运营IP网络的管理和性能[4]，[23]。 流量工程的两个重要组成部分是了解流量，以及配置（和设计）路由协议。 这两个部分是相关的-对流量矩阵（TM）的良好理解和流量动态可以通过更适当的流量路由来更好地利用链路容量[11]，这已广为接受。 从理论上讲，如果TM确切已知，则可以通过求解相应的多商品流问题实例来获得针对它的最佳路由[18]。 通过使用最常用的域内路由协议OSPF / IS-IS，可以根据TM调整链路权重，以经常获得接近最佳的利用率[12]。 不幸的是，测量和预测交通需求是一个虚假的问题[4]，[23]。 在网络的所有链路和出口/入口点上很少进行流量测量，甚至更难估计起点-目的地流量集合。 此外，需求会随着时间的变化而变化-在昼夜周期中，并且由于网络内部或外部的特殊事件或故障而难以预测。 这些问题最近已通过模型和测量工具[7]，[10]，[11]，[17]，[21]解决，这些工具和工具可以推断和估算交通需求。 </p><p>​    但是，似乎最大的希望就是对需求的大概了解，而不一定是非常当前的需求。 <u>即使已知当前需求，它们的动态性质也带来了挑战</u>：一方面，希望路由对当前流量需求有效，因此可以根据需求的变化进行调整。 另一方面，人们希望将更改限制在路由上，因为在系统达到一致状态时，更改可能会由于路径移动和收敛时间而导致服务中断。 对于OSPF / IS-IS路由，在[13]中探讨了这种折衷方案，<u>该技术开发了一种技术，该技术可在TM更改时将更改量限制为OSPF / IS-IS链路权重（确定路由</u>）。因此，良好的系统工程要求设计在一定条件下具有鲁棒性。 也就是说，可以针对各种适用的流量需求几乎最佳地执行路由。 我们的主要目标是探索这种路由的可行性，也就是说，在我们了解流量需求的范围内，了解可获得的路由质量的敏感性。 尽管对这两个基本的交通工程构建块，路由和TM估计都进行了深入研究，但对它们之间的相互作用及其潜在的性能折衷还没有很好地理解。</p><p>​    尽管人们普遍认为了解流量需求对于实现网络的良好利用是必不可少的[4]，[11]，[17]，[23]，但这种信念从未得到过仔细的量化：在对TM performance没有认知的情况下（ 或只有基本认知 (ballpark knowledge) 的情况下），如何设计路由性能？ 也就是说，为了保证良好的利用率，需要对流量需求进行估算的精度如何？ 当流量需求发生变化时，在某些性能保证范围内可容许的变化范围是多少？ 当实际流量需求偏离假定流量需求时，针对特定TM设计的最佳路由将如何执行？ 我们提出的问题涉及受管IP网络的基本限制和折衷-我们希望随着路由协议的发展，这些问题将继续存在-特别是在部署更复杂的OSPF / IS-IS权重调整时[12]，[13]  ，并逐步部署了更灵活的协议，例如多协议标签交换（MPLS）协议[3]，[20]及其未来的后续产品。 </p><p>​    为了寻求这些问题的答案，需要一种方法来衡量给定路由在一定范围的流量需求下的性能，以及一种设计在适当范围的流量需求下可以良好运行的路由的方法。 但是，尽管先前已知的算法可以为特定的TM（或一小部分TM）获得最佳路由，但是它们不能扩展为在广泛的TM上工作。 我们工作的核心是新颖的算法，在此算法的基础上，我们构建了可为一系列可能的TM生成最佳路由的软件。 该路由可以在TM范围内最佳地平衡负载-通过为该TM量身定制的最佳路由，可以最大程度地减小任何TM的最大链路利用率偏离最佳状态的程度。 我们的软件还使我们能够通过在适用的TM范围内计算每个路由获得的最差性能比来比较不同的路由。 <u>我们的评估利用了Rocketfuel项目[16]，[22]和[17]中研究的测试网络提供的各种ISP的地图</u>。 </p><p>​    第II节中描述了数据，第III节中描述了我们的绩效指标和方法，随后在IV节中给出了评估结果。 我们使用的LP模型和相关理论在第V–VI节中进行了开发。 在第七节中，我们对一些简单的网络结构进行了渐进分析，对我们的评估进行了补充。</p><h1 id="2-Data"><a href="#2-Data" class="headerlink" title="2 Data"></a>2 Data</h1><blockquote><p>我们描述了我们使用的测试拓扑。 不幸的是，ISP将其拓扑视为专有信息，直到最近，研究人员不得不为专有信息合成数据作好准备。 因此，结论通常缺乏通用性和可验证性。  Rocketfuel项目[22]最近取得了突破，该项目开发了一套新的测量技术，并发布了各种ISP的代表性集合的公开可用的近似路由器级拓扑。 我们使用启发式方法通过链接容量和流量矩阵来扩充此数据。</p></blockquote><h2 id="2-1-Topologies"><a href="#2-1-Topologies" class="headerlink" title="2.1 Topologies"></a>2.1 Topologies</h2><blockquote><p>我们使用来自Rocketfuel数据集的六个ISP映射，这些映射具有相应的OSPF / IS-IS权重[16]。 然后，我们折叠拓扑，以使“节点”对应于城市，以获取近似PoP到PoP（存在点）拓扑。 我们还包括在[17]中评估的14节点和25link的“第1层PoP到PoP拓扑”（在续篇中标记为“ N-14”）。 表I列出了研究的拓扑。</p></blockquote><p><img src="https://images.weserv.nl/?url=C:%5CUsers%5Chesy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201222102423106.png" alt="image-20201222102423106"></p><blockquote><p>ROCKETFUEL（按名称和名称）和[17]（N-14）网络的拓扑。表中列出了我们称为PoP的路由器和链接的数量，城市和城市间链接的数量。 如果删除了1个连接的组件（“悬挂的树”），则最后两个列（减少的城市和链接）列出了剩余的城市和链接的数量。这些组件不会改变不同路由的相对质量（请参阅LEMMA 5.2）。  ，我们可以根据这些减少的图表更快地执行某些计算</p></blockquote><h1 id="2-2-Capacities"><a href="#2-2-Capacities" class="headerlink" title="2.2 Capacities"></a>2.2 Capacities</h1><blockquote><p>Rocketfuel和[17]中提供的拓扑不包括链接的容量，这是我们研究所必需的。 火箭燃料图确实包含派生的链路OSPF / IS-IS权重[16]，这些权重经计算以匹配观察到的路线。 在没有容量的其他信息的情况下，我们使用权重通过根据容量“转变” Cisco推荐的链路权重默认设置来关联希望兼容的能力：Cisco OSPF权重的默认设置为： 将每个链接的权重设置为与它的容量成反比例[8]。</p></blockquote><h2 id="2-3-TMs"><a href="#2-3-TMs" class="headerlink" title="2.3 TMs"></a>2.3 TMs</h2><blockquote><p>通常无法提供准确的流量矩阵。 它们不仅被ISP视为专有，而且，如引言中所述，很难以合理的准确性获得它们。 因此，我们使用了两个合成交通矩阵族，我们将其称为Bimodal和Gravity TM。 </p></blockquote><ul><li>Bimodal TM：观察到只有一小部分的原产地（OD）对具有非常大的流量[6]。 该模型假设这些流量控制了拥塞点。 随机双峰分布随机抽样一小部分OD对，然后从某个范围内随机地均匀分配一个对。[17]中使用了随机双峰分布（和其他随机分布）。</li><li>Gravity TM：由于在设计网络时会考虑一些流量需求，因此需要针对此类流量需求评估不同路由的性能。 我们使用了类似于[21]中建议的Gravity模型来生成“对应”网络的需求。  [21]中的工作提出了一种从对骨干网流入每个PoP的流量进行测量来推断completeTM的方法。 然后，外推法假设来自某个PoP的流量部分在其他PoP处所吸收的流量与在这些PoP处所吸收的总流量成比例。 根据[21]，这个简单的模型出奇地准确。 由于我们甚至没有这些更严格的流量值，因此我们使用了基于容量的启发式方法，该方法假设每个PoP的流入/流出流量与连接链路的总容量成比例。 然后，我们按照[21]中的引力模型来推算完整的TM。</li></ul><h1 id="3-METRICS-AND-METHODOLOGY"><a href="#3-METRICS-AND-METHODOLOGY" class="headerlink" title="3. METRICS AND METHODOLOGY"></a>3. METRICS AND METHODOLOGY</h1><h2 id="3-1-Routing"><a href="#3-1-Routing" class="headerlink" title="3.1 Routing"></a>3.1 Routing</h2><p>f<del>a,b</del>(i,j)是一个比例</p><h2 id="3-2-Metrics"><a href="#3-2-Metrics" class="headerlink" title="3.2 Metrics"></a>3.2 Metrics</h2><p>在一个TM上的指标</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/22/103552-236240.png" alt="image-20201222103535790"></p><p>最优策略的得分</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/22/103612-632161.png" alt="image-20201222103551573"></p><p>对策略的评分</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/22/103637-593208.png" alt="image-20201222103618239"></p><p>一组TM上的评分</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/22/103650-657500.png" alt="image-20201222103646088"></p><p>​    我们将性能比称为路由的oblivious performance ratio。 oblivious ratio是路由相对于所有TM而言最差的性能比率。 最小遗忘率的路由是最佳遗忘路由，其遗忘率是网络的最佳遗忘率。</p><p>​    为了更好地解释性能比，请注意，在集合或链路容量中TM的缩放比例下，它是不变的。 <u><strong>性能比构成了给定拓扑和一组TM上不同路由的比较度量，但是它并不是不同网络拓扑之间有意义的比较度量，</strong>它是相对于最小可能的最大链路利用率来定义的，但是 最小最大利用率本身随拓扑而变化</u>。 <u>还要注意，可能存在许多可能的最佳路由，并且它们在特定TM上的执行方式可能会有所不同</u>。 第七节提供了一些简单网络上的最佳遗忘性能比的说明性示例和分析。</p><h2 id="3-3-computing-an-optimal-routing"><a href="#3-3-computing-an-optimal-routing" class="headerlink" title="3.3 computing an optimal routing"></a>3.3 computing an optimal routing</h2><p>​    直到最近，已知的工具都可以优化针对给定TM的路由，但是除了特定的高度结构化的拓扑（例如超立方网络）以外，关于如何有效地针对广泛的集合构建最佳路由的了解还很少 需求和最佳性能比率是多少。  Räcke[19]最近的一项突破性工作表明（存在）一个令人惊讶的上限：<u><strong>所有对称网络（即，两个方向上的链路容量相同的网络，通常在大型骨干网中都是这样）存在一个路由whose oblivious ratio是节点的对数的多项式。</strong></u>【一个最坏情况，也就是一个下界被bound住了】Räcke的存在边界触发了针对任何网络（对称与否）的最优遗忘路由[5]的多项式时间构造的发展。 文献[5]中的多项式时间算法基于将椭球算法应用于指数大小的LP模型，因此不适用于大型网络。 我们开发了一种新颖，简单，快速的算法（渐进式和实现式），用于计算基于多项式大小LP公式的最佳遗忘路由（请参见第VI节中的详细信息）。 然后，我们扩展模型以针对OD对要求的范围限制优化路由。 在我们的仿真中，我们使用==CPLEX LP解算器==[9]来解决这些LP（也可以应用其他公共领域LP解算器）。</p><h2 id="3-4-Limitations"><a href="#3-4-Limitations" class="headerlink" title="3.4 Limitations"></a>3.4 Limitations</h2><p>​    我们在本节结束时讨论了局限性。 我们的模型和指标无法捕获流量需求与最终实际吞吐量之间的相互作用，而是通过对所有需求的确进行路由而获得的最大链路利用率来比较不同的路由。 这是一个合理的指标，因为利用率越高，数据包丢失和拥塞的可能性就越大。 我们的评估重点是点对点（OD对）需求，而不是点对多点。 点对多点需求通常与大型ISP有关（例如，当有多个对等点指向不同的ISP，因此许多出口点中的任何一个都可以互换使用[11]）。 这种点对点“限制”主要是由于我们数据的局限性，原则上我们的技术和软件可以扩展到涵盖点对多点的需求。 我们针对最大链路利用率和性能比进行了优化。 在特定的实现上下文中，我们的方法可以考虑其他因素（例如，使用MPLS时，除了容量利用率外，可能还需要优化MPLS标签堆栈大小或预配置路径的数量。）。</p><h1 id="4-Experiments-and-results"><a href="#4-Experiments-and-results" class="headerlink" title="4. Experiments and results"></a>4. Experiments and results</h1><p>​    我们要解决的第一个问题是，在不了解流量需求的情况下，在我们的测试网络上可获得的最佳性能比保证是什么？ 表II列出了三种不同路由的遗忘性能比：最佳遗忘路由（使用6-C节中的LP公式计算）和另外两个自然路由-OSPF路由（使用数据集中提供的权重），以及 Gravity TM的最佳路由（通过求解多商品流LP计算）。 每个给定路由的性能比是使用第6-A节中的“slave 属LP”公式计算得出的。 评估的拓扑上的最佳遗忘性能比范围为1.425-1.972，这意味着这些网络具有的路由可确保在任何TM上具有最大链路利用率，最大可达最大表利用率的43％-97％。 为此TM量身定制的可能路由。 评估的其他两个路由的遗忘率明显更差（2-3位），这意味着在某些TM上，它们与定制的最佳路由相差很远。 这些差距表明，在不使用我们的优化工具的情况下，不可能以临时的方式获得接近最佳的遗忘性能比。 </p><p>​    最大利用率的43％–97％（最坏的情况）开销对于正在运行的ISP而言是微不足道的-但是，好消息是，即使不了解流量需求也可以获得这样的保证。 然而，幸运的是，尽管通常很难获得TM的准确的当前估算值，但有关TM的信息还是很多的。  TM可以在某个已知范围内变化，或者可以估计到某个已知精度内。 在这种情况下，我们希望对处于一定范围内的所有TM提供性能保证。 我们要研究的下一个问题是可达到的性能比对已知TM的“误差范围”的敏感性。  （请注意，随着我们扩展针对其计算性能比率的TM集合，该比率只能增加。）</p><ul><li><p>一些定义</p><p>error margin $\omega$</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20201222110046821.png" alt="image-20201222110046821" style="zoom: 80%;" /></li></ul><h1 id="5-basic-properties"><a href="#5-basic-properties" class="headerlink" title="5. basic properties"></a>5. basic properties</h1><p>​    我们建立一些基本属性。 我们将基本TM的最佳路由的性能作为余量的函数进行限制，并建立一些属性以减少实例所需的LP模型的大小。</p><h2 id="5-1-Performance-Deterioration-as-a-Function-of-Margin"><a href="#5-1-Performance-Deterioration-as-a-Function-of-Margin" class="headerlink" title="5.1 Performance Deterioration as a Function of Margin"></a>5.1 Performance Deterioration as a Function of Margin</h2><ul><li>Lemma 5.1</li></ul><p><img src="https://images.weserv.nl/?url=C:%5CUsers%5Chesy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201222111530208.png" alt="image-20201222111530208"></p><p>这是渐近严格的，也就是说，存在无限的实例家族，其中</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/22/111544-931477.png" alt="image-20201222111522288"></p><h2 id="5-2-Reducing-the-Problem-Size"><a href="#5-2-Reducing-the-Problem-Size" class="headerlink" title="5.2  Reducing the Problem Size"></a>5.2  Reducing the Problem Size</h2><p>​    以下引理表明，出于计算性能比率的目的，我们可以“factor out”网络中无法实现路径diversity的部分（因此，所有路由都将执行相同的操作。）。我们使用此引理来减小输入拓扑的大小。</p><ul><li><p>引理5.2：移除degree-one的节点不会影响网络的oblivious ratio。 同样，它不会影响任何一组TM的最佳性能比。 </p><blockquote><p>引理2是以下引理的推论。</p></blockquote></li><li><p>引理5.3：网络的最佳遗忘率可以通过将网络划分为2个边缘连接的组件，并在这些组件上获取最大的遗忘率来计算。 </p><p>​    证明：如果网络不是2边缘连接的，则可以将其划分为两个非空组件，并通过和边缘连接。 很容易看出，的最佳遗忘率至少是和的最大最佳遗忘率的比：对于仅在两个都存在的OD对上具有正需求的TM所获得的最佳性能比on分别 位于）等于（分别为）的最佳遗忘率。 要看到这一点，请注意所有离开/进入的流都必须经过边缘，因此将需求内部路由到边缘并流出边缘永远没有优势，因为该流将必须在同一边缘上返回并形成一个 流周期（对称参数表示）。 的最佳遗忘率至少是这些受限制的TM集合的最佳性能比率。</p><hr><p>​    以下引理指出，对称TM上具有对称定向链路的网络的最佳遗忘率（即，两个方向上的链路容量均相等）与通过替换每个集合而得出的无向网络的遗忘率相同 由具有相同容量的单个无向链接组成的有向链接。</p><p>这个引理意味着无向图的已知边界会carry out到“real” backbone网络（链接是有向的和对称的）。 此引理还可用于减少LP模型的大小。</p></li><li><p>引理5.4：考虑一个无向网络G，以及一个由其衍生的直接网络G^’^，方法是用两个反平行弧替换每条边e，其容量与e相同。  </p><ul><li>G^’^具有对称的最佳遗忘路由。</li><li>（在所有TM上）的最佳遗忘率等于在所有对称TM上的最佳性能率。 此外，的最佳遗忘路由对应于对称TM的最佳路由。<br>   证明：考虑对称有向网络和路由。 我们推导了一个对称路由，其最多具有与相同的遗忘性能比。 设为通过反转流向和OD对获得的“反向”路由。</li></ul></li></ul><blockquote><p>我对这条引理的感觉就是  这是在证明 现实中backbone network (which 通常是双向对称的)的最佳oblivious routing可以通过这种方法降低计算复杂度</p></blockquote><p>可以将引理概括为相对于对称的任何TM子集保持最佳性能比。 一个有趣的问题涉及定向对称网络上所有TM的最佳性能比与对称TM上的最佳性能比之间的关系。 <u><strong>不难看出前者至少是后者的，但最多是后者的两倍</strong></u>。 实际上，任何对称路由都使得其在常规TM上的性能比率最多是其在对称TM上的性能比率的两倍。 <strong><u>有趣的是，该比率是否以及何时可以接近2。</u></strong></p><h1 id="6-LP-models"><a href="#6-LP-models" class="headerlink" title="6. LP models"></a>6. LP models</h1><blockquote><p>首先，我们回顾一下结果[5]，该结果表明可以在网络大小的多项式时间内计算出网络的最优遗忘路由（和遗忘率）。然后，我们开发了一个简化的LP模型，该模型可以实现更快的运行时间 ，并修改此模型以处理OD对要求的范围限制。</p></blockquote><p>A. The LP Model of [5]</p><h1 id="1-questions"><a href="#1-questions" class="headerlink" title="-1. questions"></a>-1. questions</h1><ul><li>CPLEX LP solver是什么<ul><li>常用的功能</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deeprm</title>
      <link href="/PaperReading/deeprm/"/>
      <url>/PaperReading/deeprm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>方案1：</p><p>一共有j个执行器， 输出的是j维的向量，每个的值就是</p><p>一般是25个node的spark</p><p>状态空间实在是太大了 –》指数级</p><p>方案2：</p><p>每一个执行器执行完之后，就输出一个（从空余的task中选择的）可执行的task</p><p>方案3：<br>输出二维向量 &lt;v ,l&gt;  ( v是node ， l是资源限制 )</p><blockquote><p>==会有很多等价决策 ？？== ，比如说 l分配的比当前的</p></blockquote><p>？ 如果 l 比较大，怎么砍</p><p>v<del>1</del>,v<del>2</del>,v<del>3</del>,v<del>i</del> 下一个要执行的task </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>problemList</title>
      <link href="/Algorithm/problemList/"/>
      <url>/Algorithm/problemList/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="质数相关"><a href="#质数相关" class="headerlink" title="质数相关"></a>质数相关</h1><ul><li><ol start="204"><li><p>计数质数</p><p>统计所有小于非负整数 <em><code>n</code></em> 的质数的数量。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVE3NDExRTdTdT9mcm9tPXNlYXJjaCZzZWlkPTU4NDM5NTE4NzU2MTc4ODU3Mjc=">优化 : 每次从x**2开始筛<i class="fa fa-external-link-alt"></i></span></p></li></ol></li><li><ol start="264"><li><p>丑数 II</p><p>丑数就是质因数只包含 <code>2, 3, 5</code> 的正整数。</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gurobi</title>
      <link href="/Codes/Gurobi/"/>
      <url>/Codes/Gurobi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li><p>python的扩展对象 TupleList TupleDict  更加高效</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/095006-189335.png" alt="image-20201209095006228" style="zoom:67%;" /><pre><code>&gt; 有高效的筛选API，而传统的python对象，就只能通过循环</code></pre><ul><li><p>TupleList快速筛选</p><p>select(‘key’,’*’)</p><p>TupleDict ( gurobi变量一般都是这个 )</p><p>select sum prod </p><p>​    prod其实是逐元素相乘</p></li></ul></li></ul><pre><code>Multidict&lt;img src=&quot;https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/095353-622995.png&quot; alt=&quot;image-20201209095343645&quot; style=&quot;zoom:67%;&quot; /&gt;</code></pre><ul><li><p>创建list  列表解析</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/112600-482003.png" alt="image-20201209095423990"></p></li><li><p>quicksum</p><p><img src="https://images.weserv.nl/?url=C:%5CUsers%5Chesy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201209112559171.png" alt="image-20201209112559171"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pythonComplexity&amp;DataStructure</title>
      <link href="/Algorithm/pythonComplexity/"/>
      <url>/Algorithm/pythonComplexity/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li><p>refer</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hOGZhM2QzMWFhNDA=">python常用操作复杂度<i class="fa fa-external-link-alt"></i></span></p></li></ul><hr><h1 id="常用操作的基本复杂度"><a href="#常用操作的基本复杂度" class="headerlink" title="常用操作的基本复杂度"></a>常用操作的基本复杂度</h1><p>很多时候我以为python会优化的…结果居然没有优化…</p><ul><li><p>list</p><p>list.index()    O(n)</p><p>in  O(n)</p></li><li><p>set</p><p>in  最差O(n)，平均情况下是O(1)</p></li><li><p>dict</p><blockquote><p>其实python中的dict就是一个哈希表的实现。</p><p>哈希表最差情况下查找是O(n) ,但是满足一定的假设，可以认为其平均性能是O(1)</p></blockquote><ul><li>插入、访问、清空、删除  都是O(1)</li></ul></li></ul><ul><li>OJ tips<ul><li>一般来说时间复杂度是O(1e9) , 空间复杂度不要超过O(1e7)</li></ul></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>其实API更像是list</p><ul><li><p>pop( ) , popleft( )   –&gt; return ele</p></li><li><p>append( ) ,appendleft( )</p></li><li><p>extend( ) ,extendleft( )</p></li></ul><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><ul><li>add()</li><li>pop()</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dpSummary</title>
      <link href="/Algorithm/dpProblemsList/"/>
      <url>/Algorithm/dpProblemsList/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h1><ul><li><p>买卖股票的最佳时机系列</p><ul><li><p>Ⅰ 121</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay9zb2x1dGlvbi9jLWxpLXlvbmctc2hhby1iaW5nLXdlaS1odS15aS1nZS1kYW4tZGlhby16aGFuLXR1LS8=">单调栈的题解以及系列题目<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>单调栈的应用场景 <strong>当你需要高效率查询某个位置左右两侧比他大（或小）的数的位置的时候</strong></p></blockquote></li><li><p><input disabled="" type="checkbox">  似乎也用双指针来解决这个问题</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay9zb2x1dGlvbi9ndS1waWFvLXdlbi10aS1weXRob24zLWMtYnktejFtLw==">这个题解<i class="fa fa-external-link-alt"></i></span>真的很不错</p><blockquote><p>本题最妙的方法 其实是 dp思想的优化</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vdS96MW0v">腐烂的橘子<i class="fa fa-external-link-alt"></i></span>似乎对动归的理解比较深，有时间可以看看他的系列</p><pre><code>* [ ] [背包的理解](https://leetcode-cn.com/problems/coin-lcci/solution/bei-bao-jiu-jiang-ge-ren-yi-jian-da-jia-fen-xiang-/)</code></pre></li><li><p><a href="">123 带冷冻期的股票交易</a></p></li></ul></li></ul></li><li><p>Ⅱ 122</p><ul><li><input disabled="" type="checkbox"> 这个<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay1paS9zb2x1dGlvbi90YW4teGluLXN1YW4tZmEtYnktbGl3ZWl3ZWkxNDE5LTIv">精选题解<i class="fa fa-external-link-alt"></i></span>给出了股票交易的一系列算法</li></ul></li><li><p>Ⅲ 123</p><ul><li><p><input disabled="" type="checkbox">  我想写成k在第一维度，day在第二维度的，更像是背包/阶段划分的思想</p></li><li><p><input disabled="" type="checkbox">  有人说就是个背包，其实我觉得就是最后的形式上比较像而已，没有必要强行联想…</p><p>不过可以看下人家怎么理解背包的…2333</p></li><li><p>压缩要倒着写，自己写的时候要注意下</p><ul><li><p><input disabled="" type="checkbox">  但是<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay1pdi9zb2x1dGlvbi96aHVhbmctdGFpLXlhLXN1by1zaGktZ3Vhbi15dS1rc2hpLWZvdS1kYW8teHUteWFvLS8=">这篇<i class="fa fa-external-link-alt"></i></span>分析了为什么可以正序</p><blockquote><p>“然计算过程中的一个变量值不同，但这一个值的差异并不会影响最终结果” 有点意思</p></blockquote></li></ul></li><li><p>需要注意初始化，尤其是下面的题目，K&gt;=N/2的情况要注意</p></li></ul></li><li><p>Ⅳ 188</p><ul><li><p>不停看到有人用哨兵/N指针的思路…看看呢</p></li><li><p>309 含冷冻期的买卖</p></li><li><p>714 含手续费的买卖</p></li></ul></li></ul><ul><li><p><strong>打家劫舍系列</strong></p><ul><li><p>打家劫舍Ⅰ</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植:最基础的解法<i class="fa fa-external-link-alt"></i></span>:  dp[stage][0/1] &amp; dp[i]代表偷了前i家，且一定偷第i家的(解法复杂) </p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyL3NvbHV0aW9uL2RhLWppYS1qaWUtc2hlLWRvbmctdGFpLWd1aS1odWEtamllLWdvdS1odWEtc2ktbHUtLw==">Krahets：进阶版<i class="fa fa-external-link-alt"></i></span> 虽然想起来比较难，但是时空复杂度都比较低 </p><p>dp[i]代表偷前i家的最大值，dp[i] = max( dp[i-1],dp[i-2]+nums[i] )</p><blockquote><ul><li><input disabled="" type="checkbox"> ==Krahet的题解都不错，有空可以都看看==</li></ul></blockquote></li><li><p>总结的经验就是：</p><p>像这种隔着选的问题，虽然最naive(其实也不很naive 233)的解法是要将当前阶段的决策融入状态中标明的( dp[stage][0/1] )，但其实只有两种选择的情况下，不标明也可以233…</p><p>但我个人的建议还是要标明…因为只有在 只有两种选择的情况下才可以进化成Krahet的形式。如果选择多了的话，其实Krahet的方式不是通用的。</p></li></ul></li><li><p>打家劫舍Ⅱ</p><p>化解为两个单排，问题是：存不存在两个单排的最优解都是没有取到两端的（也就是 optimal[:-1]的解 不包括num[0] ， optimal[1:]的解不包括num[-1]，所以其实第一个和最后一个都没取 ）</p><p>或者另一个思路挺好：第一个和最后一个不能共存，所以就是两种情况的最大值：</p><ul><li><p>可以取第一个，那么最后一个肯定不能取</p><p>把最后一个数设置为0，然后对整个数组进行’打家劫舍Ⅰ’的运算。因为最后一个设置为0，所以就相当于没有取（就算被选中了，也可以删去）。–》那么其实最优解 与nums[:-1]得到的最优解是一样的，所以<u>对nums[:-1]的部分数组进行’打家劫舍Ⅰ’的运算</u>即可。</p><blockquote><p>至于最优解中到底包不包含第一个，其实都可以。我们是要防止 万一最优解中有第一个的情况，此时最后一个坚决不能取。</p></blockquote><blockquote><p>那有没有可能最优解中，没取第一个（取了第二个），也没取最后一个nums[:-1]中的最后一个（也就是原序列的倒数第二个），那么此时完全可以取原序列中的最后一个，且不会产生冲突。【注意，这种情况就属于下面的情况里面包含了】</p></blockquote></li></ul><ul><li><p>一定不取第一个，但可以取最后一个</p><p>把第一个数设置为0，然后对整个数组进行’打家劫舍Ⅰ’的运算。因为第一个一个设置为0，所以就相当于没有取（就算被选中了，也可以删去）。–》那么其实最优解 与nums[1:]得到的最优解是一样的，所以<u>对nums[1:]的部分数组进行’打家劫舍Ⅰ’的运算</u>即可。</p></li><li><p>如果合并后的最优解是头尾都没选，那就说明 着实不需要这两个2333</p></li></ul></li><li><p>打家劫舍Ⅲ  【树形dp】==！！没做完&amp;整理==</p></li></ul></li></ul><ul><li><p>403Frog Jump 青蛙过河</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZnJvZy1qdW1wL3NvbHV0aW9uL3Fpbmctd2EtZ3VvLWhlLWJ5LWxlZXRjb2RlLw==">官方讲解<i class="fa fa-external-link-alt"></i></span>还是很靠谱的！思路从易到难</p><ul><li>动态规划+哈希表优化</li><li>可行性问题，而不是求最优解问题</li></ul></blockquote><p>​    最简单的能想到的就是 dp[stone][action]，其中stone和action都是 [1:max(stones)] , 因为我们在某个stone处，其实我们也不知道前面一步具体是多少。这个的问题是，直接out of memory。把dp矩阵打印出来也可以发现大部分都是False，which means是稀疏矩阵。也就是说我们的阶段和状态定义的不好。</p><blockquote><p>太可怕了，这个一开始的想法也太愚蠢了吧…</p></blockquote><p>​    我们的阶段实际上就只有stones数组里面的几个数值，并不是连续值，所以阶段就是[stone in stones]。紧接着就是action的设计考量：</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhX2thb19sYS9hcnRpY2xlL2RldGFpbHMvMTA1MTc2MDY1">想法1<i class="fa fa-external-link-alt"></i></span></p><p>​    action实际上不会超过1100（每步只会增加1，一共最多输入1100个数，还包括0）。但这个想法就是有点浪费空间，因为还是很多action是取不到的。。 但这里的更新方式就比较值得玩味了，是</p><p><code>for i in range(len(stones)): for j in range(len(i)+1)</code></p><p>, 而不是常规的</p><figure class="highlight plain"><figcaption><span>i in range(len(stones)): for j in range(action_lens)```,</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    所以就比较难想。但是如果按照常规的for循环更新，就会设计到查找的优化。下文会体现。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  * 想法2</span><br><span class="line"></span><br><span class="line">    ​    一个地方只能从前面的某个石子跳过来，which means也不是连续整数值可选，所以其实也只有O(num(stones))的可选项。所以又回到打家劫舍的问题的里面去了： 前i个stone，所以设计为dp\[stone][stone]表示的就是从stone_idx2跳到stone_idx1是否可行。如下，但是每次状态转移，需要搜索stones的list( O(n) )，最后就是**&lt;u&gt;O(n^3)&lt;&#x2F;u&gt;**的复杂度了--&gt; O(10\^9)直接超时。（可以用一些小trick优化到O(n^2）（[version2](https:&#x2F;&#x2F;github.com&#x2F;hexi519&#x2F;leetcode_prac&#x2F;blob&#x2F;666e94e8c76107980729f0b23a9e621f77671dfb&#x2F;403FrogJump.py#L39)）,但可以看到由于常数项比较大，还是跟下面常用方法2，也就是version3差了不少。)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  **&lt;u&gt;改进思路： 降低查找的复杂度&lt;&#x2F;u&gt;**</span><br><span class="line"></span><br><span class="line">  * [ ] [常用方法1](https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;frog-jump&#x2F;discuss&#x2F;223586&#x2F;Python-solution)：二分搜索，**&lt;u&gt;O(n^3) --&gt; O(n^2*logn)&lt;&#x2F;u&gt;**</span><br><span class="line"></span><br><span class="line">  * [常用方法2](https:&#x2F;&#x2F;github.com&#x2F;hexi519&#x2F;leetcode_prac&#x2F;blob&#x2F;666e94e8c76107980729f0b23a9e621f77671dfb&#x2F;403FrogJump.py#L65)：使用额外的、低查找开销的数据结构存储经常要查找的东西。这里使用hashMap存储可用的action, 所以每次就不是搜数组，而是搜一个集合，且由于只存前一步可达的，也就是有效的action，所以相当于剪了很多枝。O(n\^3)--&gt;O(n^2)，且前面的常熟会比较低</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;区间dp？？&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">* [413 等差数列划分题解](https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;arithmetic-slices&#x2F;solution&#x2F;dong-tai-gui-hua-by-dream_day-2&#x2F;)  这个虽然不是精选，但是感觉还不错</span><br><span class="line"></span><br><span class="line">  &gt; 以A[i]结尾的子等差序&gt;列的**头指针位置**就比以A[i-1]结尾的子等差序列的**头指针位置**的**选择多一位**，这样也就dp[i] &#x3D; 1 + dp[i-1]</span><br><span class="line"></span><br><span class="line">* [x] &#x3D;&#x3D;446 等差数列划分2&#x3D;&#x3D;  (做是做完了，题目也理解完了，但是感觉很生硬，后续还要复盘一遍)</span><br><span class="line"></span><br><span class="line">  * [这个对为什么用hash Table 讲得很到位](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;grandyang&#x2F;p&#x2F;6057934.html)</span><br><span class="line"></span><br><span class="line">  * 什么时候用hash table来优化...就是一个状态跟之前的稀疏状态集有关联的时候 用于优化存储</span><br><span class="line">  * 经验法则就是：处理连续的子问题的时候，要找O(n)的解； 处理非连续的子问题的时候，要找O(n^2^)的解</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">**&lt;u&gt;二维动态规划&lt;&#x2F;u&gt;**</span><br><span class="line"></span><br><span class="line">* [x] 64. Minimum Path Sum (Medium) </span><br><span class="line"></span><br><span class="line">* [x] 542. 01 Matrix (Medium)  求出每个1距离最近的0的距离长度</span><br><span class="line"></span><br><span class="line">  * 动归的思路是可以，[官方题解](https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;01-matrix&#x2F;solution&#x2F;01ju-zhen-by-leetcode-solution&#x2F;)给出的一个insight就是：矩阵上某个点的信息传播，可以只从左上方和右下方进行传播。</span><br><span class="line">  * 但我觉得这里，官方题解给的bfs思路更好理解一些...</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">* [x] 221. [最大正方形](https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;maximal-square&#x2F;) &amp; 1277[统计全为 1 的正方形子矩阵](https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;count-square-submatrices-with-all-ones&#x2F;)</span><br><span class="line"></span><br><span class="line">  二维的，跟矩阵有关的，都是dp\[i][j] 表示(i,j)为一个范围的边界点的一个值（这里就是以(i,j)为右下角的矩阵的最大边长）。</span><br><span class="line"></span><br><span class="line">  至于为什么是右下角而不是左上角或者其他角，其实都可以，选右下角主要是为了可以方便矩阵从第一行第一个，往右、往下遍历，这个比较符合人类的直觉。</span><br><span class="line"></span><br><span class="line">  * 一次递归要用到左边,上面,左上角的信息,可以用两个一维数组压缩空间,还可以用一个一维+两个临时变量进行压缩</span><br><span class="line"></span><br><span class="line">    * [ ] 就是221不知道为啥越压缩,时空性能越差....    </span><br><span class="line">      * [ ] 先看下[人家](https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;count-square-submatrices-with-all-ones&#x2F;discuss&#x2F;643429&#x2F;Python-DP-Solution-%2B-Thinking-Process-Diagrams-(O(mn)-runtime-O(1)-space)怎么做性能优化的吧...说不定是我优化的方式错了...</span><br><span class="line"></span><br><span class="line">  * 至于为什么这么递推,可以看下[这个题解](https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;count-square-submatrices-with-all-ones&#x2F;solution&#x2F;tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-2&#x2F;)的简单证明</span><br><span class="line"></span><br><span class="line">  * 1277的思路我觉得看[这个讲解](https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;count-square-submatrices-with-all-ones&#x2F;solution&#x2F;tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-f&#x2F;)更靠谱...</span><br><span class="line"></span><br><span class="line">    &gt; $\underset&#123;i&#125;&#123;\sum&#125;$宽度为 i 的正方形的个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 84</span><br><span class="line"></span><br><span class="line">* 85</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 小总结</span><br><span class="line">  * 一般的递归就是考虑左边、上面、左上，再难一点就是从多个角度传递消息（目前221可以看出来从左上和右下两个角度传递消息就差不多了），但这种实际上也不是很好想，所以可以退而求其次：</span><br><span class="line">  * 其实矩阵也是一种规整的图，用搜索的思想也很不错</span><br><span class="line">    * 如果想到是的dfs，大概率就是一个比较差的暴力，想办法剪枝 或者 进化&#x2F;优化到dp</span><br><span class="line">    * 可以往bfs想，一般都还不错 ( e.g.1277 )</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**&lt;u&gt;分割类问题&lt;&#x2F;u&gt;**</span><br><span class="line"></span><br><span class="line">* 279 perfect squares</span><br><span class="line"></span><br><span class="line">  * 动归</span><br><span class="line"></span><br><span class="line">    其实我觉得就是一个多重背包，大家讲得那么复杂...标答和[我的解法](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hexi519&#x2F;leetcode_prac&#x2F;master&#x2F;279PerfectSquares.py)实际上就差别就在于内外循环的顺序，但我觉得我的更好用些...</span><br><span class="line"></span><br><span class="line">    时空复杂度O( $n*\sqrt&#123;n&#125;$ ) 和 O(n) </span><br><span class="line"></span><br><span class="line">  * [ ] ~~这个的贪心的证明没有理解~~ 【不想学贪心了...】大部分还要证明...太烦了...</span><br><span class="line"></span><br><span class="line">  * 搜索</span><br><span class="line"></span><br><span class="line">    ![image-20201215205651863](https:&#x2F;&#x2F;gitee.com&#x2F;HesyH&#x2F;Image-Hosting&#x2F;raw&#x2F;master&#x2F;image4typora&#x2F;202012&#x2F;15&#x2F;205858-894216.png)</span><br><span class="line"></span><br><span class="line">    &gt; 平时搜索练的少，但其实万物皆可搜索，所以后面做动归最好也跟上搜索的解法把... [这次](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hexi519&#x2F;leetcode_prac&#x2F;master&#x2F;279PerfectSquares.py)写上了</span><br><span class="line"></span><br><span class="line">    时空复杂度为O( $\sqrt&#123;n&#125;^h$ ) 和O(n) 这里h 不好确定，因为是树高，也就是最小需要的组合数，which我们也不好确定...    </span><br><span class="line"></span><br><span class="line">    看到b站题解里面说：&#x3D;&#x3D;如果n超过10^6^,那么空间就开不下了...这个时候别无他法就只能搜索了&#x3D;&#x3D;</span><br><span class="line">    </span><br><span class="line">    有一个在同一层的剪枝优化[]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;都是逆着的，要想想看为什么是逆着的  ask魏知宇？&#x3D;&#x3D;  </span><br><span class="line"></span><br><span class="line">* 字符串上的文章</span><br><span class="line"></span><br><span class="line">  * [ ] 91 解码方法</span><br><span class="line"></span><br><span class="line">    * [ ] 还有hard的95 解码方式Ⅱ还没做...</span><br><span class="line"></span><br><span class="line">  * [ ] 139 单词拆分</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**&lt;u&gt;子序列问题&lt;&#x2F;u&gt;**</span><br><span class="line"></span><br><span class="line">&gt; 因为子序列类型的问题，穷举出所有可能的结果都不容易，而动态规划算法做的就是穷举 + 剪枝，它俩天生一对儿。所以可以说只要涉及子序列问题，十有八九都需要动态规划来解决，往这方面考虑就对了。</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">* 最长上升子序列</span><br><span class="line">  * [红豆薏米的b站视频](https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV17t411E7Xn&#x2F;?spm_id_from&#x3D;333.788.videocard.0)把O(nlogn)的思想解释的很好</span><br><span class="line">  </span><br><span class="line">    最重要的是二分搜索的实现，可以参考[labuladong的小抄](https://images.weserv.nl/?url=https:&#x2F;&#x2F;labuladong.gitbook.io&#x2F;algo&#x2F;di-ling-zhang-bi-du-xi-lie&#x2F;er-fen-cha-zhao-xiang-jie)【着实不错】,要搞清楚你是要查找某个值还是查找某个值的左&#x2F;右边界就可以，在这里&lt;u&gt;查找的是第一个比自己的大的元素的位置（如果已有跟自己相同的元素就什么也不更新就退出）&lt;&#x2F;u&gt;。</span><br><span class="line">  </span><br><span class="line">    &gt; &#x3D;&#x3D;全部用左闭右闭的形式比较方便记忆&#x3D;&#x3D;</span><br><span class="line">  </span><br><span class="line">    * 变体就是最长不减子序列，这个变体也是找第一个比自己大的元素的位置（但是如果有跟自己相同的元素，不会立马退出，会继续往上界搜寻）</span><br><span class="line">  </span><br><span class="line">      &#96;&#96;&#96;python</span><br><span class="line">      # 最长上升</span><br><span class="line">      if mid &#x3D;&#x3D; num: break</span><br><span class="line">      # 最长不减</span><br><span class="line">      if mid &#x3D;&#x3D; num: </span><br><span class="line">          left&#x3D;mid+1  # 继续往上界搜</span><br></pre></td></tr></table></figure></li><li><p>值得注意的是，tail数组并不是最长上升子序列！（自己可以举反例想想）</p></li></ul></li></ul><p>最长上升子序列(LISLIS):Longest Increasing Subsequence<br>最长连续序列(LCSLCS):Longest Consecutive Sequence<br>最长连续递增序列(LCISLCIS):Longest Continuous Increasing Subsequence<br>最长公共子序列(LCSLCS):Longest Common Subsequence</p><hr><p><strong><u>背包问题</u></strong></p><p>==dp为什么是NP？==  感觉O(n)就可以验证啊，所以n也是n的多项式是么</p><ul><li><p>416 分割等和子集</p><p>使用布尔数组，然后使用或运算，快了不少</p><p>看到有更快更省的…用bit以及位运算…</p></li></ul><ul><li><p><input disabled="" type="checkbox">  639 划分为k个相等的子集</p><p>搜索的思想…我还不太会…==感觉todo是搜索里面常用的==</p></li></ul><ul><li><p><input disabled="" type="checkbox">  600 不含连续1非负整数【第一遍做有点吃力】</p><p>实际上是数位dp</p><p>去b站上再看看数位dp的模板…</p></li></ul><hr><ul><li>1147段式回文<ul><li><input disabled="" type="checkbox"> 双指针解法</li><li><input disabled="" type="checkbox"> 贪心解法</li></ul></li></ul><ul><li>1235规划兼职工作</li></ul><p>==感觉这两个应该得好好研究下双指针问题再来做做…==</p><hr><p><strong><u>字符串系列</u></strong></p><ul><li><p><input disabled="" type="checkbox">  最长回文子串，但是我只能想到中心扩散的方式咋整… 而且还没实现完</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1wYWxpbmRyb21pYy1zdWJzdHJpbmcvc29sdXRpb24vemhvbmcteGluLWt1by1zYW4tZG9uZy10YWktZ3VpLWh1YS1ieS1saXdlaXdlaTE0MTkv">这个讲解<i class="fa fa-external-link-alt"></i></span>好详细！</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzZDEzNjkxMi9hcnRpY2xlL2RldGFpbHMvNzg5ODc2MjQ=">这个讲解不错<i class="fa fa-external-link-alt"></i></span></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dp总结</title>
      <link href="/Algorithm/dpSummary/"/>
      <url>/Algorithm/dpSummary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="dp总结"><a href="#dp总结" class="headerlink" title="dp总结"></a>dp总结</h1><ul><li><p>初始化是很重要的</p><ul><li>如果是求…  ，  就初始化为0</li><li>如果是求… ， 就初始化为maxInf或者</li></ul></li><li><p><strong><u>阶段和状态</u>**的划分开很重要，都是一个维度。（ 其实这里的stage就是 MDP里面的S<del>1</del>，S<del>2</del>，… , S<del>n</del> , state就是每个stage具体可以取的值 s ）。一般阶段都是有</strong><u>顺序性</u>**隐含在内，是事件发生到末端所要经历的必然阶段，状态是这个阶段可以取到的值。再注意，不要把状态 和 我们要求解的值 混肴了。</p><p>很多时候可能大家以为阶段是状态，但其实不是。阶段和状态共同组成我们dp数组的维度，which will be affected by action and transformed to others。举例：</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植：序列型动态规划<i class="fa fa-external-link-alt"></i></span>中，阶段是房子的位置，状态是这家房子有没有被打劫。(要打劫整条街，我总得一个一个屋子走过去吧，这就是我要完成打劫这件事所必经的阶段)</p></li><li><p>01背包中阶段是当前要选择放进去的第i个物品，状态是当前这个阶段，包里容量的可能的大小。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvMi1rZXlzLWtleWJvYXJkL3NvbHV0aW9uL2RvbmctdGFpLWd1aS1odWEteGlhbmcteGktZmVuLXhpLWppZS1zaGktd2VpLXNoaS15Lw==">只有两个键的键盘<i class="fa fa-external-link-alt"></i></span>中，阶段是当前有几个A。如果你采用主动转移的思路，那么当前的状态就是当前粘贴板上的A有多少位。</p><blockquote><p>dp[i][j] = dp[i - j][j] + 1。注意，这里的解法只是比较naive的，进一步是可以状态压缩的。</p><ul><li><input disabled="" type="checkbox"> ==什么时候可以状态压缩==  应该从式子的转移本身就能看出来</li></ul></blockquote></li><li><p>很多时候我们会发现，一个问题也有很多个刻画方式。比如 <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLWlpL3NvbHV0aW9uL3RvbmcteW9uZy1zaS1sdS10dWFuLW1pZS1kYS1qaWEtamllLXNoZS13ZW4tdGktYnktLw==">打家劫舍：labuladong解法<i class="fa fa-external-link-alt"></i></span>中，dp[i]表示的是，不是<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植<i class="fa fa-external-link-alt"></i></span>大佬讲解中的任意一种：表示到目前为止打劫到的钱的累积金额( 需要第二个维度进行辅助 ) 或者 到目前位置为止，且打劫当前位置，打劫到的钱的累积金额。不过从前往后累积和从后往前累积实际上是差不多的，我只能说，以我的感觉来说”<u><strong>从第i个位置开始，且包括第i个位置</strong></u>“的思路会比较容易理解。(应该会有些场景有区别，目前还没做到相关题目)</p><p>总之，正如<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植<i class="fa fa-external-link-alt"></i></span>所说：</p><blockquote><p>状态设计的时候，<u>也会将序列中的位置作为状态表示的一维</u>。例如 dp[i]，而这一维一般来说可以表示这几种信息：</p><ul><li>第 / 前 i 个位置的答案</li><li>前 i 个位置里，第 i 个位置一定选择的答案</li></ul></blockquote></li></ul></li></ul><blockquote><ul><li><input disabled="" type="checkbox"> **<u>卧槽  ，这里两者存在矛盾哇… 一个说“前xx”的思路的复杂度是O(N^2)</u>**，但labuladong写出来的又没有那么复杂…</li></ul></blockquote><h2 id="dfs和dp的关系"><a href="#dfs和dp的关系" class="headerlink" title="dfs和dp的关系"></a>dfs和dp的关系</h2><ul><li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZnJvZy1qdW1wL3N1Ym1pc3Npb25zLw==">403 frog jump<i class="fa fa-external-link-alt"></i></span></li></ul><h1 id="dp分类"><a href="#dp分类" class="headerlink" title="dp分类"></a>dp分类</h1><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUva1FmUzVzLw==">周植：序列型<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vY2lyY2xlL2FydGljbGUvVkZaRVhBLw==">周植：常见普通题型及状态表示<i class="fa fa-external-link-alt"></i></span>  【内含题目和习题】  <span class="exturl" data-url="aHR0cHM6Ly93bmp4eWsudGVjaC8xMTcuaHRtbA==">周植大佬的博客也不错啊！<i class="fa fa-external-link-alt"></i></span>（还有个DP的intro还没来得及看）</p><ul><li><input disabled="" type="checkbox"> 主动转移和被动转移 目前还没有看明白，在后一个blog里面</li></ul></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVk3NDExTjdCbg==">搜索：犹豫就会败北<i class="fa fa-external-link-alt"></i></span>  万物皆可搜索！</p></li><li><p>线性动规，区域动规，树形动规【打家劫舍Ⅲ】，背包动规【股票交易Ⅳ】四类</p></li></ul><h1 id="刷题时常犯的错误-积累的经验"><a href="#刷题时常犯的错误-积累的经验" class="headerlink" title="刷题时常犯的错误/积累的经验"></a>刷题时常犯的错误/积累的经验</h1><ul><li><p>二维矩阵中常常在初始化结果矩阵的时候, 把行和列搞反,导致有时候正方形的样例可以通过,但是矩形的就不行了</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rowNum,colNum = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">dist = [[<span class="number">20000</span>] * colNum <span class="keyword">for</span> _ <span class="keyword">in</span> range(rowNum)]</span><br></pre></td></tr></table></figure></li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><p>b站<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTQ5NzU4">nat8023<i class="fa fa-external-link-alt"></i></span>大佬讲得挺好</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93bmp4eWsua2VqaS5tb2UvYWxnb3JpdGhtL2FsZ29yaXRobS1hYmMvc2VxdWVuY2UtZHA=">周植的博客<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>序列型和升级型的DP的总结，还列举除了不少题目</p></blockquote></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL2Jsb2cvMDQwOERvZGdlbWluL2RwLWNvbmNlcHRpb25z">Andrewzdm 的博客<i class="fa fa-external-link-alt"></i></span></p><blockquote><ul><li>阶段和状态的设定必须保证全局唯一（MDP），否则就可以合并。</li><li>将决策写入状态中以消除后效性影响。</li><li>提到了主动状态转移和被动状态转移的区别（大部分题目是没有区别的），并用例子进行了时间复杂度分析。</li></ul></blockquote></li><li><p>zzx的分类列表</p><blockquote><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA0OA==">https://www.luogu.org/problemnew/show/P1048<i class="fa fa-external-link-alt"></i></span> 采药（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTczNA==">https://www.luogu.org/problemnew/show/P1734<i class="fa fa-external-link-alt"></i></span> 最大约数和（01背包） 【明天把两种筛法都做一下】</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA0OQ==">https://www.luogu.org/problemnew/show/P1049<i class="fa fa-external-link-alt"></i></span> 装箱问题（01背包）</p></li><li><p>有约束的01背包</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjY2Mw==">https://www.luogu.org/problemnew/show/P2663<i class="fa fa-external-link-alt"></i></span> 越越的组队（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjQzMA==">https://www.luogu.org/problemnew/show/P2430<i class="fa fa-external-link-alt"></i></span> 严酷的训练（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTkyNg==">https://www.luogu.org/problemnew/show/P1926<i class="fa fa-external-link-alt"></i></span> 小书童（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTgwMg==">https://www.luogu.org/problemnew/show/P1802<i class="fa fa-external-link-alt"></i></span> 5倍经验日（01背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTYxNg==">https://www.luogu.org/problemnew/show/P1616<i class="fa fa-external-link-alt"></i></span> 疯狂的采药（完全背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTY3OQ==">https://www.luogu.org/problemnew/show/P1679<i class="fa fa-external-link-alt"></i></span> 神奇的四次方数（完全背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjkxOA==">https://www.luogu.org/problemnew/show/P2918<i class="fa fa-external-link-alt"></i></span> 买干草（完全背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjM0Nw==">https://www.luogu.org/problemnew/show/P2347<i class="fa fa-external-link-alt"></i></span> 砝码称重（多重背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTkxMA==">https://www.luogu.org/problemnew/show/P1910<i class="fa fa-external-link-alt"></i></span> L国的战斗之间谍（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTUwNw==">https://www.luogu.org/problemnew/show/P1507<i class="fa fa-external-link-alt"></i></span> NASA的食物计划（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTUwOQ==">https://www.luogu.org/problemnew/show/P1509<i class="fa fa-external-link-alt"></i></span> 找啊找啊找GF（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTg1NQ==">https://www.luogu.org/problemnew/show/P1855<i class="fa fa-external-link-alt"></i></span> 榨取kkksc03（二维背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTc1Nw==">https://www.luogu.org/problemnew/show/P1757<i class="fa fa-external-link-alt"></i></span> 通天之分组背包（分组背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTMzNg==">https://www.luogu.org/problemnew/show/P1336<i class="fa fa-external-link-alt"></i></span> 最佳课题选择（分组背包）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTIxNg==">https://www.luogu.org/problemnew/show/P1216<i class="fa fa-external-link-alt"></i></span> 数字三角形</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTUwOA==">https://www.luogu.org/problemnew/show/P1508<i class="fa fa-external-link-alt"></i></span> likecloud-吃吃吃</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTExNQ==">https://www.luogu.org/problemnew/show/P1115<i class="fa fa-external-link-alt"></i></span> 最大子段和</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTcxOQ==">https://www.luogu.org/problemnew/show/P1719<i class="fa fa-external-link-alt"></i></span> 最大加权矩形</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMzkwMg==">https://www.luogu.org/problemnew/show/P3902<i class="fa fa-external-link-alt"></i></span> 递增（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjc4Mg==">https://www.luogu.org/problemnew/show/P2782<i class="fa fa-external-link-alt"></i></span> 友好城市（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA5MQ==">https://www.luogu.org/problemnew/show/P1091<i class="fa fa-external-link-alt"></i></span> 合唱队形（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTAyMA==">https://www.luogu.org/problemnew/show/P1020<i class="fa fa-external-link-alt"></i></span> 导弹拦截（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTIzMw==">https://www.luogu.org/problemnew/show/P1233<i class="fa fa-external-link-alt"></i></span> 木棍加工（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjAwOA==">https://www.luogu.org/problemnew/show/P2008<i class="fa fa-external-link-alt"></i></span> 大朋友的数字（LIS）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTU2OQ==">https://www.luogu.org/problemnew/show/P1569<i class="fa fa-external-link-alt"></i></span> 属牛的抗议</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA2Mw==">https://www.luogu.org/problemnew/show/P1063<i class="fa fa-external-link-alt"></i></span> 能量项链（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTg4MA==">https://www.luogu.org/problemnew/show/P1880<i class="fa fa-external-link-alt"></i></span> 石子合并（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjMwOA==">https://www.luogu.org/problemnew/show/P2308<i class="fa fa-external-link-alt"></i></span> 添加括号（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTYyMg==">https://www.luogu.org/problemnew/show/P1622<i class="fa fa-external-link-alt"></i></span> 释放囚犯（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjczNA==">https://www.luogu.org/problemnew/show/P2734<i class="fa fa-external-link-alt"></i></span> 游戏（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTIyMA==">https://www.luogu.org/problemnew/show/P1220<i class="fa fa-external-link-alt"></i></span> 关路灯（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTc5OQ==">https://www.luogu.org/problemnew/show/P1799<i class="fa fa-external-link-alt"></i></span> 数列（区间dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTQ3NA==">https://www.luogu.org/problemnew/show/P1474<i class="fa fa-external-link-alt"></i></span> 货币系统（计数类dp）</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTE5Mg==">https://www.luogu.org/problemnew/show/P1192<i class="fa fa-external-link-alt"></i></span> 台阶问题</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjgwMA==">https://www.luogu.org/problemnew/show/P2800<i class="fa fa-external-link-alt"></i></span> 又上锁妖塔</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjY5Nw==">https://www.luogu.org/problemnew/show/P2697<i class="fa fa-external-link-alt"></i></span> 宝石串</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTE2NA==">https://www.luogu.org/problemnew/show/P1164<i class="fa fa-external-link-alt"></i></span> 小A点菜</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTA1Nw==">https://www.luogu.org/problemnew/show/P1057<i class="fa fa-external-link-alt"></i></span> 传球游戏</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMTAwNg==">https://www.luogu.org/problemnew/show/P1006<i class="fa fa-external-link-alt"></i></span> 传纸条</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3Uub3JnL3Byb2JsZW1uZXcvc2hvdy9QMjE5Ng==">https://www.luogu.org/problemnew/show/P2196<i class="fa fa-external-link-alt"></i></span> 挖地雷</p></li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MeetingNotes1101</title>
      <link href="/MeetingNotes/MeetingNotes1101/"/>
      <url>/MeetingNotes/MeetingNotes1101/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly93eC52emFuLmNvbS9saXZlL3R2Y2hhdC0xNTY1MzUyMTUzP3NoYXJldWlkPTMzNzU0MTY1NCZ2cHJpZD0wJnNoYXJldHN0YW1wPTE2MDM1ODc1NjA4MTkjLw==">视频地址<i class="fa fa-external-link-alt"></i></span></p><h1 id="陈凯-net-4-AI"><a href="#陈凯-net-4-AI" class="headerlink" title="陈凯 net 4 AI"></a>陈凯 net 4 AI</h1><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/163439-988187.png" style="zoom:50%;" /><ul><li><p>compress 传输量 并不能降低尾部传输时间</p><p>当然，平均的时延是会降低</p><p>说明瓶颈不在于传输量</p></li><li><p>丢一定量的数据包并不会影响模型的convergence</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/163348-450748.png" alt="image-20201118161135895" style="zoom:50%;" /><ul><li>那么应该丢哪些包？ 后层的gradient和larger gradient更重要</li></ul></li><li><p>DNN流的特性：跟以前的信息包不一样，前者是一个message包含多个包（包之间存在依赖性），现在是一个包包含多个message（包与包之间关联性不大），所以不用太多去考虑包乱序等事情。</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/163350-390697.png" alt="image-20201118163215817" style="zoom:50%;" /><blockquote><p>至于现在 一个包 包含多个message这个特性是怎么来的，我就没有细究了。</p></blockquote><p>之前的ECMP等负载均衡，就会考虑 perflow的粒度性能就差了，perpacket的粒度还得考虑乱序问题。</p></li></ul><h1 id="李丹-Net-4-AI"><a href="#李丹-Net-4-AI" class="headerlink" title="李丹 Net 4 AI"></a>李丹 Net 4 AI</h1><p>使用==贝叶斯优化==</p>]]></content>
      
      
      <categories>
          
          <category> MeetingNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>recommand-sys-learning</title>
      <link href="/Codes/recommend-sys-learning/"/>
      <url>/Codes/recommend-sys-learning/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly90aWFuY2hpLmFsaXl1bi5jb20vY29tcGV0aXRpb24vZW50cmFuY2UvNTMxODQyL2luZm9ybWF0aW9u">赛题<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9uYnZpZXdlci5qdXB5dGVyLm9yZy9naXRodWIvaGV4aTUxOS90ZWFtLWxlYXJuaW5nLXJzL2Jsb2IvbWFzdGVyL1JlY29tbWFuZE5ld3MvUmVjb21tYW5kLXN5cy5pcHluYg==">myCodes<i class="fa fa-external-link-alt"></i></span> &amp; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleGk1MTkvdGVhbS1sZWFybmluZy1ycy9ibG9iL21hc3Rlci9SZWNvbW1hbmROZXdzL0Jhc2VsaW5lLmlweW5i">Baseline after comments<i class="fa fa-external-link-alt"></i></span></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li><p>数据</p><p><code>sample_submit.csv</code>：提交样例文件，对应50000个用户对5个文件的点击数预测</p><p><code>train_click_log.csv</code>：训练集用户点击日志</p><p><code>testA_click_log.csv</code>：测试集用户点击日志</p><p><code>articles.csv</code>：新闻文章信息数据表</p><p><code>articles_emb.csv</code>：新闻文章embedding<u>向量表示</u></p></li><li><p>指标</p><p>MRR(Mean Reciprocal Rank)，关注top5的预测结果。其中越前面的匹配上了就得分越高（具体可以看下baseline代码里面的讲解</p></li></ul><h1 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h1><p>reduce_mem节省内存，就是尽量降低数据精度</p><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><ul><li>如果是为了获取线上提交结果应该讲测试集中的点击数据合并到总的数据中</li></ul><blockquote><p>没懂这是什么意思</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Recommendation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metro</title>
      <link href="/ExtensiveReading/Route/Metro/"/>
      <url>/ExtensiveReading/Route/Metro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>FRR (fast rerouting</p></li><li><p>reverse path forwarding (RPF)</p></li><li><p>光看related work其实还是不是很明白别人做的是什么</p></li></ul><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    在大型网络中，故障是常见的，而不是例外。 为了向上层应用提供高质量的服务，期望在发生故障时能够快速启动融合备份路径。 在本文中，我们设计了一种基于IP的快速重路由(IP based Fast ReRouting)方案，该方案称为Metro，它可以解决任意单个链路/节点故障且后备路径扩展性低的情况下的流量重路由收敛问题。<br>   当网络中发生故障时，Metro首先指示将受到故障影响的所有网络区域，然后查找一些网桥链接以将受影响的网络区域中的流量排放到不受故障影响的网络区域 。 这样，Metro无需配置隧道，封装或修改数据包，因此易于在当前网络中部署。 大量的仿真表明，Metro可以解决备用路径比最新解决方案短的任意单链路/节点故障，并且Metro中约98％的备份路径延伸与最佳隧道方案相同。</p><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><blockquote><p>​    ISP网络或数据中心网络的网络都遭受无法预测的故障。 发生故障时，一个或多个网络组件（例如节点和链接）将无法传递流量，从而导致大量流量损失[1]，[2]。 此外，这种流量丢失可能给网络顶部运行的应用程序带来较大的响应延迟。 由于当前网络中的许多应用程序都对延迟敏感，因此较大的响应延迟可能会大大降低应用程序性能和用户体验。 因此，在网络故障发生后，需要快速重路由（FRR）方案来快速恢复流量传递。 为了使恢复时间最短，在这项工作中，我们集中于预先计算重新路由路径以应对网络故障的方案。  <u>FRR机制的主要关注点在于如何在效率和有效性这两个重要方面之间做出明智的权衡</u>。 一方面，FRR机制应该简单有效，以至于它几乎没有增加数据平面的开销。 另一方面，它应该达到理想的保护范围。 传统的基于纯IP的FRR机制，例如无环路替代（LFA）[3]和Uturn [4]注重效率，而许多基于隧道的机制则注重有效性。 基于IP的FRR的目标是通过使用预先计算的备用IP下一跳将故障反应时间减少到10毫秒。 在基于隧道的FRR机制中，有一些是通过多协议标签交换（MPLS）隧道实现的，例如RSPV-TE [5]，[6]，而另一些则是通过IP-in-IP隧道，数据包封装或数据包实现的。 标记[7] – [9]。 与FRR本身的实现相比，其相应平台的部署要复杂得多，更不用说由其他操作引起的其他问题了，例如数据包分段和封装。<br>   为了兼顾效率和有效性，在本文中，我们提出了Metro，一种用于处理网络故障的高效流量快速重路由方案。 就我们所知，Metro是第一个无需隧道的FRR机制，可以处理任意单个链路/节点故障而无需修改任何数据包。 与Uturn [4]相似，Metro中的交换机进行反向路径转发（RPF）检查以发出故障信息。 但是，Metro对网络拓扑进行了透彻的分析，以便在Uturn相同情况下提供全面的保护。</p></blockquote><blockquote><p>​    为了勾勒出Metro的核心概念和方法，我们看一下华盛顿特区真正的Metro（图1）的面料特征。 在华盛顿特区的地铁网络中，有许多线路通向中央枢纽站。 还可以找到许多秘密通道，这些通道主要由维护人员用于在线路之间快速行驶。 如果有人沿着其中一条线路步行到枢纽，并且发现地铁隧道被阻塞，则他/她可以通过这些秘密通道到达其他线路，而其他线路的通向枢纽的路径将绕过阻塞的线路。<br>​    Metro遵循地铁架构的相同理念，以实现基于IP的纯FRR。 对于网络中的任何目标，Metro通过分析路由树并在分支之间找到桥梁，Metro将受故障影响的分支上的流重定向到其相邻分支。</p></blockquote><ul><li><p>贡献</p><p>​    我们从理论上证明Metro可以处理任意单链路故障（SLF）和单节点故障（SNF），而无需修改重新路由的数据包。 评估真实世界和人工网络拓扑的方法也证实了这一点。<br>​    评估还表明，Metro通常会找到比其他FRR机制更短的备份路径来重定向受影响的流。<br>​    本文的其余部分安排如下。 第二节介绍FRR的背景。 第三部分简要介绍了Metro设计。 第四，第五和第六部分介绍了设计细节。 第七节对Metro进行了实际和人工拓扑评估。 最终，第八节总结了本文。</p></li></ul><h1 id="2-Background-and-relatede-works"><a href="#2-Background-and-relatede-works" class="headerlink" title="2 Background and relatede works"></a>2 Background and relatede works</h1><h2 id="A-Fast-Rerouting"><a href="#A-Fast-Rerouting" class="headerlink" title="A. Fast Rerouting"></a>A. Fast Rerouting</h2><p>​    当组件故障(链路故障或节点故障)发生在网络中，重新计算恢复方案，刷新路由表并等待路由信息收敛需要几秒钟到几分钟。 在这样的恢复期间，某些数据包可能会由于传递路径不完整或由于将流量转移到绕过故障的链路而导致的临时网络拥塞而丢失。 在高速网络中，即使恢复时间很短，也可能导致巨大的数据包丢失[10]，[11]。 为了减少网络恢复期间的流量损失，FRR旨在将受故障影响的数据包定向到预先计算的备份路径，这些路径在新路由最终收敛之前便已到达目的地[12]，[13]。<br>   反应时间对于FRR至关重要，因此在发生故障时查找备用路径是不切实际的。 转发引擎需要基于预先计算的信息在本地立即对故障做出反应[14]。 对于任何FRR机制，全面保护单个故障非常重要，这包括两个方面：</p><p>​    •对SLF的全面保护：对于网络中的任何SLF，如果故障链路的两端仍然连接，则应始终确定一条备份路径 从其中一个转移到另一个。<br>   •对SNF的全面保护：对于网络中的任何SNF，如果故障节点没有将整个网络分成多个部分，则应始终为通过该故障节点的每条路径找到备份路径。</p><p>​    在设计FRR方案时，除了确保全面保护单个故障外，还应考虑网络延迟，备份路径长度，拥塞级别[14]等。</p>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grdientVisualization</title>
      <link href="/Codes/grdientVisualization/"/>
      <url>/Codes/grdientVisualization/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VLB</title>
      <link href="/ExtensiveReading/Route/VLB/"/>
      <url>/ExtensiveReading/Route/VLB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>全称 valiant load balance ( 这里的Valiant是个人名)</li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><blockquote><p>在许多网络中，流量矩阵要么难以度量和预测，要么随时间变化很大。 在这些情况下，使用Valiant负载平衡（VLB）支持所有可能的流量矩阵是一种有吸引力的选择。 例如，即使由于高水平的聚集而导致Internet主干网中的流量非常平滑，但仍然很难测量。 准确地测量流量矩阵（例如使用NetFlow）太昂贵了，无法一直进行下去，而使用链路测量的标准方法会产生20％或更多的误差。 </p><p>即使可以令人满意地获得当前的流量矩阵，但由于Internet流量增长的不可预测性，将其推断到未来仍充满不确定性。 最后，由于Internet流量是动态的，因此流量矩阵可以随时偏离其正常值，从而可能导致拥塞。 网络看到的流量需求可以由流量矩阵表示，该矩阵表示每个节点向每个其他节点发起流量的速率。 我们说如果网络中的每个链接的流量矩阵所引起的负载小于链接的容量，则网络可以支持流量矩阵。 当网络无法支持提供给它的流量矩阵时，网络中至少一个链路的负载大于其容量。 发生拥塞，缓冲区中的积压积淀在拥塞的链路上，从而导致数据包丢失，增加的延迟以及延迟的高度变化。 理想情况下，我们希望设计一种可以支持各种流量矩阵的网络，以使拥塞很少发生或根本不发生。 </p><p>在本文中，我们讨论了VLB在构建网络中的使用，该网络可以有效地支持不会超额预订任何节点的所有流量矩阵。 我们首先简要地调查了VLB在网络各个方面的广泛使用，并描述了在网络中使用VLB的基本情况。</p></blockquote><ul><li><p>文章结构</p><p>第2.2节将VLB从同质设置扩展到具有任意容量的网络，第2.3节介绍了如何预防和快速恢复VLB网络中的故障，第2.4节建议使用VLB在两个网络之间路由流量。 最后，第2.5节讨论了未来可能的工作。</p></li></ul><h2 id="1-1-wide-use-of-VLB"><a href="#1-1-wide-use-of-VLB" class="headerlink" title="1.1 wide use of VLB"></a>1.1 wide use of VLB</h2><blockquote><p>在1980年代初期，Valiant [19]首次提出了一种通过随机挑选的中间节点到数据包目的地的路由方法。 他表明，<u>在N节点的二元立方网络中，在任何排列流量矩阵的情况下，分布式两阶段随机路由可以在O（log N）时间内以压倒性的概率将每个数据包路由到其目的地。 这是在O（log N）时间内在稀疏网络中路由任意置换的第一个方案</u>。 <strong>从那时起，这种随机路由已被广泛使用，通常称为（VLB），随机负载平衡或两阶段路由</strong>。  VLB具有许多良好的特性。 <strong>它是分散的，每个节点都在本地决策。 这也使该方案可扩展。</strong>  VLB is agonistic to traffic matrix，because <u><strong>randomness erases the traffic pattern ( 我觉得这里的意思是随机性会抵消流量模式 )，and different traffic pattern can result in the same load on the links</strong></u>。 </p><p><u>在发明之后不久，它就被用于其他互连网络中以进行并行通信，以缩短传送时间[1]，并减轻不利的流量模式的影响[13]</u>。 ==还有这种作用…[13]里面提到的omega network又是什么?下面的torus network又是啥…== 近年来，它适用于环形网络（torus networks）中的路由[17，18]，以便在不牺牲平均情况性能的情况下提供最坏情况的性能保证。 关键是使用VLB adaptively，这是基于以下观察：在低负载下，仅进行少量负载平衡就可以避免拥塞。  VLB还用于楼宇网络交换机，具有极大的可扩展性和性能保证，而无需集中式调度程序。 它用于ATM交换机[7]，路由器[4、5]，光路由器[3、9]和软件路由器[2]。 特别是，该方案is rediscovered (我觉得这里可以理解为重新挖掘)，用于设计路由器交换结构[4]来缓解路由器的扩展挑战，因为集中式方案很难跟上不断增长的链路速度。 在这种情况下，已证明拆分流量 in a round-robin fashion对链路负载的影响与随机拆分[4]相同，就支持所有流量矩阵所需的总互连容量而言，这是最有效的[8]。 </p><p>几乎同时，几个groups将VLB的思想独立地应用于Internet的流量工程和网络设计，以便有效地支持所有可能的流量矩阵。  Kodialam等人的两阶段路由[11，12] 是个traffic engineering方法，其中在固定容量的链路上建立了完整的隧道网格，并在网络的两个阶段（即两跳）中发送数据包。 网络。  Winzer等人的选择性随机负载平衡[14、16、21]使用VLB及其变体来设计经济高效的光网络。 他们的模型假设链路的成本包括光纤和终端设备，因此有减少链路的动机。 在最佳设计中，流量仅负载均衡到几个中间节点。  Zhang-Shen和McKewon [23，25]提出在骨干网的逻辑全网状网络( logical full mesh )上使用VLB，以支持所有流量矩阵并快速从故障中恢复。 另外，VLB还用作以太网LAN [20]中的光路由策略，用于城域WDM环中的调度[10]，电路交换网络[22]，以及数据中心网络的规模化和commoditizing[6]。</p><p>对VLB网络的排队属性的研究[15]发现，VLB消除了网络中的拥塞，伪随机（例如，循环）负载平衡减少了排队延迟。 当用于在网络之间路由流量时，VLB还可以消除对等链路上(peering links)的拥塞[26]。</p></blockquote><ul><li><p>==??== 如何做到的，本地决策，随机路由？还是没说啊…</p></li><li><p>可以在application flow level 处理 packet-by-packet或者flow-by-flow</p></li><li><p>分割按照random和deterministic都是一样的效果（已经证明出来</p></li></ul><h2 id="1-2-Simple-VLB-Network"><a href="#1-2-Simple-VLB-Network" class="headerlink" title="1.2 Simple VLB Network"></a>1.2 Simple VLB Network</h2><blockquote><p>这里的capacity指的是可以发起(initiate)和接收(receive)多少流量，缓冲区采用absorb这个词</p></blockquote><p>在full-mesh且每个节点的接收容量都是r的前提下，我们可以得到结论 : 相比于没有LB的（routing through direct path），VLB可以达到N/2倍的效率</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20201111145531666.png" alt="image-20201111145531666" style="zoom:80%;" /><h1 id="2-VLB-in-Heterogeneous-Networks"><a href="#2-VLB-in-Heterogeneous-Networks" class="headerlink" title="2 VLB in Heterogeneous Networks"></a>2 VLB in Heterogeneous Networks</h1><p>牵扯到分配比了，异构里面最简单的就是按r<del>i</del>的大小为权重进行分配，which is a direct generalization from uniform multicommodity flow in the homogeneous case to product multicommodity flow.</p><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li>里面有问题还是要ask下…<ul><li>smooth traffic</li><li>NetFlow to measure traffic matrix accurately<ul><li>using link measurement ，难道还有别的方法么？</li><li>配置在哪里，需要路由器配置一些特殊服务么？</li></ul></li><li>N-node binary cube network这个架构要了解下，可以问问王帅</li></ul></li><li>应该找个综述看看…(比如说18年那个)</li><li>路由分割如何保证包不乱序</li><li>流量工程和路由什么关系…</li></ul><ul><li>整理下好词好句</li></ul><h1 id="inspiration"><a href="#inspiration" class="headerlink" title="inspiration"></a>inspiration</h1><ul><li>感觉思路是 证明是NP难问题，然后用强化学习去解？</li></ul><h1 id="基于Internet的路由策略综述研究-另外开一个中文综述的文件"><a href="#基于Internet的路由策略综述研究-另外开一个中文综述的文件" class="headerlink" title="基于Internet的路由策略综述研究 另外开一个中文综述的文件"></a><span class="exturl" data-url="aHR0cDovL3d3dy5qc2preC5jb20vQ04vYXJ0aWNsZS9vcGVuQXJ0aWNsZVBERi5qc3A/aWQ9MTUxODE=">基于Internet的路由策略综述研究<i class="fa fa-external-link-alt"></i></span> 另外开一个中文综述的文件</h1><blockquote><p>这篇文章不错啊，文绉绉的。</p></blockquote><ul><li><p>QoS路由问题的核心就是对网络多约束条件下路由选择中的额NP完全性问题求解。</p></li><li><p>这是为啥</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20201111154656841.png" alt="image-20201111154656841" style="zoom:67%;" /></li><li><p>路由策略设计原则</p><ul><li><p>等强设计原则</p></li><li><p>降低成本原则</p><ul><li>需要信息越多，消耗的成本越高</li></ul></li><li><p>面向应用中的服务质量要求的原则</p><ul><li>网络应用大致分为四类<ul><li>非实时数据</li><li>实时图像</li><li>实时声音</li></ul></li><li>视频会议</li></ul></li></ul></li><li><p>03年的时候，不确定模型、动态模型、自适应模型是研究热点</p><ul><li><p>不确定性模型</p><p>针对网络状态信息不精确提出的。途径有：</p><ul><li><p>采用模糊理论进行不精确描述和概率分析 ；</p><ul><li>鉴 于神经网络不需要精确的系统描述（？这个着实没懂😓），只需要训练学习，能够实现联 想推理，容错性强，且 具有并行结构，实时性强 ，因此可以采用神经络对不精确模型进行 建模 ；</li><li>在网络系统的路由 、调度 、接纳控制等算法中引入随机 性方 法 与策 略 ；</li></ul></li><li><p>将预先计算和在线计算相结合</p></li></ul></li><li><p>动态模型</p><p>动态特性，即系统必须在运行过程中实时处理出现的异常、随机事件和局部故障，实现动态重构。【有点像快速重路由干的事情】</p></li><li><p>自适应模型</p><p>感觉就是我们现在做的事情</p></li></ul></li></ul><h1 id="基于深度强化学习的物联网智能路由策略"><a href="#基于深度强化学习的物联网智能路由策略" class="headerlink" title="基于深度强化学习的物联网智能路由策略"></a>基于深度强化学习的物联网智能路由策略</h1>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUM</title>
      <link href="/NUM/"/>
      <url>/NUM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>考虑一个由一组容量的单向链路组成的网络，该网络由一组源共享，其中源的特征在于效用函数的传输速率呈凹形增加，目标是计算使总和最大化的源速率 的公用事业超过了容量限制。 集中解决该问题不仅需要了解所有实用程序功能，而且更糟糕的是，由于通过共享链接进行的源耦合，可能导致所有源之间的复杂协调。 取而代之的是，我们提出了一种分散式方案，该方案消除了这一要求，并自然地适应了不断变化的网络状况。 关键是要考虑对偶问题，其结构建议将网络链接和源视为分布式计算系统的处理器，以使用梯度投影法解决对偶问题。 每个处理器执行局部算法，将其计算结果传达给其他处理器，然后重复该循环。 该算法采用熟悉的反应流控制形式。 每个链路基于本地总的源速率，计算出链路上带宽单位的“价格”。源被反馈到标量价格，在标量价格中，使用的所有链路的总和将被收取，并且它选择传输速率以最大化自身的利益。 公用事业减去带宽成本。 这些单独的最优价格对于一般的价格向量可能不是社会最优的，即，它们可能不会使总效用最大化。 该算法迭代地接近使个人和社会最优性保持一致的价格向量，从而确实使总效用最大化。<br>   该算法是部分异步的[5，Ch。  [图6]中，源和链路可以基于过时的信息进行计算，它们可以在不同的时间以不同的频率进行通信，并且通信延迟可能很大，不同并且随时间变化。 我们证明只要更新之间的间隔是有界的，该算法就会收敛以产生最佳速率。 在平衡状态下，共享相同链接的源不一定平等地共享可用带宽。 相反，它们的份额反映了它们如何根据效用函数来表示对资源的重视程度，以及它们对资源的使用如何暗含了他人的成本。 这可能是根据不同的费率分配提供差异化服务的基础。 推导了基本算法，并在静态环境中证明了其收敛性，该环境中的链路容量和活动源集保持不变。 该算法直接推广到时变环境的情况。 我们从原型中给出了一些测量结果，这些测量结果说明了网络条件变化时算法的收敛性。 本文的结构如下。 在第二节中，我们提出了优化问题及其激励我们方法的对偶。 在第三部分中，我们导出了同步算法并描述了其收敛性。 该算法及其收敛证明在第四节中扩展为异步设置。 在第五节中，我们谈到公平和定价。 在第六节中，我们介绍了从原型获得的收敛性实验结果。 收敛性证明在两个附录中。  </p></blockquote><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    We propose an optimization approach to flow control where the objective is to maximize the aggregate source utility over their transmission rates。 我们将网络链接和源视为分布式计算系统的处理器，使用gradient project algorithm去解决dual problem。 在此系统中，源选择传输速率以最大化their own benefits, utility minus bandwidth cost，and network links adjust bandwidth prices to coordinate the sources’ decisions.  We provide asynchronous distributed algorithms and prove their convergence in a static environment. We present measurements obtained from a preliminary prototype to illustrate the convergence of the algorithm in a slowly time- varying environment. We discuss its fairness property.。 我们允许 feedback delays to be different, substantial（很大的意思），and time varing，并且链接和源可以在不同的时间以不同的频率进行更新。 我们提供了异步分布式算法，并证明了它们在static environment中的收敛性。我们介绍了从初步原型获得的测结果，以说明算法在slowly time-varying的环境中的收敛性。 我们讨论其公平性(We discuss its fairness property)。</p><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><p>It seems better to 使用可变比特率（ABR）而不是恒定比特率（CBR）服务为可变带宽的弹性流量[31]提供服务[31]。的确，这种folklore可以在以下抽象模型中得到正式证明：假设网络为一组弹性资源提供固定和可变带宽，并根据过量需求对其定价，并且资源自由购买以最大程度地发挥自己的利益。 解释是，在模型中仅需要固定带宽的源实际上将订阅CBR，而同时需要固定带宽和可变带宽的源将subscribe to ABR with a minimum cell-rate guarantee。 我们在[23]，[24]中表明，在均衡状态下，所有信号源都处于最佳状态，需求等于供给，每个信号源都希望有严格正数的可变带宽。 这种观察可能为端到端流量控制提供了另一个动机，因为无功流量控制是提供可变带宽的一种实用方法，在无功流量控制中，源响应网络条件的变化来调整其传输速率。 本文的目的是提出一种流量控制的优化方法，其中将控制机制作为优化网络性能全局度量的一种手段。 我们将介绍同步和异步算法，并证明它们在静态网络环境中的收敛性。 然后，我们将描述一个原型，并提供实验测量值以说明算法的收敛性。</p><blockquote><p>这里把reactive flow control都叫做无功流量控制…</p></blockquote><h2 id="A-summary"><a href="#A-summary" class="headerlink" title="A summary"></a>A summary</h2><ul><li><p>背景/元素介绍</p><ul><li><p>a set L of 无向链路 of capacities $c_l, l\in L$</p></li><li><p>the network is shared by a set of $S$ of sources , and $s$ is characterized by a utility function  $U_s(x_s)$, <strong><u>which is concave</u></strong> increasing in its transmission rate $x_s$  ==居然是凹的..能理解为啥一定要是凹的么==</p></li><li><p>The goal is to calculate source rates that maximize the sum of the utilities $\sum_{s\in S} U_s(x_s)$ over $x_s$ subject to capacity constraints</p><p>集中解决该问题不仅需要了解所有实用程序功能，而且更糟糕的是，由于通过共享链接进行的源耦合，可能导致所有源之间的复杂协调。 取而代之的是，我们提出了一种分散式方案，**<u>该方案消除了这一要求</u>**【==居然可以去耦合，惊了==】，并自然地适应了不断变化的网络状况。 关键是要考虑对偶问题，其结构建议将网络链接和源视为分布式计算系统的处理器，以使用梯度投影法解决对偶问题。 每个处理器执行局部算法，将其计算结果传达给其他处理器，然后重复该循环。</p></li></ul></li></ul><ul><li><p>该算法采用熟悉的**<u>reactive flow control</u>**。</p><ul><li><p>流程</p></li><li><p>每个链路$l$基于local aggregate source rate==这个指的是收包的速率?==，计算出链路上带宽单位的“价格”$p_l$。A source $s$ is fed back the scalar price  $p^s=\sum p_l$，where the sum is taken over all links that  $s$ uses, and it chooses a transmission rate  $x_s$  that maximizes it own benefit $U_s(x_s)-p^sx_s$ , utility minus the bandwidth cost。</p></li><li><p>这些单独的最优价格对于a general price vector( $p_l,l\in L$ )可能不是social optimal，i.e.，它们可能不会使总效用最大化。该算法iteratively approaches a price vector ( $p_l^*,l\in L$ ) that aligns 个人和社会最优性保持一致的价格向量，从而( $x(p_l^{*s}),s\in S$ )确实使总效用最大化。</p><blockquote><p>我觉得这里a general price vector翻译成总体的价格向量</p><p>==所以这里的意思是调整价格向量？==</p></blockquote></li><li><p>该算法是<u>部分异步</u>的[5,Ch. 6]中，源和链路可以基于过时的信息进行计算，它们可以在不同的时间以不同的频率进行通信，并且通信延迟可能很大，不同并且随时间变化。 </p><ul><li><p>我们证明只要更新之间的间隔是有界的，该算法就会收敛以产生最佳速率。 </p></li><li><p>在平衡状态下，共享相同链接的源不一定平等地共享可用带宽。 相反，它们的份额反映了how they value their use of the resources，以及它们对资源的使用如何暗含了a cost on others。 这可能是根据不同的费率分配提供差异化服务的基础。 </p></li><li><p>基本算法 is derived and its convergence proved in a <u>static environment</u>，where 链路容量和活动源集保持不变。 该算法直接推广到时变环境的情况。 我们从原型中给出了一些测量结果，这些测量结果说明了<u>网络条件变化时</u>算法的收敛性。 </p><blockquote><p>定义了什么是static environment</p></blockquote></li></ul></li></ul></li><li><p>本文的结构如下。</p><ul><li>在第二节中，我们提出了优化问题及其激励我们方法的对偶。 </li><li>在第三部分中，我们导出了同步算法并描述了其收敛性。</li><li>该算法及其收敛证明在第四节中扩展为异步设置。</li><li>在第五节中，我们谈到公平和定价。 </li><li>在第六节中，我们介绍了从原型获得的收敛性实验结果。 收敛性证明在两个附录中。</li></ul></li></ul><h2 id="B-extensions"><a href="#B-extensions" class="headerlink" title="B extensions"></a>B extensions</h2><ul><li><p>现在，我们评论过去的作品和扩展。 **<u>基本算法已在[20]中提出，初步原型在[19]中进行了简要讨论</u>**。 在本文中，我们通过分析和实施来分析其收敛性和公平性。 基本算法要求将链接价格传递给源，将源速率传递给链接，<u>因此无法在Internet上实现</u>。 </p></li><li><p><u><strong>如下[25]，[21]大大简化了此通信要求</strong></u>。</p><p>在[25]中，我们描述了一种使用本地信息进行链接以估算源速率的方法，并证明了仍然保持了最优性。 这消除了从源到链接的显式通信的需要。 </p><p>相反，我们在[21]中提出了一种方法，该方法仅使用二进制反馈即可完成从链接到源的通信。 这可以通过使用IP头[9]，[27]中建议的显式拥塞通知（ECN）位来实现。 这两个简化组合成一个流控制方案，我们称之为随机早期标记（REM），它是随机早期检测（RED）的一种形式[10]，它不仅可以稳定网络队列，而且可以跟踪全局最优值。 面对较大的反馈延迟，使链接的价格取过去价格的加权平均值，REM变得更强大[1]。  REM及其增强功能将在本文的第二部分中详细介绍。</p></li></ul><ul><li><p>**<u>本文提出的优化模型具有双重价值</u>**。 首先，although it may not be possible, or critical, that optimality is exactly attained in a real network，但优化框架提供了一种将整个网络明确引导至desirable operating point的方法。下面我们将看到流控制可以看作是网络上的分布式计算，因此，整个网络的行为很容易理解。 其次，将实用的流控制方案简单地视为某种优化算法的实现是有用的。 然后，优化模型使系统的方法可以设计和完善这些方案，其中对流控制机制的修改以对优化算法的修改为指导。</p><p>例如，众所周知，牛顿算法的收敛速度比梯度投影算法快得多。 通过用牛顿算法代替本文提出的梯度投影算法，我们在[2]中推导了一种实用的牛顿式流量控制方案，该方案可以证明保持最佳状态，并且与此处的基本方案具有相同的通信要求，但享有更好的收敛性。 我们还将线性控制中的pole-placement technique应用于此模型，以在面对较大的反馈延迟时稳定其瞬态。 这导致了更健壮的REM，见[1]。 </p></li></ul><h2 id="C-related-work"><a href="#C-related-work" class="headerlink" title="C related work"></a>C related work</h2><p>​    关于流量控制的文献很多，包括原始的TCP流量控制[15]和最近[10]的enhancement，例如[28]，[6]的二进制反馈方案，[22]的两位反馈方案。例如[3]，[29]，[7]等的控制理论方法。另请参阅[14]中的recent review。 </p><p>​    基于优化的流量控制的关键前提[8]，[11]-[13]，[16]，[17]，[19]-[21]，[25]是带宽评估不同的源应做出不同的反应去应对网络拥塞。所有这些工作都通过优化问题来激发流控制，并导出其控制机制作为优化问题的解决方案。 它们在目标功能或解决方案的选择上有所不同，并导致在源和网络链路上实施的流控制机制大不相同。</p><p>我们的模型最接近[16]，[17]。 确实，他们和我们的工作都具有最大化总source utility的相同目标。 在[16]，[17]中，该目标被分解为网络和资源的优化子问题，并且他们为解决方案提出了一种不同的机制，其中每个资源选择支付意愿，网络将价格分配给这些资源, in a way that is proportionally fair。 他们的方法的一个有趣特征是，它允许用户决定他们的payments并接收what the network allocates，而在我们的方法中，users decide their rates and pay what the network charges。 </p><p>参见第3节中算法A1之后的Remark 3中的更详细比较。</p><h1 id="2-Optimization-Problem"><a href="#2-Optimization-Problem" class="headerlink" title="2 Optimization Problem"></a>2 Optimization Problem</h1><p>In this section, we state the optimization problem that leads to our congestion control framework, and suggest a solution approach. Algorithms to solve the problem will be given in the following sections.</p><h2 id="A-Primal-Problem"><a href="#A-Primal-Problem" class="headerlink" title="A Primal Problem"></a>A Primal Problem</h2><ul><li><p>无向链路集合<img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/061641-41204.png" alt="image-20201112093628276">with capacity $c_L$ , and node set $S$</p></li><li><p>source $s$ is characterized by 4 parameters $(L(s),U_s,m_s,M_s )$</p><ul><li><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/093928-566242.png" alt="image-20201112093823706">是s使用的链路</li><li><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/093928-477615.png" alt="image-20201112093839793">是效用函数 ==这里给映射到负的去了。。可以。不过效用函数本来是正的 ？？why一定positive== 是严格凹的 in its argument 【==in its argument就不是很懂什么意思了…==】</li><li><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/093931-317765.png" alt="image-20201112093928373">是最小和最大的传输速率，required by source $s$. <img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/061911-954792.png" alt="image-20201112094016129"><ul><li>这里画蛇添足定义了个区间<img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094201-949888.png" alt="image-20201112094200258"> and vector <img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094251-895066.png" alt="image-20201112094214541">，也许是为了后面方便描述吧</li><li>以及<img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094319-535488.png" alt="image-20201112094302977"> 还有他们之间的关系 : <img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094409-28038.png" alt="image-20201112094353039"><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/094418-230495.png" alt="image-20201112094417287"></li></ul></li></ul></li><li><p>目标是</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/100622-139567.png" alt="image-20201112094447875"></p><p>​    约束（2）说，任何链路上的总源速率不超过容量。 由于目标函数严格是凹的，因此是连续的，并且可行解集很紧凑，因此存在一个称为初始最优解的唯一最大化器。</p><p>​    尽管目标函数是分散在$x_s$中的，但源速率是由约束条件（2）耦合的。 解决原始问题（1）–（2）直接需要可能所有来源之间的协调，这在实际网络中是不切实际的。 分布式和分散式解决方案的关键是看它的dual。</p></li></ul><h2 id="B-dual-problem"><a href="#B-dual-problem" class="headerlink" title="B dual problem"></a>B dual problem</h2><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/031850-49320.png" alt="image-20201112100641332"></p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/19/031915-980440.png" alt="image-20201112101120788"></p><p>==这里的转换后面要再品品==</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/12/101552-854681.png" alt="image-20201112101128691"></p><p>至于$p_l$和$c_l$为什么能提出来，是因为其与$s$无关。这里$p$一定是正的，因为这里是拉格朗日的罚函数</p><ul><li>假如把$p_l$当作是link l 每单位带宽的价格，那么$p^s$就是节点s所有links的总的带宽均价，所以$x_sp^s$代表 s 以一定速率传输时源的带宽成本 , and $B_s(p^s)$ 代表在给定价格$p^s$下可以实现的最大收益我们将在下面看到，该标量$p^s$ summarizes了所有源需要知道的拥塞信息。</li><li>A source $s$ can be induced to solve maximization (3) by bandwidth charging. 【我这里的理解就是，可以通过调节s的charging，也就是调节p，来达到最大化全局奖励】对于每一个$p$，都有一个唯一的最大化器，用表示，因为它是严格凹的。</li><li>通过对偶理论… 因此，我们将专注于解决对偶问题（5）。 一旦我们获得了$p^*$, 原始的最佳源速率就可以通过（3）求解by简单的最大化（见下面的（6））。<strong>要注意的重要一点是，给定单个来源可以独立求解（3），而无需与其他来源进行协调。 从某种意义上说，它是将（3）的个人最优与（1）的社会最优对齐的协调信号</strong>。</li></ul><blockquote><p>对偶问题，最小化对偶问题，就是最大化原始问题的上界</p></blockquote><h2 id="C-Notations-and-Assumptions"><a href="#C-Notations-and-Assumptions" class="headerlink" title="C Notations and Assumptions"></a>C Notations and Assumptions</h2><p>routing matrix $R_{ls}$</p><ul><li>第一段的==induced norm?==</li><li>Kuhn-Tucker theorem 就是KKT条件</li></ul><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li><p>abstract都没怎么看懂…</p></li><li><p>对偶问题，拉格朗日要满组KKT才是强对偶（check</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zbGlkZXBsYXllci5jb20vc2xpZGUvODExMzQxMi8=">这个link<i class="fa fa-external-link-alt"></i></span>是这篇文章的slide link</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNlLnJ1dGdlcnMuZWR1L35tYXJzaWMv">这个老师的博客<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRTE</title>
      <link href="/ExtensiveReading/Route/MRTE/"/>
      <url>/ExtensiveReading/Route/MRTE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LearningToRoute</title>
      <link href="/ExtensiveReading/Route/LearningToRoute/"/>
      <url>/ExtensiveReading/Route/LearningToRoute/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>传统的问题是</p><ul><li>1</li><li>2</li></ul><blockquote><p>==其实感觉跟CC方面遇到的问题很相似？==</p></blockquote></li><li><p>建模假设</p><ul><li>流量需求的历史情况包含未来的一些信息</li><li>DM存在一定的规律</li></ul></li><li><p>思路是，如果已知DM，自然是可以用LP做全局优化，但是现在未知。另一方面，先预测后做决策的效果太慢了。</p></li></ul><ul><li>这篇文章的文笔很好…写作可以学习（辞藻、结构、连接句 都可，一开始的时候我还没有好好看…）</li></ul><p><u><strong>使用的是TRPO</strong></u></p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    近来，人们已经集中精力关注是否/何时依赖于人类专家的算法洞察力的传统网络协议设计可以被数据驱动（即机器学习）方法代替的问题。 我们在可能是最基本的网络任务：路由的背景下探讨这个问题。 是否可以利用机器学习（ML）的思想和技术来自动生成“良好”的路由配置？ 我们关注域内流量工程的经典设置。 我们注意到，这种情况对数据驱动协议设计提出了重大挑战。 关于数据驱动路由功能的初步结果表明，在这种情况下应用ML（特别是深度强化学习）可产生高性能，并且是进一步研究的有希望的方向。 我们概述了ML导向路由的研究议程（We outline a research agenda for ML-guided routing）。</p><h1 id="1-Introducion"><a href="#1-Introducion" class="headerlink" title="1 Introducion"></a>1 Introducion</h1><h2 id="why-apply-ML-to-routing"><a href="#why-apply-ML-to-routing" class="headerlink" title="why apply ML to routing"></a>why apply ML to routing</h2><p>​    传统上，路由优化以两种方式之一来应对未来交通状况的不确定性：</p><ul><li>针对先前观察到的交通状况优化路由配置，希望这些配置也能与未来相得益彰 ，</li><li>针对各种可行的交通场景进行优化，以期在整个范围内提供高性能[7，10，16，29]。 </li></ul><p>​    缺陷是</p><pre><code>* &lt;u&gt;即使在不太不同的流量条件下，针对特定流量条件进行优化的路由配置也可能惨败，无法获得良好的性能&lt;/u&gt;* &lt;u&gt;此外，在各种考虑的交通场景中优化最坏情况的性能可能会以远离实际交通状况的最佳实现为代价。&lt;/u&gt;</code></pre><p>​    机器学习提出了第三种选择：利用有关过去交通状况的信息来学习针对未来状况的良好路由配置。 尽管决策者事先无法确定确切的未来流量需求，但现实的假设是流量需求的历史记录包含有关未来的一些信息（例如，一天中的流量变化，流量的偏斜度，是否一定的结束时间）  -主机经常通信等）。 因此，一种自然的方法是持续观察流量需求，并根据（隐式或显式）关于未来的预测调整路由。</p><h2 id="intradomain-TE-as-a-case-study"><a href="#intradomain-TE-as-a-case-study" class="headerlink" title="intradomain TE as a case study"></a>intradomain TE as a case study</h2><p>​    我们通过检查域内TE的经典环境[10、15-17、24、29、50]来启动ML引导路由的研究，which是在a single,self-administered 网络中优化路由的方法。 <u>我们将在其他情况下对数据驱动路由的研究留给以后的研究（第7节）。 我们提供了一个基于数据驱动（域内）路由的模型，该模型建立在域内TE [10、15–17、24、29、50]和[多商品[5、7、10、16、22，  29，43]）流程优化</u>。 </p><p>​    我们在这个模型中研究了不同的机器学习范式和机器的应用。 在我们研究ML引导域内TE的过程中，**<u>我们解决了两个主要问题</u>**：</p><ul><li>如何将路由表述为ML问题？  </li><li>在该领域学习的输入和输出是什么合适的表示？ 接下来，我们将探讨这些挑战中的每一个。</li></ul><h3 id="learn-what-future-TE-demands-or-routing-configurations-Supervised-learning-or-RL"><a href="#learn-what-future-TE-demands-or-routing-configurations-Supervised-learning-or-RL" class="headerlink" title="learn what ? future TE demands or routing configurations? Supervised learning or RL?"></a>learn what ? future TE demands or routing configurations? Supervised learning or RL?</h3><p>​    一种基于ML的路由的自然方法如下：观察过去的流量需求，应用ML明确预测即将到来的流量需求，并根据预测的需求优化路由。 用机器学习的术语来说，这是一个监督学习任务[39]。</p><p>​    我们评估了几种监督学习方案，以预测交通需求。 我们的初步结果令人沮丧，这表明<u>如果交通状况不具有很高的规律性，监督学习可能会无效</u>。 接下来，我们将注意力转向另一种方法：强化学习[45]。 现在，与其明确地了解未来的流量需求并针对这些需求进行优化，不如从观察到的流量需求历史到路由配置中学习一个良好的映射。 我们的初步结果表明，这种方法更有希望，但要意识到这一点需要谨慎，如下所述。</p><h3 id="What-should-the-output-of-the-learning-scheme-be"><a href="#What-should-the-output-of-the-learning-scheme-be" class="headerlink" title="What should the output of the learning scheme be?"></a>What should the output of the learning scheme be?</h3><p>​    域内路由上下文对强化学习的应用提出了重大挑战。 一个关键挑战是路由方案的自然“输出”是一组规则的集合，这些规则指定如何将流量从每个源转发到每个目的地。 此输出的幼稚表示形式涉及大量参数（与之相对，例如，从相当小的集合中选择单个动作[32，33]）。我们的初步结果表明，这会使学习缓慢而无效。 因此，我们设计了一些方法来限制输出的大小，而又不会在路由选择的复杂性上“损失太多”。 我们利用有关逐跳流量工程的文献[16、35、50]的思想，通过深度强化学习有效地学习良好的路由配置。 我们的初步发现表明，这是改善当今域内TE的有希望的方向。</p><h3 id="Outlining-a-research-agenda-for-data-driven-routing"><a href="#Outlining-a-research-agenda-for-data-driven-routing" class="headerlink" title="Outlining a research agenda for data-driven routing"></a>Outlining a research agenda for data-driven routing</h3><p>我们相信下面的investigation仅仅只是在数据驱动路由领域隔靴搔痒。 我们给读者留下了许多有趣的研究问题，包括</p><ul><li>将我们的方法扩展到其他路由环境</li><li>检查其他性能指标</li><li>识别更好的监督学习方法以进行流量需求估算</li><li>扩展 在这种情况下以及其他情况下的强化学习</li></ul><p>我们将在第7节中讨论此研究议程。</p><h1 id="2-Data-driven-routing-model"><a href="#2-Data-driven-routing-model" class="headerlink" title="2 Data-driven routing model"></a>2 Data-driven routing model</h1><p>​    在我们的框架中，决策者（网络运营商/自动化系统）反复选择路由配置。 流量条件各不相同，并且路由决策不会影响未来的流量需求。 我们的重点是将流量工程literature中的链接的over-utilization最小化（也称为最小化拥塞）的常规优化目标[7，10，16，29]。</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><blockquote><p>我们将网络建模为a capacitated directed graph G =（V，E，c），其中V和E分别是顶点和边集，而c：E→R +为每个边分配一个容量。 令n表示V中的顶点数，而Γ（v）表示G中顶点v的相邻顶点。</p></blockquote><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><blockquote><p>该网络的路由策略R为每个源顶点s和目标顶点 t 指定了遍历v的从s到t的流量如何在v的邻居之间分配。 因此，路由策略为每个顶点v和源－目的地对（s，t）指定了一个介于v的邻居到值[0，1]，Rv，（s，t）的映射：Γ（v  ）→[0，1]，因此Rv，（s，t）（u）是从s到t穿越v且v转发到其邻居u的流量的一部分。 我们要求对于每个s，t∈V和v，t，Pu∈Γ（v）Rv，（s，t）（u）= 1（在非目标位置没有流量被Blackholed），并且对于每个 s，t∈V，u∈Γ（v）Rt，（s，t）（u）= 0（到目的地的所有流量都在该目的地吸收）。</p></blockquote><h2 id="Induced-flows-of-traffic"><a href="#Induced-flows-of-traffic" class="headerlink" title="Induced flows of traffic"></a>Induced flows of traffic</h2><blockquote><p>需求矩阵（DM）D是一个n×n矩阵，其第（i，j）个条目Di，j指定了源i和目的地j之间的流量需求。 观察到任何需求矩阵D和路由策略R都会引起网络中的流量流，如下所述。 从每个来源s到目的地t的流量都根据Rs（s，t）在s的邻居之间分配。 同样，从s到t的流量经过s的邻居v会根据Rv，（s，t）等在v的邻居之间分配。</p></blockquote><h2 id="How-good-is-a-traffic-flow"><a href="#How-good-is-a-traffic-flow" class="headerlink" title="How good is a traffic flow"></a>How good is a traffic flow</h2><blockquote><p>我们采用了最小化链接（过度）使用率的经典目标函数[7，10，16，29]。 特定多商品流f下的链路利用率为maxe∈Ec（e），<strong>其中fe是流f下横穿edge e的流的总量</strong>。 我们的公式很容易扩展到其他基于多商品流的目标函数。 我们将其他目标（例如，流完成时间，延迟）的评估留给以后的研究（第7节）。</p></blockquote><p>hesy: 这里的居然不是所有流经过该链路的总流量,而是某个流 f 经过该链路的流量。【注意跟别的文章的区分，也许别的文章就是在讲这个】</p><p>我们指出，对于任何给定的需求矩阵，可以通过线性编程[7，16，22]以一种计算有效的方式来执行使链路利用率最小的多商品流f的计算。 <strong>相反，我们的重点是在实际情况下事先不知道DM。</strong></p><h3 id="Routing-future-traffic-demands"><a href="#Routing-future-traffic-demands" class="headerlink" title="Routing future traffic demands"></a>Routing future traffic demands</h3><p>​    时间分为连续的间隔，称为“时期”，其长度为<u><strong>δt（δt由网络运营商确定</strong></u>）。 在每个时期t的开始，确定该时期的路由策略R（t）。  R（t）只能取决于过去的流量模式和路由策略的历史记录（从时期1，…，t-1）。 </p><p>​    我们做出两个简化的假设：</p><ul><li>需求矩阵在每个时间段都是固定的；==这个假设没有很懂==</li><li>事后可以推断出需求矩阵（例如，通过网络测量）。</li></ul><p>​    我们将对数据驱动路由的研究放在更复杂的流量模式下（例如，IP流在每个时期内进出），以及对信息约束的路由决策（例如，仅关于过去流量需求的部分信息）的研究。</p><p>​    在选择了针对时间段t的路由策略R（t）之后，针对时间段t的需求矩阵以及相关的成本就最大的链路利用而言被揭示出来。 决策者的目标是选择一种路由策略，其方式应始终导致较低的链路过度使用率。</p><h1 id="3-What-to-learn"><a href="#3-What-to-learn" class="headerlink" title="3 What to learn"></a>3 What to learn</h1><p>我们的基本假设是DM中存在某种规律性，下面的研究目的是探索如何推断出这种规律性并利用它们来优化路由。 <strong>我们考虑两种不同的规律性表现形式：将确定性规律性嵌入DM序列中，并从固定的概率分布中抽取DM。还有两种高级学习方法：监督学习和强化学习</strong>。</p><h2 id="3-1-Supervised-Learning-Approach"><a href="#3-1-Supervised-Learning-Approach" class="headerlink" title="3.1 Supervised Learning Approach"></a>3.1 Supervised Learning Approach</h2><blockquote><p>由于对于给定的需求矩阵（DM），最佳路由策略是可有效计算的，因此自然的方法是反复尝试预测（即学习）下一个DM，然后为该DM计算最佳路由策略。 用机器学习术语来说，这是一个监督学习问题。</p></blockquote><h3 id="什么是监督学习"><a href="#什么是监督学习" class="headerlink" title="什么是监督学习"></a>什么是监督学习</h3><h3 id="如何生成DM"><a href="#如何生成DM" class="headerlink" title="如何生成DM"></a>如何生成DM</h3><ul><li>gravity model [40] &amp; bimodal model[34]</li><li>sparsification of gravity/bimodal DMs</li></ul><blockquote><p>我们考虑生成DM的两种标准方案：（确定性）引力模型[40]和（概率性）双峰模型[34]。 直观地，前者捕获了端点之间的通信与它们的输出带宽成比例的场景，而后者捕获了通信端点被分为小流量（小鼠）和大流量（大象）的场景。 <a href="">****</a></p><p>我们还考虑了重力/双峰DM的“稀疏化”，它是通过随机地均匀选择通信对的p分数（对于p∈[0，1]）并消除所有其他交通需求而产生的 对考虑。 我们将p称为DM的稀疏性。 我们的实验需要生成DM序列，为每个时间段指定一个DM。 </p></blockquote><p>我们检查了两类DM序列：</p><h4 id="Class-I"><a href="#Class-I" class="headerlink" title="Class I"></a>Class I</h4><p>DM sequences in which the next DM is deterministically derived from past DMs.</p><p>DM是有周期性规律的，我们评估了周期为q的DM cycles，which q=5，10，15，20，其中每个DM是前q=5，10，15，20个DM的均值。且DM为稀疏的。</p><blockquote><p>这里还给了一个例子，which证明了流量模式具有temporal consistencies</p></blockquote><h4 id="Class-Ⅱ"><a href="#Class-Ⅱ" class="headerlink" title="Class Ⅱ"></a>Class Ⅱ</h4><p>DM sequences in which each DM is independent of the previous DMs. </p><p>现在，与每个DM上的固定概率分布（即稀疏重力/双峰DM）无关地绘制每个时期的DM。 <u>我们指出，这种流量模式通常用于评估数据中心的体系结构和协议[4、19、25、51]，</u><strong>因为数据中心的流量通常被认为是高度偏斜且不可预测的[18、20]。</strong>    </p><h3 id="监督学习方法"><a href="#监督学习方法" class="headerlink" title="监督学习方法"></a>监督学习方法</h3><p>评估了3种不同的DNN体系结构。 这三种架构的输入都是最近观察到的k个DM，而输出则是DM。 我们检查k的不同值（5、10和20）。 我们使用Frobenius（或l2）范数[21]来量化相对于实际DM的输出质量。 三种体系结构的不同之处在于，神经网络的结构将输入层（代表DM的k长历史记录）和输出层（代表下一个DM）相互连接。 我们评估</p><ul><li>FCN，一个三层全连接网络</li><li>CNN，一个四层卷积神经网络[30]</li><li>NAR-NN，一个非线性自回归模型[11] 通过四层神经网络实现，对于输入需求矩阵D(1),…, D(k)学习k矢量α＝（α1，…，αk）和n×n矩阵β，并输出<img src="https://images.weserv.nl/?url=C:%5CUsers%5Chesy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201104154216675.png" alt="image-20201104154216675">。</li></ul><h3 id="evaluation-framework"><a href="#evaluation-framework" class="headerlink" title="evaluation framework"></a>evaluation framework</h3><p>​    在稀疏度p = 0.3、0.6、0.9、1和每个顶点传出带宽的值（从10 MB到10 GB）变化的情况下，我们选取了(9×9, 12×12, 23×23, 30×30, 50 × 50, and 100 × 100) size的模型。</p><p>​    我们考虑了各种DM序列长度来训练和测试模型（从DM的10到100的范围）。 对于为q，p，k和序列长度分配参数的每个选择，我们都会生成10个DM序列的训练集和3个DM序列的测试集。 我们将学习epoch定义为训练集的完整遍历。 我们为每个神经网络训练<strong>2000个学习epoch</strong>。</p><h3 id="results"><a href="#results" class="headerlink" title="results"></a>results</h3><p>​    我们的实验结果（针对测试的DM序列）表明，对于表现出确定性的DM序列（即DM和“平均DM”的周期），仅NAR-NN的性能相当好，并且仅针对所检查历史之间的特定关系 （k），周期的大小/ DM的平均值超过（q）。 具体而言，当q≤k时，NAR-NN对DM的周期很好地逼近下一个DM，并且在平均DM上表现良好。 当q&gt; k时，NAR-NN在平均DM上继续表现良好，但在q&gt; k的DM周期中失败。 对于随机生成的DM，所有3种架构都无法近似下一个DM（这并不奇怪，因为序列中DM之间没有时间相关性）。 我们在具有30个顶点的网络G上显示NAR-NN的代表性结果。 我们根据预测的DM与实际DM的距离（y轴）绘制学习历元（x轴）上的损失。 图1b和图1a表明，使用平均和循环DM序列生成时，该模型成功学习了下一个DM。 图1c展示了从概率分布中得出的学习下一个DM的失败。 我们将继续研究在未来对交通需求进行更好的监督学习是否可行（请参见第7节）。<br>   3.2</p><p>16:40开始读阿里的</p><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><h2 id="to-be-summarized"><a href="#to-be-summarized" class="headerlink" title="to be summarized"></a>to be summarized</h2><h3 id="辞藻"><a href="#辞藻" class="headerlink" title="辞藻"></a>辞藻</h3><p>Unfortunately 是另一个能很好的表达转折意味的副词</p><p>a rich body of 丰富的 （ a rich body of literature/researches )</p><p>a bunch of </p><p>render 造成 –&gt; make</p><p>devise  发明，想出，设计  design</p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><ul><li><p>勾画出来的文献要整理一下 </p></li><li><p>==有实验数据或者论文支撑么==</p><blockquote><p>intro: 我们评估了几种监督学习方案，以预测交通需求。 我们的初步结果令人沮丧，这表明<u>如果交通状况不具有很高的规律性，监督学习可能会无效</u></p></blockquote></li><li><p>文中标红的再看一下</p></li><li><p>第三章节的建模里面： 三种体系结构的不同之处在于，神经网络的结构将输入层（代表DM的k长历史记录）和输出层（代表下一个DM）相互连接。？？？</p></li><li><p>TRPO是15年的论文，DDPG是16年的，为什么17年投的这篇Hotnets应该做的时候两个算法都有，且DDPG更为state-of-art，想请问下采用DDPG</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paperWriting</title>
      <link href="/Summary/paperWriting/"/>
      <url>/Summary/paperWriting/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4d1623528c7a47c5fc34f8a69e4c2cd762849291765d20620f0830d39897dc47"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzzy Kanerva-based TCP Q-learning</title>
      <link href="/ExtensiveReading/CC/FuzzyKanerva-basedTCPQ-learning/"/>
      <url>/ExtensiveReading/CC/FuzzyKanerva-basedTCPQ-learning/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Hesy-summary"><a href="#Hesy-summary" class="headerlink" title="Hesy summary"></a>Hesy summary</h1><p>主要用于梳理下行文思路，用于写作学习。abstraction,design,performance都很出彩</p><ul><li><p><a href="#abstract">abstract</a>的三段论值得学习</p></li><li><p>introduction的逻辑应该是 <code>我们提出了XXXX，能克服前人工作的xx缺点</code> 而不是<code>前人工作有xx缺点，为此我们提出了XXXX</code></p></li><li><p>related work里面的抨击值得摘抄！</p></li><li><p>design的逻辑很好！</p><ul><li>整体的运行架构是什么 （ 如何将Q-learning算法结合我们的场景进行运行</li><li>RL的几个要素分别是什么 （ 如何结合Q-learning算法和我们的问题进行芥末</li><li>实现上遇到的challenge 以及我们的解决方案 , which is another 华彩</li></ul></li><li><p><a href="#Performance">performance</a>的逻辑和布局也学习到了！</p><ul><li>实验设置</li><li>整体在xx 和 yy 方面的提升 &amp;  为何会出现这样情况的分析</li><li>在xx方面的结果 翔实的展示； 在yy方面的结果 翔实的展示</li></ul></li><li><p>小细节</p><ul><li>自己拼接造出的单词 ，dash别忘了<ul><li>sub-component</li><li>pre-configured</li><li>re-think</li></ul></li></ul></li></ul><a id="more"></a><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><ul><li><p>【<strong>Background: important things and urgent need</strong>】 </p><p>Advances in YY technology have resulted in <strong>pervasive deployment</strong> of devices of … . <strong>The need</strong> for <strong>XX</strong> that ….( 描述下对XX的性能期待, e.g. 高吞吐,低延迟 )  <strong>necessitate re-thinking</strong> of conventional design of （你要研究的领域/东西）.</p><blockquote><p>无线技术的进步已导致在尺寸，存储和计算能力方面具有高度可变性的设备的普遍部署(pervasive deployment)。 为了保持以高可靠性传送数据的连续连接，需要重新考虑传统的传输层协议设计。</p></blockquote></li></ul><ul><li><p>【<strong>What we propose and what’s its features</strong>】</p><p><strong>This paper investigates</strong> the use of  <strong>ZZ ** （你使用的算法/技巧/工具） in **YY</strong>（你研究的领域）… , <strong>wherein</strong> …（描述下你做了什么）. <strong>Furthermore</strong>, it demonstrates how …(具体描述下研究工作中华彩的细节，套路大概就是”我发现了xx(性能瓶颈)在实现的时候很关键，我们是这样解决的”)</p><blockquote><p>本文研究了在拥塞避免状态期间Q学习在TCP cwnd adaptation中的使用，其中窗口的经典alternation已被replaced，从而允许协议立即响应先前看到的网络条件。此外，它展现了内存如何在构建探索空间中发挥关键作用，并提出了通过函数逼近来减少此开销的方法。[ 后面这句话实际上不是一个addtional point，还是在讲这个scheme本身，只不过是scheme的细节，which 是自己的巧思体现之处。] </p></blockquote></li></ul><ul><li><p>【<strong>Performance description</strong>】</p><p><strong>The superior performance</strong> of <u>our</u> approach over <em>Baseline XX</em> is <strong>demonstrated through a comprehensive simulation study</strong>, <strong>revealing</strong> xx% and xx% improvement in <em>metric1</em> and <em>metric2</em> respectively,on real-world(classic) traces/topologies. <strong>We also show</strong> <strong>how</strong> <strong>ZZ **（你使用的算法/技巧/工具） **can be used to</strong> (处理上一段所说的性能瓶颈，while 保持了一个好的performance( 高吞吐/低延迟,这个还是要细点说的) ) .</p><ul><li>这里our换成别个描述characteristic的形容词更好，e.g. learning-based/data-driven</li></ul><blockquote><p>通过全面的仿真研究证明了基于学习的方法优于TCP New Reno的性能，对于评估的拓扑，吞吐量和延迟分别提高了33.8％和12.1％。 我们还展示了如何使用函数逼近来显着降低基于学习的协议的内存需求，同时保持相同的吞吐量和延迟。</p></blockquote></li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><p>快到1页</p><p>==这里的表达不应该是“以往的工作有xx缺点，为改进此缺点我们提出…”，而应该是“以往的工作有xx缺点。我们提出了基于xx技术的XX。它的表现…and… ”==</p><h1 id="2-motivation-and-practical-relevance"><a href="#2-motivation-and-practical-relevance" class="headerlink" title="2 motivation and practical relevance"></a>2 motivation and practical relevance</h1><p>快到1页</p><h1 id="3-related-work"><a href="#3-related-work" class="headerlink" title="3 ==related work=="></a>3 ==related work==</h1><blockquote><p>这一段写的贼好，要好好学习！</p></blockquote><p>一栏</p><ul><li><p>传统CC的问题</p></li><li><p>现在CC的问题</p></li><li><p>其他CC相关的工作</p><blockquote><p>应用机器学习来帮助提高TCP性能的其他工作很少。 例如，[13]使用机器学习来构建损耗分类器，以区分链路损耗和拥塞损耗，[14]和[15]使用机器学习来更好地估计RTT和吞吐量。 这些技术都不能直接调整cwnd。</p></blockquote></li></ul><h1 id="4-Q-learning-based-TCP"><a href="#4-Q-learning-based-TCP" class="headerlink" title="4 Q-learning-based TCP"></a>4 Q-learning-based TCP</h1><blockquote><p>整体</p></blockquote><p>​    我们提出的算法TCPLearning是基于强化学习的协议。 在强化学习中，学习主体在没有先验知识的情况下与环境交互，根据所学习的策略选择动作，获得正面或负面的奖励，然后观察环境的下一个状态。学习代理的目标是制定一种策略，即状态空间到动作空间的映射，以最大化长期打折的奖励。 此后，TCPLearning不再想PCC那样使用probe来检测不同动作对性能的影响，而是使用增强算法Q-Learning来学习最佳策略，以根据经验直接在每个状态下做出动作选择。<br>   TCPLearning发送方使用New Reno协议的正常慢启动阶段。 如果慢启动在cwnd超过阈值时结束，则拥塞控制过程将进入拥塞避免阶段，我们的学习算法将接管控制cwnd。 如果由于观察到拥塞而导致慢速启动结束，则New Reno协议继续，并且不使用学习算法。 如果在拥塞避免阶段检测到数据包丢失，则学习算法将停止，并且将应用New Reno协议来实现快速重传和快速恢复。<br>   <strong>与在New Reno中一样，TCPLearning的最重要任务是调整cwnd的大小。 在每个时间段（通常是一个RTT）中，我们的算法通过处理ACK信息来收集吞吐量和RTT值，然后将它们组合成单个效用函数U。效用函数随着吞吐量的增加和延迟的减少而增加。 该算法的目标是了解cwnd大小的变化如何增加效用函数的值。<br>   学习算法使用Q学习来学习策略以选择动作并实现其目标。Q学习使用简单的值迭代更新过程。 在时间t处，对于每个状态st和at处的每个动作，算法按如下方式计算对其预期折现奖励或动作值函数Q（st，at）的更新：</strong></p><p>​    其中rt + 1是时间t +1的即时奖励，αt（st，at）是折现因子，使得0≤γ&lt;1。Q学习是学习率，使得0≤αt（st，at）≤  1和γ将Q（st，at）值存储在称为Q表的表中。 更新Q（st，at）值的时间复杂度为O（| A |），其中| A | 是动作数。</p><hr><blockquote><p>状态</p></blockquote><p>​    系统的状态由四个状态变量表示，<u>状态变量的值通过离散化划分</u>：</p><p>   •新接收到的ACK之间的间隔时间的移动平均值，离散为10个间隔。<br>   •发送方发送的数据包之间的间隔时间的移动平均值，离散为10个间隔。<br>   •当前的RTT与到目前为止找到的最佳RTT之比，离散为10个间隔。<br>   •缓慢启动阈值，离散为10个间隔。</p><hr><blockquote><p>动作</p></blockquote><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/25/210337-366485.png" alt="image-20201025210336629"></p><p>​    表II总结了更改cwnd的可用操作。 </p><p>​    奖励函数基于效用值的变化：</p><p>​                U = loge（吞吐量）-δ×loge（延迟）吞吐量</p><p>​    其中δ表示延迟相对于效用函数的相对重要性。 在我们的实验中，δ设置为1。</p><p>​    奖励函数等于：</p><ul><li>+2，如果效用在时间段t之后增加</li><li>-2，如果效用在时间段t之后减少。    </li></ul><p>​    其中t设置为0.1s（在我们的实验中为一个RTT）</p><h1 id="5-FUZZY-KANERVA-BASED-TCP-Q-LEARNING"><a href="#5-FUZZY-KANERVA-BASED-TCP-Q-LEARNING" class="headerlink" title="5  FUZZY KANERVA-BASED TCP Q-LEARNING"></a>5  FUZZY KANERVA-BASED TCP Q-LEARNING</h1><blockquote><p>先讲总体的思路，再讲细节的设计</p></blockquote><blockquote><p>==对应于我就是先讲总体的流程，然后再讲 1. lstm的设计  2. attention的设计（不仅能提高观察，还能提高性能 !  理由，在平缓的时候关注点能平坦,,, 在剧烈变化的时候关注点能聚焦… –&gt; 需要做个对比试验，此外，关于理由还是要再想清楚点.. ）==</p></blockquote><ul><li><p>function approximator的重要性</p><ul><li><p>现有的一些方法，以及他们存在的一些问题</p></li><li><p>我们使用的Kanerva编码的原理和formulation，以及如何融入我们这个框架里面的 【创新和修改部分】</p><blockquote><p>请注意，这里阐述细节并不是为了讲算法原理，而是要讲清楚如何讲算法应用到我们这里面来的</p></blockquote></li><li><p>给出伪代码</p></li><li><p>描述伪代码的流程 ( lines xx-xx ) ，这里还分析了下代码的时空复杂度</p></li></ul></li></ul><h1 id="6-Performance-Evaluation"><a href="#6-Performance-Evaluation" class="headerlink" title="6 Performance Evaluation "></a>6 Performance Evaluation <h2 id="Performance"></h2></h1><ul><li>实验设置<ul><li>评估了三个方法，baseline是New Reno</li><li>单源拓扑上测试了性能，哑铃状拓扑测试了公平性，每个算跑8次</li><li>链路设置：RTT为100ms；每800s在7.5Mbps和2.5Mbps之间切换；缓冲区大小为BDP，which is 50个数据包</li><li>每个算法跑了8次</li></ul></li></ul><blockquote><p>我们使用基于ns-3的数据包级仿真，通过与TCP New Reno进行比较，来评估在不同带宽条件下TCPLearning，CMAC和Fuzzy TCPLearning的性能。 我们从图1（a）所示的单瓶颈网络开始，然后将评估范围扩展到图1（b）所示的更复杂的多流网络，以进行与公平相关的研究。 我们使用这些拓扑来演示受控环境中学习的特征，并显示对吞吐量和延迟的影响。 瓶颈带宽（在路由器-接收器链路上）每800s交替在7.5Mbps和2.5Mbps之间切换。 网络RTT设置为100ms，缓冲区大小设置为BDP，在我们的仿真中为50个数据包。 我们使用每种算法进行8个实验，并报告平均吞吐量和延迟。 值的标准偏差使用误差线显示。<br>   一种。</p></blockquote><blockquote><p>We use ns-3 based packet level simulations to evaluate the performance of TCPLearning, CMAC and Fuzzy TCPLearning in varying bandwidth conditions by comparing with TCP New Reno. We begin with a single-bottleneck network shown in Fig. 1(a) and later extend the evaluation to a more complex multi-flow network shown in Fig. 1(b) for fairness-related studies. We use these topologies to demonstrate the characteristic features of learning in controlled environments and show the impact on throughput and delay. The bottleneck bandwidth (on the router-receiver link) switches alternately between 7.5Mbps and 2.5Mbps every 800s. The network RTT is set to 100ms and the buffer size is set to BDP, which is 50 packets in our simulation. We conduct 8 experiments using each algorithm and report the average throughput and delay. The standard deviation of values is shown using error bars.</p></blockquote><h2 id="A-TCP-Learning-without-Function-Approximation"><a href="#A-TCP-Learning-without-Function-Approximation" class="headerlink" title="A. TCP-Learning without Function Approximation"></a>A. TCP-Learning without Function Approximation</h2><p>在这种情况下，我们禁用函数逼近并设置探索率？ 对于TCPLearning到0.1。 初始学习率α设置为0.3，并且每隔10s降低0.995倍。 总仿真时间设置为<u>6400s</u>。</p><hr><ul><li><p>平均吞吐量和延迟： 【是一个总体的视图】</p><ul><li><p><strong>陈述了</strong>不同带宽情况下，算法和baseline之间的吞吐量情况差距</p><blockquote><p>​    <strong>图2（a）</strong>比较了TCP New Reno和TCPLearning在瓶颈带宽每800s介于7.5Mbps和2.5Mbps之间切换时获得的<strong>平均吞吐量</strong>。 结果表明，随着瓶颈带宽的波动，TCPLearning的性能明显优于TCP New Reno。 我们观察到，在7.5Mbps的瓶颈带宽下，TCPLearning的平均吞吐量为6.72Mbps，而TCP New Reno的平均吞吐量为4.46Mbps。 在瓶颈带宽为2.5Mbps的情况下，TCPLearning的平均吞吐量为2.27Mbps，而TCP New Reno的平均吞吐量为2.26Mbps。 我们注意到，由于默认缓冲区大小在100ms的网络RTT和2.5Mbps的瓶颈带宽下是最佳的，因此TCP New Reno充分利用了该缓冲区，并且TCPLearning获得了同样好的性能。</p><p>​    <strong>图2（b）</strong>比较了在相同网络设置下TCP New Reno和TCPLearning实现的<strong>平均RTT</strong>。 结果表明，在瓶颈带宽为7.5Mbps时，TCPLearning的平均RTT为111ms，而TCP New Reno的平均RTT为109ms。 在瓶颈带宽为2.5Mbps时，TCPLearning的平均RTT为114ms，而TCP New Reno的平均RTT为154ms。 在任何瓶颈带宽下，TCPLearning在平均吞吐量方面都优于TCP New Reno。 图2（a）表明，在这种高带宽波动的网络中，TCPLearning将平均吞吐量提高了33.8％。 当考虑图2（b）所示的延迟时，尽管TCPLearning的性能稍差一些，但在这种情况下，在2.5Mbps的瓶颈带宽下性能下降了1.8％，在7.5Mbps的瓶颈带宽下，其性能优于TCP New Reno 26％。 平均而言，TCPLearning可将延迟减少12.1％。</p></blockquote></li><li><p>开始<strong>分析解释</strong>为啥人家会差【我觉得这一段批评classic的，我可以学习下】，我们会好</p><p>请注意，<strong>要用图片来佐证你的分析</strong></p><blockquote><p>​    我们观察到，TCP New Reno的平均吞吐量为4.46Mbps，远小于瓶颈带宽7.5Mbps。 这是因为TCP New Reno的预定义的拥塞避免算法使cwnd超出了连接所能支持的范围，最终使网络拥塞，最终导致cwnd和吞吐量显着下降。 <u>更糟糕的是，由于TCP New Reno算法无法存储过去的操作以及这些操作对性能的影响，因此它会重复相同的行为。 图3显示了在模拟TCP New Reno期间cwnd的大小与时间的关系。 该图表明，该算法反复做出相同的错误决策，从而降低了性能。</u><br>   另外，TCP new Reno在cwnd每次<u>显着下降之后需要花费大量时间来恢复</u>，因为它必须在避免拥塞阶段线性增加cwnd。 但是，TCPLearning通过学习经验来克服了这一缺陷。 图3还显示了在TCPLearning仿真期间，cwnd的大小与时间的关系。 该图显示，随着学习过程的进行，TCPLearning进行了各种实验，这些实验会修改cwnd直到110s。  110s之后，学习到的动作值函数Q（s，a）收敛到最佳动作值函数Q ∗（s，a）。这时，TCPLearning找到一个最佳动作，该动作充分利用了缓冲区并且不会触发任何动作 数据包丢失。 这种习得的动作使cwnd足够大，可以达到良好的性能，但是比发生包丢失的上限稍小。 通过这种最佳操作获得的高吞吐量将保持稳定，直到800s之后，瓶颈带宽才会切换。</p></blockquote></li></ul></li></ul><hr><blockquote><p>讲完整体视图/情况  以及 为什么会这样 之后，开始讲实时的指标 ( 细化 )</p></blockquote><ul><li><p>实时吞吐量 【还是踩了别人一脚，分析也比较少了</p><blockquote><p>​    图4显示了TCP New Reno和TCPLearning的实时吞吐量，其中每800s的高带宽在7.5Mbps和2.5Mbps之间切换。 该图显示，当瓶颈带宽为7.5Mbps（在最初的800秒钟内）时，TCP New Reno会经历重复的数据包丢失，从而导致平均吞吐量较低且不稳定。 当瓶颈带宽切换到一个较小的值（800s后为2.5Mbps）时，TCP New Reno会充分利用缓冲区并获得高而稳定的吞吐量。 我们观察到，在使用TCP New Reno时，那些具有高瓶颈带宽的方案会有效并严重降低吞吐量。 但是，波动的瓶颈带宽对TCPLearning实现的吞吐量影响很小。 如图4所示，TCPLearning用110s来学习7.5Mbps瓶颈带宽时的最佳策略，并保持高而稳定的吞吐量，直到800s。 当瓶颈带宽在800s之后切换到2.5Mbps时，TCPLearning会非常迅速地收敛，并且仍然可以实现稳定的吞吐量，直到瓶颈带宽再次切换为止。</p></blockquote></li><li><p>实时RTT 【</p><blockquote><p>图5显示了在上述相同带宽切换情况下TCP New Reno和TCPLeaning的实时RTT。 我们发现，在瓶颈带宽波动的情况下，TCPLearning比TCP New Reno实现了更稳定和更低的RTT。</p></blockquote></li></ul><h2 id="B-TCPLearning-with-Function-Approximation-We"><a href="#B-TCPLearning-with-Function-Approximation-We" class="headerlink" title="B. TCPLearning with Function Approximation We"></a>B. TCPLearning with Function Approximation We</h2><blockquote><p>我们通过将CMAC算法和Fuzzy TCPLearning算法应用于图1（a）所示的相同网络拓扑来评估其性能。  CMAC算法将状态动作空间划分为一组不同的图块，并创建多个图块以在学习中提供粗粒度和细粒度的概括。 在我们的实验中，我们使用5个切片，每个切片有3,125个切片，因为我们有5个可能的操作和4个状态变量，每个变量均等地划分为5个间隔。 要学习动作值，我们需要存储15625个θ值，这些值等于每个平铺3125个图块乘以5个平铺。 由于每个平铺都有大的平铺，因此需要较少的内存来存储所有θ值。  Fuzzy TCPLearning算法将函数逼近与连续的隶属度等级结合使用，以控制并显着减少存储学习值（对于TCPLearning而言是Q表）所需的内存量，同时保持性能。<br>   为了进行实验，我们首先随机生成一组100个原型，然后初始化相应的θ值。 然后，使用等式2通过Q学习过程更新每个原型的θi值。</p></blockquote><ul><li><p><strong>平均吞吐量和延迟</strong></p><blockquote><p>图2还比较了CMAC和Fuzzy TCPLearning在两个交替的瓶颈带宽下获得的平均吞吐量和延迟。我们观察到，在两个不同的瓶颈带宽上，CMAC和Fuzzy TCPLearning在吞吐量和延迟方面都优于TCP New Reno。我们注意到，当瓶颈带宽为7.5Mbps时，与TCPLearning相比，CMAC和Fuzzy TCPLearning的吞吐量都有轻微下降。 当瓶颈带宽为2.5Mbps时，可以观察到几乎相同的吞吐量。 此外，就两个瓶颈带宽的延迟而言，CMAC和Fuzzy TCPLearning的性能均比New Reno更好，而性能比TCPLearning差。 我们得出结论，就吞吐量和延迟而言，平均而言，TCPLearning表现最佳。 但是，利用功能逼近技术，CMAC和模糊TCPLearning可以显着减少内存使用，同时实现可比的性能。</p></blockquote></li><li><p><strong>减少内存使用的影响</strong></p><blockquote><p>TCPLearning算法分配内存以存储可能遇到的50,000个状态操作对中的每对。 由于4个字节用于存储与一个状态操作对相对应的Q值，因此TCPLearning使用200KB的内存存储。 相反，CMAC算法仅需要存储θ值，该值可能远小于状态动作对的数量。 我们的实验中使用的θ值总数为15,625，最终的内存使用量为62.5KB，不到TCPLearning使用的内存的1/3。 模糊TCPLearning算法为100个状态-动作对分配存储。 由于需要20个字节来存储一个状态-动作对，另外400个字节用于存储100个原型的θ值，因此它仅使用2.4KB内存，因此非常适合物联网应用。</p></blockquote></li></ul><h2 id="C-Fairness-Observations"><a href="#C-Fairness-Observations" class="headerlink" title="C. Fairness Observations"></a>C. Fairness Observations</h2><p>​    我们通过评估图1（b）所示的哑铃网络拓扑中的性能来评估TCPLearning算法的公平性。 该拓扑包括<u>2个发送器和2个接收器，它们在100ms RTT时共享2.5Mbps的瓶颈带宽。 瓶颈路由器缓冲区大小设置为100个数据包</u>。 两个流中的数据传输同时开始。 表III显示了TCP New Reno和TCPLearning的两个竞争流的平均吞吐量。 我们观察到，使用TCP New Reno和TCPLearning两种流的平均吞吐量几乎相同，因此在the那教的公平性指数中得分均相等。</p>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QTCP, Adaptive Congestion Control with Reinforcement Learning</title>
      <link href="/ExtensiveReading/CC/Q-TCP/"/>
      <url>/ExtensiveReading/CC/Q-TCP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    下一代网络访问技术和Internet应用程序增加了向具有传统拥塞控制协议的用户提供令人满意的体验质量的挑战。 在广泛的网络场景下，通过根据特定的网络体系结构或应用程序修改核心拥塞控制方法来优化TCP性能的努力并未得到很好的推广。 这种限制源于基于规则的设计原理，其中，性能与网络的观察状态到相应操作之间的预定映射有关。 因此，这些协议无法适应其在新环境中的行为，也无法从经验中学习以获得更好的性能。 我们通过在我们称为QTCP的方法中将基于增强的Q学习框架与TCP设计集成在一起来解决此问题。  QTCP使发送者能够以在线方式逐渐了解最佳拥塞控制策略。  QTCP不需要硬编码的规则，因此可以推广到各种不同的联网方案。 此外，我们开发了一种广义的Kanerva编码函数逼近算法，该算法降低了值函数的计算复杂度和状态空间的可搜索大小。 我们展示了QTCP在保持低传输延迟的同时，提供了59.5％的更高吞吐量，从而胜过了传统的基于规则的TCP。</p><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li>这篇由于篇幅够长，所以逻辑上的展开比DCOSS’16的那一篇要好不少，尤其是还有不少[好词好句好图](#good sentense &amp; good pics)值得学习(introduction的论述也可以摘抄)</li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1. introduction"></a>1. introduction</h1><ul><li><p>这段抨击rule-based CC特别值得学习</p><ul><li><p>指出classical CC的特征rule-based 并解释 rule-based的具体体现是什么</p><p>This limitation stems from the fact that these protocols are built on the common concept of relying on <u>pre-configured</u> rules to guide the behavior of end hosts (e.g., how to change the congestion window size) given specific observations of the surrounding environment (e.g., mea- sured throughput, RTT). For example, the NewReno protocol uses the well-known additive increase, multiplicative decrease (AIMD) strategy, and Cubic adopts a well-crafted function to adjust the congestion window size (cwnd) given feedback from the receiver.</p></li><li><p>说明rule-based带来了两方面的影响【我觉得缺少引用】</p><p>This rule-based design can cause two problems: First, it causes congestion control protocols to be unable to adapt to new scenarios when a network environment changes. Since different kinds of networks differ in significant ways with respect to bandwidth, delay and network topology, a given TCP flavor that works well for a specific network might not work in another. Second, the rules of operation are usually built upon standard assumptions or the network model. When either changes, the fixed mapping between observation and actions means that TCP does not intelligently adjust its behavior by learning from experience. As a result, the protocol repetitively adopts the same cwnd changing rules that bring sub-optimal performance, without the flexibility to adjust behaviors for better performance (Sec. 2).</p></li></ul></li><li><p>proposed approach:</p><ul><li><p>先描述这是个什么</p><ul><li><p>功能、使用的工具简介 ( 主要要针对你要抨击的点 )</p><blockquote><p>在这项工作中，我们使用强化学习（RL）设计一种称为QTCP（基于Q学习的TCP）的拥塞控制协议，该协议可以自动识别最佳的拥塞窗口（cwnd）变化策略，并对此进行了观察。 在线方式连接周围的网络环境。 它不需要手工制定的规则集或耗时的离线培训过程。  RL使代理能够根据实时反馈调整其行为，并通过阻止无效行为来避免重复相同的错误。 </p></blockquote></li><li><p>主打的特点 ( 还是要针对你要抨击的点 )</p><blockquote><p>我们在QTCP中利用此功能，使发件人可以动态地学习不同的策略以更好地适应各种网络情况，而不必机械地遵循固定的规则。 具体来说，QTCP基于从网络环境收集的性能指标的测量值，连续更新协议的可能状态-动作对的值，并使用Q学习算法搜索最佳动作，即如何调整Cwnd。 在特定状态下，以使发送者的长期回报最大化。</p></blockquote></li></ul></li></ul></li><li><p>Challenges and Innovations: </p><blockquote><p>尽管已证明RL在许多困难的问题（例如Go，自动驾驶）上表现良好，但由于问题的连续高维状态空间，将其应用于TCP拥塞控制尤其具有挑战性。 状态空间的大小可以随状态空间的大小呈指数增长，从而导致存储状态操作值所需的表的大小显着增加。 在如此大的表中更新条目通常非常耗时，这会导致培训时间过长。 为了加快学习过程2327-4697并使QTCP易于处理，我们应用了函数逼近[6]，这是一种有效的方法，可以减少使用抽象状态表示进行搜索和探索所需的状态空间大小。 尽管有许多函数逼近算法可用，但我们选择Kanerva编码[7]，也被称为稀疏分布式内存（SDM），因为它的复杂度低，收敛速度快，并且在解决大，高维和连续状态的问题上的有效性 空格。  Kanerva编码的思想考虑了这样一种设置：整个状态空间由精心选择的状态空间子集表示，基于该子集存储训练值并评估派生的策略，从而显着降低了内存消耗和价值训练的计算复杂性 。 但是，我们发现，由于状态空间子集的选择不当，原始Kanerva编码的性能在实践中并不令人满意。 为了解决这个问题，我们提出了一种新的方法，即基于泛化的Kanerva编码，该方法可以调整状态空间子集的每个条目的抽象级别，从而在探索该子集时动态重新分配该子集以找到其接近最佳的结构。 状态空间。 我们的方法允许根据访问状态来更改状态抽象的粒度，其中将检查具有不正确泛化级别的子集的不太重要的条目，并将其替换为提供更好泛化的条目。 这克服了传统的Kanerva编码算法及其变体的局限性，使QTCP具有更快的收敛速度和更好的整体学习性能。</p></blockquote></li><li><p>Contribution</p><p>• 我们描述了QTCP，这是一种基于Q学习的拥塞控制协议，它可以自动学习有效的策略来调整cwnd以在线方式实现高吞吐量和低延迟。 这从根本上改变了以前类似NewReno的TCP变体的设计，这些变体需要固定的手动选择的规则。<br>  • 我们提出了一种新型的Kanerva编码算法，该算法在应用于大型复杂状态空间时可以很好地缩放，并且可以大大加快收敛速度并提供稳定的性能。 我们的算法允许学习值不再以表格形式存储，因此消除了在应用于大规模问题域时RL技术的重要限制，例如无法处理巨大状态。</p></li></ul><h1 id="2-Background-and-motivation"><a href="#2-Background-and-motivation" class="headerlink" title="2. Background and motivation"></a>2. Background and motivation</h1><h1 id="3-QTCP-APPLY-Q-LEARNING-TO-TCP-CONGES-TION-CONTROL"><a href="#3-QTCP-APPLY-Q-LEARNING-TO-TCP-CONGES-TION-CONTROL" class="headerlink" title="3. QTCP: APPLY Q-LEARNING TO TCP CONGES- TION CONTROL"></a>3. QTCP: APPLY Q-LEARNING TO TCP CONGES- TION CONTROL</h1><ul><li><p>good sentenses</p></li><li><p>逻辑</p></li><li><p>开场白如上</p></li><li><p>overveiw of Q-TCP</p><ul><li><p>交互框架</p></li><li><p>强化学习问题的五元素 简介（具体的再后面有更加翔实的接好</p><blockquote><p>这里给出了一个很好的提醒，应该是“马尔可夫<strong>过程</strong>”和“强化学习<strong>问题</strong>”，以前一直说的是“马尔可夫<strong>问题</strong>”，which不正确哇，MDP是用于RL问题建模中的一部分而已。</p></blockquote></li><li><p>实现中的challenge以及我们的解决方案（华彩</p></li></ul></li></ul><p>……</p><h1 id="good-sentense-amp-good-pics"><a href="#good-sentense-amp-good-pics" class="headerlink" title="good sentense &amp; good pics"></a>good sentense &amp; good pics</h1><ul><li><p>preliminary statements of Section 3</p><p>​    在本节中，我们探索使用RL来自动设计拥塞控制策略。RL具有克服上述基于规则的TCP问题的潜力，因为它可以使代理从过去的经验中学习，而无需手动制定规则或网络场景的先验知识。<br>​    Specifically，**<u>我们讨论如何将经典的RL算法Q学习应用于拥塞控制问题和提出QTCP领域</u>**：一种新的拥塞控制协议，该协议使发送者可以通过与 网络方案。</p></li></ul><hr><ul><li>good pics</li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/26/111948-47405.png" alt="image-20201026111944751"></p>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spinningUpCodesReading</title>
      <link href="/Codes/spinningUpCodesReading/"/>
      <url>/Codes/spinningUpCodesReading/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rlDemo</title>
      <link href="/Codes/rlDemo/"/>
      <url>/Codes/rlDemo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Q-learning"><a href="#Q-learning" class="headerlink" title="Q-learning"></a>Q-learning</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhdGF3aGFsZWNoaW5hL2xlZWRlZXBybC1ub3Rlcy9ibG9iL21hc3Rlci9jb2Rlcy9RLWxlYXJuaW5nL21haW4ucHk=">base代码<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 老是说我没有权限就很烦...</span></span><br><span class="line">sudo /home/hesy/.conda/envs/py36/bin/python main.py <span class="comment"># use default config  0.9,0.9,0.1,200,0.1,500</span></span><br><span class="line">sudo /home/hesy/.conda/envs/py36/bin/python main.py --gamma 0.95 --me 100</span><br><span class="line">sudo /home/hesy/.conda/envs/py36/bin/python main.py --gamma 0.95 --es 0.99 --me 100</span><br></pre></td></tr></table></figure><ul><li><p>ε-decay和ε-start还有ε-end是耦合的，第一个感觉比较难调整，就调后面两个好了</p>  <img   src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031909-640019.png" alt="image-20201022023149453" style="zoom: 50%;" /><ul><li><p>先用默认参数跑了下，发现其实100步已经妥妥收敛了（右边），所以<strong>me果断设置100</strong> ，确实还不错（见下）</p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/030751-545506.png" alt="image-202010220307622" style="zoom: 67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031416-949404.png" alt="image-20201022041939" style="zoom:67%;" /></p></li><li><p>最短路径是15步，所以<strong>gamma</strong>我取了个1-1/15，<strong>约等于0.95</strong></p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/025053-715031.png" alt="image-20201022025051942" style="zoom: 67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031206-822872.png" alt="image-20201022024836105" style="zoom:50%;" /></p><p>目前看效果还不错（如上），肯定是train好了，接着调</p></li><li><p><strong>ee 调到0.99</strong>，希望一开始探索多一点</p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031126-830561.png" alt="image-20201022025738159" style="zoom:67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/031206-89443.png" alt="image-20201022025802328" style="zoom:67%;" /></p><blockquote><p>可以看到一开始探索多了以后，学习得居然也快了,说明探索到了好的方法</p></blockquote></li><li><p>再分别试试<strong>调大学习率</strong>（0.15）和<strong>调小学习率（0.05</strong>）</p><p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/030056-455700.png" alt="image-20201022030055460" style="zoom:67%;" /><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/030335-443486.png" alt="image-20201022030055460" style="zoom:67%;" /></p><blockquote><p>学习率大了以后果然学的就是快hhh </p></blockquote></li></ul></li></ul><h1 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>游戏：CartPole-v0，action是两维度(左和右，分别用0和1表示)， state是四维的（$x,\overset{·}x,\theta,\overset{·}\theta$）（位置，速度，杆子与竖直方向的夹角，角度变化率）；左移或者右移小车的<em>action</em>之后，<em>env</em>会返回一个+1的<em>reward</em>。其中<em>CartPole-v0</em>中到达200个<em>reward</em>之后，游戏也会结束，而<em>CartPole-v1</em>中则为<em>500</em>。最大奖励（<em>reward</em>）阈值可通过前面介绍的注册表进行修改。</p><h2 id="错误记录-amp-修正"><a href="#错误记录-amp-修正" class="headerlink" title="错误记录 &amp; 修正"></a>错误记录 &amp; 修正</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line 158, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">eval</span>(cfg)</span><br><span class="line">  File <span class="string">&quot;main.py&quot;</span>, line 130, <span class="keyword">in</span> <span class="built_in">eval</span></span><br><span class="line">    action = agent.choose_action(state,train=False)  <span class="comment"># 根据当前环境state选择action</span></span><br><span class="line">  File <span class="string">&quot;/home/hesy/rlreview/leedeeprl-notes/codes/dqn/agent.py&quot;</span>, line 76, <span class="keyword">in</span> choose_action</span><br><span class="line">    q_value = self.target_net(state)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py&quot;</span>, line 541, <span class="keyword">in</span> __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/rlreview/leedeeprl-notes/codes/dqn/model.py&quot;</span>, line 29, <span class="keyword">in</span> forward</span><br><span class="line">    x = F.relu(self.fc1(x))</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py&quot;</span>, line 541, <span class="keyword">in</span> __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/modules/linear.py&quot;</span>, line 87, <span class="keyword">in</span> forward</span><br><span class="line">    <span class="built_in">return</span> F.linear(input, self.weight, self.bias)</span><br><span class="line">  File <span class="string">&quot;/home/hesy/.conda/envs/py36/lib/python3.6/site-packages/torch/nn/functional.py&quot;</span>, line 1370, <span class="keyword">in</span> linear</span><br><span class="line">    ret = torch.addmm(bias, input, weight.t())</span><br><span class="line">RuntimeError: Expected object of device <span class="built_in">type</span> cuda but got device <span class="built_in">type</span> cpu <span class="keyword">for</span> argument <span class="comment">#2 &#x27;mat1&#x27; in call to _th_addmm</span></span><br></pre></td></tr></table></figure><blockquote><p>choose_action在eval的时候默认选择了CPU，但是模型可能load在GPU上..</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/18/130645-532470.png" alt="image-20201118130642905"></p></blockquote><ul><li>==？==我想问下这里使用CPU进行evaluation是必须的么？是考虑到不想把变量转移到GPU上增加开销才写死到CPU上进行evaluation的吗？写死的话…就会出现问题….</li></ul>]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MORL</title>
      <link href="/PaperReading/MORL/"/>
      <url>/PaperReading/MORL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>A Generalized Algorithm for Multi-Objective Reinforcement Learning and Policy Adaptation<br>NIPS’19  普林斯顿</p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>我们引入了一种具有==线性偏好==的多目标强化学习（MORL）的新算法(with linear preferences)，其目标是能够对新任务进行少量调整。 在MORL中，目的是学习有关多个竞争目标的策略，这些目标的相对重要性（偏好）对于代理人是未知的。 虽然这减轻了对标量奖励设计的依赖，但是策略的预期收益会随着偏好的变化而发生显着变化，这使得学习单一模型以在不同的偏好条件下产生最优策略具有挑战性。 我们提出Bellman方程的广义形式，以学习在所有可能的偏好范围内获得最优政策的单个参数表示。 <strong>在初始学习阶段之后，我们的代理可以在任何给定的首选项下执行最佳策略</strong>，或者自动通过很少的样本来推断潜在的首选项。 在四个不同领域的实验证明了我们方法的有效性。</p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><blockquote><p>我们解决了MORL中的两个具体挑战：</p><ol><li>提供具有线性偏好的MORL多目标版本Q学习的理论收敛性结果，以及</li><li>证明有效利用深度神经网络将MORL扩展到更大的领域。 </li></ol><p>我们的算法基于两个关键的见解</p><ol><li>带有偏好的Bellman方程[10]的广义版本的最优算子是有效收缩，以及</li><li>多目标Q值的凸包络的优化确保了 偏好与相应的最优政策之间的有效协调。 我们使用HER对有采样优先级的经验回放[11]和homotopy optimization[12]的学习过渡，以确保易于学习。 此外，我们还演示了如何通过策略梯度和对偏好参数的随机搜索的组合，使用训练有素的模型自动推断新任务的隐性偏好（仅提供标量奖励）。</li></ol><p>此外，我们还演示了如何使用我们训练有素的模型，通过结合政策梯度，在仅提供标量奖励的情况下自动推断新任务的隐藏偏好。</p></blockquote><h1 id="2-Background"><a href="#2-Background" class="headerlink" title="2 Background"></a>2 Background</h1><h2 id="MOMDP"><a href="#MOMDP" class="headerlink" title="MOMDP"></a>MOMDP</h2><ul><li>Parrto Frontier</li><li>CCS</li></ul><h2 id="related-work"><a href="#related-work" class="headerlink" title="related work"></a>related work</h2><ul><li>MORL <ul><li>single-policy 在给定preference的情况下学习一个策略 &amp; multiple-policy 在不同preference情况下学习多组相应最优的策略</li><li>scalarized Q-learning  使用ourler loop去搜索最佳策略(OLS)<ul><li>[里面引用了2016年开源的那篇文章]</li></ul></li></ul></li></ul><h1 id="3-算法"><a href="#3-算法" class="headerlink" title="3 算法"></a>3 算法</h1><ul><li>T $\mathcal{T}$ 单目标和多目标中Q函数的贝尔曼优化算子</li><li>H $\mathcal{H}$  单目标和多目标中Q函数的optimal filter</li><li>d( Q,Q’ )</li><li>$L^A(\theta)$ 与$L^B(\theta)$ </li><li>learning algorithm 以及 policy adaption两个part</li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/25/140616-919388.png" alt="image-20201025140615145"></p><h1 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4 Experiments"></a>4 Experiments</h1><ul><li></li><li><p>实验设置</p><ul><li>指标 CR （Coverage Ratio）、AE（Adaptation Error）、UT（Average Utility）</li><li>四个场景<ul><li>DST FTN Dialog  SuperMario</li></ul></li><li>三个baseline<ul><li>==check下哪个可以输出连续动作哇…==</li></ul></li></ul></li><li><p>结果</p><ul><li>几个指标上的胜利，但是提升的点并不是很多哇</li><li>scalability</li><li>sample efficiency</li><li>policy adaptation</li><li>revealing underlyging preferences<ul><li>这部分的结果分析的意思应该是，policy adaptaion不是一个必要环节，one of its 作用就是去uncover underlying preferences.</li></ul></li></ul></li></ul><h1 id="questions"><a href="#questions" class="headerlink" title="questions"></a>questions</h1><ul><li><p>optimality filter 指的是argmax 或者 sup ?</p></li><li><p>o.w.什么意思…</p></li><li><p>truncated multivariable Gaussian distribution 是什么意思</p></li></ul><p>prediction based</p><hr><h1 id="abstract-1"><a href="#abstract-1" class="headerlink" title="abstract"></a>abstract</h1><p>许多现实世界中的控制问题都涉及目标冲突，我们需要一套密集而高质量的控制策略，这些策略对于不同的目标偏好是最优的（称为帕累托最优）。 尽管为解决此类问题已进行了多目标强化学习（MORL）的广泛研究，但对于复杂连续机器人控制的多目标优化仍处于探索中。 在这项工作中，我们提出了一种有效的进化学习算法，通过扩展最先进的RL算法并提出一种新颖的预测模型来指导学习过程，从而找到连续机器人控制问题的帕累托集近似值 。 除了有效地发现Pareto前沿的单个策略外，我们还通过Pareto分析和内插法构造了一组连续的Pareto最优解。 此外，我们设计了七个具有连续动作空间的多目标RL环境，这是第一个评估MORL算法解决各种机器人控制问题的基准平台。 我们对提出的基准问题测试了先前的方法，并且实验表明，与现有算法相比，我们的方法能够找到更密集，质量更高的帕累托策略集。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><blockquote><p>​    多目标问题已经引起了广泛的关注，因为大多数现实情况都涉及对不同性能指标的权衡。 在机器人控制中尤其如此，其中性能概念通常涉及不同的冲突目标。例如，当为运行中的四足机器人设计控制策略时，我们需要考虑两个相互矛盾的目标：运行速度和能效。与单目标环境相比，单目标环境使用单个标量值来衡量性能，并且在存在单个最佳解决方案的情况下，对于多目标问题，性能是使用多个目标进行衡量的，并且存在多个最佳解决方案。 一种最优策略可能会以降低能源效率为代价来偏爱高速度，而另一种最优策略可能会以降低速度为代价偏向于高能量效率。 通常，根据这两个度量之间的选择权衡，存在许多最佳策略。 最后，由人负责在不同指标之间选择偏好，这决定了相应的最佳策略。</p><p>​    解决多目标控制问题的一种流行方法是计算meta policy（Chen等，2018）。 元策略是一种通用策略，它不一定是最佳策略，但可以相对快速地适应性能目标之间的不同折衷。 不幸的是，这种adaptive的控制策略不一定是最优的。例如，为四足机器人适应通用元控制策略以使其尽可能快地运行，通常会导致该指标的策略欠佳。 例如，为四足机器人适应通用元控制策略以使其尽可能快地运行，通常会导致该指标的策略欠佳。</p><p>​    在这项工作中，我们表明，获得多目标机器人控制的最佳性能折衷的有效代表是一组帕累托控制策略。 我们的经验表明，不能使用单个连续的策略族来有效地表示帕累托集。 相反，帕累托集由一组不相交的策略族组成，每个策略族在参数空间中占据一个连续的流形，并负责性能空间中帕累托前沿的一个部分（图1）。</p><p>为了找到这种帕累托表示，我们提出了一种有效的算法来计算帕累托策略集。 我们的算法分两个步骤进行。 第一步，我们使用基于a novel prediction-guided evolutionary learning algorithm，在帕累托前沿找到密集且高质量的策略集。 在每一generation中，每种策略都适合使用分析模型，以预测沿每个优化方向的预期改进。 然后解决优化问题，以选择可以最好地改善Pareto质量的策略和相关的优化方向。 在第二步中，我们对计算出的Pareto最优策略进行Pareto分析，以识别不同的策略系列，并为每个策略系列计算连续的表示形式。</p><p>​    ==上面这一段的翻译不是很好==</p><p>​    为了对我们提出的算法进行基准测试，我们设计了一组具有连续动作空间的多目标机器人控制问题。 可以使用基于物理的模拟系统来评估每个策略的性能（Todorov等，2012）。 我们的实验表明，与现有方法相比，该算法可以有效地找到一组质量更高的帕累托最优策略。 此外，基于这些策略，它可以重建跨越整个帕累托前沿的连续策略系列。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PaperReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rlReview</title>
      <link href="/Summary/rlReview/"/>
      <url>/Summary/rlReview/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="回顾时-一下子没想出来的问题"><a href="#回顾时-一下子没想出来的问题" class="headerlink" title="回顾时 一下子没想出来的问题"></a>回顾时 一下子没想出来的问题</h1><ul><li><p>强化学习相对于监督学习为什么训练会更加困难？（强化学习的特征）</p><ul><li><p>强化学习处理的多是序列数据，其很难像监督学习的样本一样满足IID（独立同分布）条件。( needs trivial handling )</p></li><li><p>强化学习有奖励的延迟（Delay Reward），即在Agent的action作用在Environment中时，Environment对于Agent的State的奖励的延迟（Delayed Reward），使得反馈不及时。</p></li><li><p>相比于监督学习有正确的label，可以通过其修正自己的预测，强化学习相当于一个“试错”的过程，其完全根据Environment的“反馈”更新对自己最有利的Action。</p></li></ul></li><li><p>为什么在马尔可夫奖励过程（MRP）中需要有<strong>discount factor</strong>?</p><ul><li><p>有些马尔可夫过程是<strong>带环</strong>的，它并没有终结，然后我们想<strong>避免这个无穷的奖励</strong>；</p></li><li><p>当前步对遥远未来的reward的<strong>贡献</strong>比较小，所以用discount factor弱化未来的奖励在当前步骤的累加值；</p></li><li><p>考虑奖励的<strong>不确定性</strong>：假设在从当前步采取同样的action开始，采样不同的trace，可能有的会会有最终奖励、有的不会（这里以打游戏为例，通关得到的最终奖励远大于平时每个步骤得到的微小奖励 ( 有的设置里面平时的奖励实际上都没有，就只设置最终步骤的奖励 ) ）。综上，未来的奖励是受后续trace影响的，也就是不确定的，有一定概率的，所以从这个角度来看，我们也要给这个未来奖励打一个折扣。</p><blockquote><p>从另一个角度思考，考虑不打折扣的情况–》γ都是1的情况下，就很糟糕。</p></blockquote></li></ul></li><li><p>为什么说Sarsa ( on-policy ) 更加保守，而Q-learning ( off-policy ) 更加大胆且鼓励探索呢？</p><p><img src="https://images.weserv.nl/?url=https://datawhalechina.github.io/leedeeprl-notes/chapter3/img/3.18.png" alt="img"></p><ul><li><strong>鼓励探索</strong></li></ul><p>可以看到，虽然都是使用ε-greedy算法选择动作，但是对于同一个动作( especially探索出来的动作 )，Q-learning给分会比较高（毕竟是给了一个argmax的action对应的值哇）。那么一旦给分高了以后，偏向选择这个动作的概率就会大，就会探索出更多以这个action开头的trace，其中说不定能找到一个比之前更好的trace。而如果是Sarsa的话，这一次探索之后该动作对应的Q值一跃成为最大值可能性就小很多了。与之相比，Q-learning其实就是鼓励探索的。</p><ul><li><strong>更加大胆</strong></li></ul><p>一个很经典的例子就是cliffWalking里面，Q-learning的最终解可以贴着悬崖边上走，但是SARSA是不可以的，这是因为SARSA会考虑到这个贴着悬崖的状态有ε/4的概率会选择向下的动作，然后掉下去( 非最优动作的探索率是 ε/|A|,这里一共有四个动作:上\下\左\右 )，所以这ε/4的低分(死亡)会把这个状态的分数拉下去(而远离悬崖的状态都安全多了，不会有掉下去的概率)；但是Q-learning是只看这个状态会导致的最好结果，which means只看到最后成功的结果，忽视会掉下去的情况，倾向于”铤而走险“。所以个人认为，单纯从找到一个解决方案来看，还是Q-learning比较占优势。</p><blockquote><p> <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGV2aWxtYXljcnk4MTI4Mzk2NjgvcC8xMDMxMjY4NS5odG1s">但是实际中SARSA会比Q-learning表现得更好<i class="fa fa-external-link-alt"></i></span> 其实我觉得这个还得看我们用强化学习来解决什么问题了。我们是要用它来找到一个最优解，还是要让他从头到尾”完备、安全“地做完某事。博客中显然是选择了前一种的概念。</p></blockquote><blockquote><p><code>&quot;那么一旦给分高了以后，偏向选择这个动作的概率就会大&quot;</code></p><p> 这里要区分一个概念：对于ε-greedy来说，除了使得值函数的值最大的那个action以外，其他所有的action的选取概率实际上都是一样的。如果想要按照值函数大小为概率来选择动作的话，可以考虑玻尔兹曼策略或者UCB策略。</p><p>所以，这句话的隐含意思是，<strong>很大可能</strong>这次更新后( 因为加上的是最大值啊喂 )，这个动作对应的Q-value就一跃成为最大值（之一）了，此时其被选取、探索的概率就会变大。</p></blockquote><blockquote><p><strong>个人认为</strong>，Q-learning这方法会跟UCB做赌博机的那个实验效果一样，倾向于<strong>把所有的动作空间都try一遍</strong>（因为一旦概率落到新动作上，如果学习率比较大，那么这个新动作的Q值一下子就会变得很大，一跃成为Q值最大的，所以下次会优先(大概率)选择它，然后就相当于展开了以它为根结点的探索空间）……</p><p>支撑论据：</p><blockquote><p>refer@<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2ODQ2MTg2Ng==">知乎<i class="fa fa-external-link-alt"></i></span>，which第一个高票回复我觉得不对，直接在评论里面怼回去了。</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202010/22/011454-204261.png" alt="image-20201021175117502" style="zoom: 70%;" /><ul><li><p>可以看到同样的情况下，Q-learning收敛比较慢（因为探索的概率更大哇），但是一旦收敛，就比较稳定了。但是Sarsa就不一样，收敛了以后，由于探索性探索到的动作之前没有好好学习到，所以经常会出现锯齿（which Q-learning已经在前期探索到比较好的策略了）[所以<span class="exturl" data-url="aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlZGVlcHJsLW5vdGVzLyMvY2hhcHRlcjMvY2hhcHRlcjM=">有人<i class="fa fa-external-link-alt"></i></span>说的“sarsa因为要兼顾探索所以策略不稳定“是这个意思( 并不是说q-learning就没有兼顾探索了hh) ]</p></li><li><p>另一方面，Sarsa由于缺乏探索性（偏向保守），所以没有收敛到一个最优解，也许需要更长的时间才能收敛到Q-learning的程度 ( 可以看到收敛曲线其实还是在缓慢下降的 )</p></li></ul></blockquote><p>所以动作空间别太大哈，不然不就凉凉了2333 【个人觉得off-policy 学习率大的时候适合动作空间比较小的】</p><blockquote><p>which事实证明并不是的2333….我着实没想通</p></blockquote></blockquote><blockquote><p><strong>异策略可以保证充分的探索性</strong>。例如⽤来评估和改善的策略是贪婪策略，⽤于产⽣数据的探索性策略为探索性策略，如ε-soft策略。  – 郭宪 《深入浅出强化学习：原理入门》</p></blockquote></li></ul><ul><li><p>ε-greedy策略是是ε-soft策略中的一种</p><p>如果“严格”的说，ε-greedy策略是 $\frac{\epsilon}{A(s)}-soft$ 的策略。</p><p>解释请参考<span class="exturl" data-url="aHR0cDovL2ZhbmN5ZXJpaS5naXRodWIuaW8vYm9va3MvcmwzLw==">这个博客<i class="fa fa-external-link-alt"></i></span></p><p>进行符号测试： $\frac{\epsilon}{A(s)}-soft$  成果</p><p>进行符号测试： $ \frac{\epsilon}{A(s)}-soft $  成果</p><p>符号 $$ \frac{\epsilon}{A(s)}-soft$$  测试2</p></li><li><p>值迭代和策略迭代</p><ul><li><p>参考<span class="exturl" data-url="aHR0cDovL3d1bGMubWUvMjAxOC8wNS8wNS8lRTUlQkMlQkElRTUlOEMlOTYlRTUlQUQlQTYlRTQlQjklQTAlRTclQUMlOTQlRTglQUUlQjAoMSktJUU2JUE2JTgyJUU4JUJGJUIwLw==">这个笔记<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>policy iteration 最后收敛的 value V 是当前 policy 下的 value 值（也做对policy进行评估），目的是为了后面的policy improvement得到新的policy；所以是在<strong>显式地不停迭代 policy</strong>。</p><p>而value iteration 最后收敛得到的 value 是当前state状态下的最优的value值。当 value 最后收敛，那么最优的policy也就得到的。虽然这个过程中 policy 在也在隐式地更新，但是<strong>一直在显式更新的是 value</strong> 的，所以叫value iteration。</p><blockquote><p>那从这个角度来看，PG似乎应该属于policy gradient 2333,毕竟是直接对策略进行更改 ( PG中是直接输出策略而非值函数了，也就是update参数实际上就是update策略 。DQN的话update 参数其实是在更新值函数，因为其模型输出是值函数233 ） </p></blockquote></blockquote></li><li><p>SARSA和Q-learning也都是值迭代引出来的，只不过一个是同策略（on-policy），另一个是异策略（off-policy）。至于是TD还是MC，只不过采样方式和训练效率上的差别而已。</p></li></ul></li><li><p>PG和AC的划分标准可以参考<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTY0NTc2OA==">这个知乎<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>A2C实际上是Advantage Actor-Critic的缩写</p></li><li><p><code>在PG策略中，如果我们用Q函数来代替R，那么我们就得到了Actor-Critic方法。</code></p><blockquote><p>所以这里我的理解是：引入了值函数去估计期望累计回报，which作为critic，就是Actor-Critic，有没有baseline并不是最重要的（AC里面，baseline也不一定要用$V(S_t)$ ，不过是因为一般来说，都有了$Q(s,a)$去估计累计期望回报，没道理不用$V(S_t)$作为baseline ,Vanilla PG里面的baseline也是用的$V(S_t)$,但还是PG系列 ）</p></blockquote></li></ul></li></ul><ul><li><p>环境non-deterministic 和 deterministic的区别</p><ul><li><p>取决于state是不是只受action影响，env自己是不是也在演化。</p></li><li><p>比如下棋，俄罗斯方块，你做了你的决定，你的下一个状态不是确定的 ( P(s,a)转移阵不是非0即1的 )</p><p>俄罗斯方块游戏里面的状态是</p></li><li><p>马里奥游戏就是deterministic的</p></li></ul><blockquote><p>网络中，输入的流量矩阵也是一个会引起state变化的，有一定概率的东西，所以也是non-deterministic</p></blockquote><ul><li>non-stationary和non-deterministic异同：env肯定都是在演化的，但是前者env演化的模式并不固定( 以泊松分布为例，env的演化可以符合参数为$\lambda$的泊松分布( non-derterministic ) (这是一个概率分布)，但是$\lambda$参数本身不能随时间变化，否则相当于演化的概率分布发生了变动，也就是演化的模式是不固定的(non-deterministic)  )</li></ul></li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><p>data-whale强化学习教程</p></li><li><p>刘建平的系列博客确实不错,有空回顾下</p><ul><li><p>已完成</p><ul><li><p>8(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTcxNDY1NS5odG1s">价值函数的近似表示与Deep Q-Learning<i class="fa fa-external-link-alt"></i></span>) [NIPS’13] + 9(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTc1NjA3NS5odG1s">Deep Q-Learning进阶之Nature DQN<i class="fa fa-external-link-alt"></i></span>) [NIPS’15]</p><ul><li><p>三种神经网络的输入输出方式</p></li><li><p>NIPS’13 , 改进主要是经验池回放 ,Q-learning–&gt;DQN</p></li><li><p>NIPS’15 , 改进主要是双网络,  DQN –&gt;Nature DQN</p><blockquote><p>注意,<u>双网络并不是DDQN才提出来的</u></p></blockquote></li><li><p>介绍了下CartPole-v0的基本情况</p></li><li><p>8里面说PG用的是交叉熵，我就不是很懂了</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/14/104102-559352.png" alt="image-20201114104101708"></p><ul><li><p><input disabled="" type="checkbox">  【建模思想】奖励设置要均匀，进一步还可以尝试下下归一化 ==其实我是有点疑惑，后面看看能不能找到理论依据==</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/14/111303-795092.png" alt="image-20201114110105580"></p></li></ul></li><li><p>8的评论里面还提到了为何现在用的都是TD(0)：实现方便，如果是多步TD，需要改变buffer的构造，改成( s,a,r,s’,a’,r’,s’’… ) ，比较麻烦。虽然经验表明了TD(λ)在λ&gt;1的时候效果比较好（注意，TD(λ)是给多步TD加了权重，更复杂），但是实际上单步TD就够用了。</p></li></ul></li><li><p>10(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTc3ODA2My5odG1s">Double DQN (DDQN)<i class="fa fa-external-link-alt"></i></span>)</p><ul><li><p>DQN存在过度估计的问题,which我没有细究(原文有),有一些文章(e.g.<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC85Nzg1MzMwMA==">JQWang的知乎专栏<i class="fa fa-external-link-alt"></i></span>)在对论文的详解中有说,但是刘建平这里缺失了</p><blockquote><ul><li><p><input disabled="" type="checkbox">  JQWang的论文解读专栏还是挺详细的</p></li><li><p><input disabled="" type="checkbox">  评论里面提到了过度估计的事情，which感觉还不错。==优先学习一下==</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlZGVlcHJsLW5vdGVzLyMvY2hhcHRlcjcvY2hhcHRlcjc=">DataWhale的教程<i class="fa fa-external-link-alt"></i></span>给的解释还是不错的，但其实我觉得没有说清楚:过高估计本身是没影响的，最重要的还是策略的问题，有了双网络，就能有个理性的target，朝正确的方向更新，本身选动作不是很重要，没选到$\underset{a}argmax Q’(s,a)$的话我就当作探索的一个experience也可以哇，重要的是更新价值函数！！</p></li></ul></blockquote></li><li><p>改进就是 表现网络/当前网络中找action ( via argmax ),在target网络中找Q值</p></li><li><p><input disabled="" type="checkbox">  提到了ICML’16的<span class="exturl" data-url="aHR0cHM6Ly9pY21sLmNjLzIwMTYvdHV0b3JpYWxzL2RlZXBfcmxfdHV0b3JpYWwucGRm">rl tutorial<i class="fa fa-external-link-alt"></i></span> ,也可以翻翻后面几年的</p></li><li><p><input disabled="" type="checkbox">  由S和A得到R, S’和is_end时，R和is_end是根据环境反馈回来的，which对应的是：<strong>S</strong>是否is_end以及S情况下采取A得到的R</p><blockquote><p>确定么？我总感觉是S’是否是end ， V(end_state)=0</p></blockquote></li></ul></li><li><p>11(<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvOTc5NzY5NS5odG1s">Prioritized Replay DQN<i class="fa fa-external-link-alt"></i></span>)</p><ul><li></li></ul></li><li><p>19<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGluYXJkL3AvMTA2MDkyMjguaHRtbA==">AlphaZero<i class="fa fa-external-link-alt"></i></span>建模设计中有奖励回溯的部分</p></li></ul></li></ul></li><li><p><input disabled="" type="checkbox">  抓到一个大佬的<span class="exturl" data-url="aHR0cHM6Ly9odWppYW4uZ2l0Ym9vay5pby9kZWVwLXJlaW5mb3JjZW1lbnQtbGVhcm5pbmcv">gitbook<i class="fa fa-external-link-alt"></i></span> (hujian.gitbook.io)</p></li></ul><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li><p><input disabled="" type="checkbox">  【强化学习】中Q-learning,DQN等off-policy算法不需要重要性采样的原因</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzg5NTMzOS9hcnRpY2xlL2RldGFpbHMvODQ4ODExNjk=">CSDN<i class="fa fa-external-link-alt"></i></span></p></li><li><p>同策略 采样大，收敛慢； Q-learning 是异策略，还不需要importance sampling </p><blockquote><p>但是我看Q-learning也是一步一更新哇…感觉采样大这个劣势并没有利用好？</p></blockquote></li></ul></li><li><p><input checked="" disabled="" type="checkbox">  编程实战书P21 要结合历史观测 是因为部分可观测性？而不是因为非马尔可夫性？</p><p>似乎说得通… 我是因为没有认清当前的状态是什么所以才需要多个state拼在一起的窗口</p></li><li><p><input disabled="" type="checkbox">  交叉熵与one-hot之间的联系</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kYXRhd2hhbGVjaGluYS5naXRodWIuaW8vbGVlZGVlcHJsLW5vdGVzLyMvY2hhcHRlcjQvY2hhcHRlcjQ=">百度飞桨部分给出了一些解释<i class="fa fa-external-link-alt"></i></span>给出了点解释，which我觉得还是没有讲清楚</li><li>check下<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pob3Vib2xlaS9pbnRyb1JM">强化学习纲要<i class="fa fa-external-link-alt"></i></span>对应部分的讲解</li></ul></li><li><p><input disabled="" type="checkbox">  epsilon的减小方式有没有什么特别的讲究\</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXdhNHkxNzdRMQ==">正月灯笼<i class="fa fa-external-link-alt"></i></span>函数式编程让我感到疑惑:</p><p>up说函数式编程可以避免在debug的时候陷入循环中，那么我很好奇函数式编程如何debug<br>list.append为何拖累了速度呢？up有没有相关资料可以分享一下~<br>想问下第二种方式和第三种方式是不是除了形式上并没太大的区别，主要还是第一种方式里面的append是性能瓶颈?</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRL-TE | Experience-driven Networking, A Deep Reinforcement Learning based Approach</title>
      <link href="/ExtensiveReading/Route/DRL-TE/"/>
      <url>/ExtensiveReading/Route/DRL-TE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>感觉这篇文章文笔不行啊…一看就是中国人写的…[果然，作者全都是中国名…]</p></li><li><p>整体思路是：</p><p>​    决定链路分割比是一个连续控制问题，如果用的是离散控制的强化学习算法，会导致解空间成指数级的爆炸性增长，所以我们要使用连续控制的强化学习算法。连续型的，一开始的想法就是怼一个state-of-art的模型上去。但问题是，做出来效果不好，所以就用了AC算法，并基于AC算法加了<u>两个改进</u>：TE-aware exploration &amp; 训练上的trick。前者实际上就是结合网络的这个背景，对探索进行了一定的约束，后者实际上就是添加了优先级回放的功能。</p></li></ul><hr><ul><li>evaluation还是很不错==哪里不错??==</li></ul><ul><li><p>创新点/主要思想</p><ul><li><p>首次用DRL做TE</p></li><li><p>提出了DRL-TE的框架 </p><blockquote><p>这里主要指的是 将DRL用在网络中需要改进的一些点 ( action<del>base</del> )</p></blockquote></li><li><p>改进了算法</p></li></ul></li><li><p>算法使用</p><ul><li>RL （AC）<ul><li>进行了技术上的改进：TE-aware expoloration : 在action<del>base</del>上添加噪声； 添加了缓冲区权重</li></ul></li></ul></li><li><p>实验设置</p><ul><li>集中式的</li><li>ns3</li><li>代表性和随机性的网络拓扑  （from zoo and generated by brite）</li></ul></li><li><p>效果</p><ul><li>提升了吞吐，降低了延迟 ( 毕竟考虑了延迟的这个目标 )</li><li>对网络变化更有鲁棒性  (==evaluation部分是如何得出这个结论的？==需要再整理下)</li></ul></li></ul><hr><ul><li><p>排队论不适合多跳排队问题的建模</p><ul><li>强假设不能满足</li><li>多跳排队还是个open problem  </li><li>为什么排队论和NUM不适合</li></ul><p>==那排队论研究的是什么问题??==</p></li></ul><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​        现代通信网络已经变得非常复杂且高度动态，这使其难以建模，预测和控制。 在本文中，我们开发了一种新颖的体验驱动方法，可以像人类学习新技能（例如驾驶，游泳等）一样，根据自身的经验而不是准确的数学模型来学习很好地控制通信网络。 具体来说，我们首次建议利用新兴的深度强化学习（DRL）在通信网络中实现无模型控制； 并针对基础网络问题：流量工程（TE），提出了一种新颖且高效的基于DRL的控制框架DRL-TE。通过共同学习网络环境及其动态性，并在强大的深度神经网络（DNN）的指导下进行决策，<strong>所提出的框架最大程度地提高了广泛使用的效用函数</strong>。<strong>我们提出了两种新技术</strong>，即TE感知探索和基于行为者批评的优先体验重播，以优化通用DRL框架，尤其是针对TE的框架。 为了验证和评估所提出的框架，我们在<strong>ns-3</strong>中实施了该框架，<strong>并使用代表性和随机生成的网络拓扑进行了全面测试</strong>。 </p><blockquote><p>这里的代表性和随机性</p></blockquote><p>​    广泛的数据包级仿真结果表明：1）与几种广泛使用的基准方法相比，DRL-TE显着<u>降低了端到端延迟</u>，并不断提高了网络实用性，<u>同时提供了更好或相当的吞吐量</u>；  2）DRL-TE对网络的变化更具有鲁棒性； 和3）DRL-TE始终优于最新的DRL方法（用于连续控制），即深度确定性策略梯度（DDPG），which不能提供令人满意的性能。</p><blockquote><p>创新：</p><ul><li>我们是第一个为TE提供高效，实用的基于DRL的经验驱动控制框架DRL-TE。（就是第一个用DRL做TE的）</li><li>对结合network使用RL做出了巨大的贡献：1. 提出了DRL-TE的框架； 2. 在AC上进行改进，实验证明比ddpg效果要好不少</li></ul></blockquote><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><blockquote><p>Our general goal(e.g. 拯救世界)  &amp;  SDN is promising</p></blockquote><p>​    因此，我们的目标是开发一种新颖的，无需经验的无模型方法，该方法可以像人类学习技能（例如驾驶，游泳等）一样，从经验中学习很好地控制通信网络，而不是精确的数学模型。我们认为，某些新兴的联网技术，例如软件定义网络（SDN）[18]，可以很好地支持这种体验/数据驱动的方法。 例如，SDN中的<strong>Openflow</strong>控制器可以用作中央控制单元，用于收集数据，制定决策和部署解决方案。</p><blockquote><p>开始喷前人的工作</p></blockquote><p>​    一个基本的网络问题是流量工程（TE）：给定一组具有源节点和目标节点的网络流，请找到一种解决方案，以最大化实用功能为目标转发数据流量。 简单且广泛使用的解决方案包括：始终通过最短路径路由流量（例如，开放式最短路径优先（OSPF）[24]）； 或通过多个可用路径平均分配流量（例如，有效负载平衡<strong>（VLB）[38]**）。 显然，它们都不是最优的。 如果存在针对网络环境，用户需求及其动态的准确且数学可解的模型，则可以开发出更好的解决方案。 <u>排队论已被用于对通信网络进行建模并协助资源分配[15]，[25]，[26]，[37]</u>。 **但是，由于以下原因，它可能不适用于涉及多跳路由和端到端性能（例如延迟）的网络问题</strong>：1）在排队论中，queueing network（而不是单个队列）中的许多问题仍然是开放问题，而具有网状拓扑结构的通信网络则表示相当复杂的多点到多点排队网络，其中来自一个队列可以被分布到多个下游队列，并且一个队列可以从多个不同的上游队列接收分组。  2）<u>排队理论只能在一些强假设下（例如，元组到达遵循泊松分布等）提供准确的排队延迟估计，但是在复杂的通信网络中可能不成立</u>。 请注意，即使到达每个源节点的数据包都遵循泊松分布，到达中间节点的数据包也可能不会。</p><p>​    另外，对**<u>网络效用最大化（NUM）[17]</u><strong>的研究也很深入，它通常通过制定和解决优化问题来提供资源分配解决方案。 但是，</strong>这些方法可能会遇到以下问题**：1）它们通常假定一些关键因素（例如用户需求，链接使用等）作为输入给出，但是，这些因素很难估计或预测。  2）由于给定了资源分配的决策变量（例如TE），因此很难通过显式地将其包含在效用函数中来直接最小化端到端延迟，因此很难在 由于需要一个精确的数学模型来实现此目的，因此它们必须是封闭的形式（尽管如上所述，排队理论在这里可能不起作用）。  3）这些工作未能很好地解决网络动态性问题。 他们中的大多数声称提供了一种“良好”的资源分配解决方案，该解决方案是最佳的或接近最佳的，但仅适用于网络快照。 但是，大多数通信网络时变很大。 这些NUM方法尚未很好地解决如何调整或重新计算资源分配以适应这种动态情况。 </p><blockquote><p>讲了下为何用DRL</p></blockquote><ul><li><p>DRL is in succsess</p><ul><li>DRL is promising<ul><li>model-free ,not relying on exact model (e.g. queueing model)<ul><li>handle complicated action space with DDPG</li><li>can handle dynamic env， due to it is AI method</li></ul></li></ul></li></ul></li></ul><blockquote><p>contribution</p></blockquote><ul><li><p>我们是第一个为TE提供高效，实用的基于DRL的经验驱动控制框架DRL-TE。</p></li><li><p>我们讨论并表明，**<u>直接应用最先进的DRL解决方案进行连续控制，即深度确定性策略梯度（DDPG）[16]，对TE问题效果不佳。</u>** 【有意思了。意思来了】</p><blockquote><p>论文中并没有分析为什么DDPG做的不好，我们的理解是，他只是想体现他的工作量：他做了这么多建模和算法上的尝试。</p></blockquote></li><li><p>我们提出了两种新技术，即TE-aware exploration 和 AC-based prioritized experience replay，以优化通用DRL框架，尤其是针对TE的框架。 </p><p>我们通过使用具有代表性和随机网络拓扑的ns-3进行的广泛数据包级仿真，表明DRL-TE明显优于几种广泛使用的基线方法。</p></li></ul><h1 id="2-DRL"><a href="#2-DRL" class="headerlink" title="2 DRL"></a>2 DRL</h1><h1 id="3-Problem-Statement"><a href="#3-Problem-Statement" class="headerlink" title="3 Problem Statement"></a>3 Problem Statement</h1><p>==这里是为啥突然要提出delay这个指标来着？==</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/210803-186164.png" alt="image-20201104210801863" style="zoom: 80%;" /><p>分割比$w_{k,j}$ , 备选路径集合$P_k$ , traffic load $f_{k,j}$</p><ul><li><p>$\alpha-faireness$ 的文献要好好读读这个指标的含义</p><ul><li><p>又提到了，$\alpha$ 可以被用来balance fairness和efficiency 。 当$\alpha=1$的时候，可以获得proportional fairness</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/211336-513625.png" alt="image-20201104211329992" style="zoom: 80%;" /></li><li><p>仿照Remy提了个指标</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/211424-585348.png" alt="image-20201104211423959" style="zoom:80%;" /></li></ul></li></ul><h1 id="4-Proposed-DRL-Based-Control-Framework"><a href="#4-Proposed-DRL-Based-Control-Framework" class="headerlink" title="4. Proposed DRL-Based Control Framework"></a>4. Proposed DRL-Based Control Framework</h1><p>在本节中，我们介绍了针对上述TE问题的建议的基于DRL的控制框架DRL-TE。</p><p>所提出的控制框架的核心是一个代理，该代理运行DRL算法（算法1）以在每个决策时期找到最佳动作，将动作带入网络（**<u>例如，通过网络控制器</u><strong>），观察网络状态，并 收集过渡样本。  TE问题显然是一个</strong><u>连续的控制问题</u>**。</p><ul><li><p>state</p><p>点对的集合</p></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/211803-272410.png" alt="image-20201104211802927"></p><ul><li><p>actors</p><p>分割比的集合</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/03/121443-968455.png" alt="image-20201203121442730"></p></li><li><p>reward</p></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/03/121455-73685.png" alt="image-20201203121454816"></p><ul><li><p>algorithm :</p><ul><li><p>AC算法</p></li><li><p>动作加随机噪声</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/212915-598687.png" alt="image-20201104212913054"></p><p>​    所提出的控制框架不限于针对abase的任何特定的基础TE解决方案，可以通过许多不同方式来获得该解决方案。 </p></li></ul></li></ul><blockquote><p> 例如，一种简单的解决方案是使用最短路径为每个通信会话传递所有数据包，这在大多数情况下不是最佳的，但足以切断作为探索的基准。</p><p>另一种解决方案是将每个通信会话的流量负载平均分配到所有候选路径。</p><p>基于NUM的方法也可以用于查找基本解决方案。 例如，我们可以通过解决以下数学编程来获得TE解决方案：</p><p>​                                    <img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/04/213935-479446.png" alt="image-20201104213933393"  />    </p></blockquote><p>​    In this formulation，目的是使产量方面的总效用最大化。 请注意，很难在效用函数中包含端到端延迟项，因为不存在可以准确地在端到端延迟与其他决策变量&lt;xk，fk,j&gt;</p><blockquote><p> Note that it is hard to include the end- to-end delay term in the utility function since there does not exists a mathematical model that can accurately establish a connection between end-to-end delay and the other decision variables &lt; xk, fk,j &gt;. </p></blockquote><p>​    这就是为什么NUM上大多数现有作品都没有很好地解决端到端延迟的原因。</p><p>​    约束（6b）确保每条链路上的总流量负载不超过其容量Ce，其中pj是Pk中的第j条路径。 约束（6c）确保每个会话k的总吞吐量不超过其需求Bk（可以估算）。 约束（6d）在两组决策变量<xk>和&lt;fk，j&gt;之间建立联系。 如果α= 1，Uα（xk）= log xk，则该问题变为凸编程问题，which可以通过我们的实现中使用的Gurobi Optimizer [10]有效解决。</p><hr><blockquote><p>建模完成后就开始说如何解了</p></blockquote><p><strong>AC算法</strong></p><ul><li><p>加上了优先级经验回放，which author claim 是他们的扩展，不是AC本身自带的</p></li><li><p>网络架构</p><ul><li><p>Actor</p><ul><li>2 FC ( 64,32 ) Leaky Rectifier激活函数，输出层softmax作为激活函数来确保输出值的总和等于1。</li></ul></li><li><p>Critic</p><ul><li>2 FC ( 64,32 ) Leaky Rectifier激活函数</li></ul><blockquote><p>A和C最后一层网络架构的不一样的原因是，前者输出动作概率，所以需要softmax，后者只要输出一个数值，所以不需要用softmax归一化。</p></blockquote></li><li><p>本算法对于优先级采样的一些设计/改进</p><ul><li><p>为了以等式（9）给出的概率对N个转换进行采样，将范围[0，p<del>total</del>]划分为N个子范围，并从每个子范围中均匀采样一个转换，其中p<del>total</del>是重播缓冲区中的所有transition的他优先级之和。 正如[30]所建议的，我们使用求和树来实现优先级概率，这类似于二进制堆。</p></li><li><p>区别在于1）叶节点存储转换的优先级；  2）内部节点存储其子节点的总和。 这样，root的值为p<del>total</del>，更新和采样的时间复杂度为O（logN<del>tree</del>），其中N<del>tree</del>是求和树中节点的数量。</p></li><li><p>超参数设置</p><p>ξ：= 0.01，β<del>0</del>：= 0.6，β<del>1</del>：= 0.4，γ：= 0.99，ϕ：= 0.6，η<del>π</del>：= 0.001，η<del>Q</del>：  = 0.01，τ：= 0.01，N = 64。</p></li></ul></li></ul></li></ul><h1 id="5-Performance-Evaluation"><a href="#5-Performance-Evaluation" class="headerlink" title="5. Performance Evaluation"></a>5. Performance Evaluation</h1><ul><li><p><strong>Testbed</strong></p><p>ns-3, Tensorflow, with topo of NSFNET[23] &amp; ARPANET[1] &amp; 网络拓扑生成器BRITE [19]随机生成了一个具有20个节点和80个链接的网络拓扑</p></li><li><p>实验设置</p><p>对于每种网络拓扑，我们分配 <strong><u>K = 20 </u>**个通信会话，每个会话都有随机选择的源节点和目标节点。 对于每个通信会话，我们选择3条最短路径（就跳数而言）作为其候选路径。 每个链接的容量设置为</strong><u>100Mbps</u><strong>。 数据包到达每个通信会话的源节点（即流量需求）遵循泊松过程（请注意，数据包到达中间节点可能不遵循泊松过程），</strong><u>其平均值均匀地分布在一个20Mbps大小的窗口内</u><strong>。 在我们的实验中，我们最初将窗口设置为[0，20] Mbps，然后通过以每次运行5Mbps的步长滑动窗口来增加流量需求。 我们为效用函数设置</strong>α：= 1<strong>和</strong>σ：= 1**以平衡吞吐量，延迟和公平性，即</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/05/005550-301559.png" alt="image-20201105005550050"></p></li></ul><ul><li><p><strong>Baselines</strong></p><ul><li><p>最短路径（SP）：每个通信会话都使用最短路径来传递其所有数据包。</p></li><li><p>负载平衡（LB）：每个通信会话均将其流量负载平均分配给所有候选路径。</p></li><li><p>网络实用程序最大化（NUM）：它通过解决凸编程问题Ⅳ中给出的NUM-TE来获得TE解决方案。</p></li><li><p>DDPG：为公平起见，我们在保持其他设置（例如状态，动作，奖励和DNN）相同的情况下，用DDPG算法[16]替换为DRL-TE算法（算法1）。</p></li></ul></li></ul><ul><li><p><strong>Evaluation指标</strong> &amp; 图释说明</p><ul><li>我们将总的端到端吞吐量，端到端平均数据包延迟和网络（即总）效用值用作比较的性能指标。 </li><li>我们在图5和6中显示了相应的仿真结果。图1-3每个对应于一个网络拓扑。 <ul><li>注意，x轴上的数字是相应交通需求窗口（如上所述）的中心值。 </li></ul></li><li>根据奖励显示了在在线学习过程中三种网络拓扑上两种DRL方法（DDPG和DRL-TE）的性能。 <ul><li>为了便于说明和比较，我们使用常用方法（r-rmin）/（rmax-rmin）归一化和平滑了奖励值（其中r是实际奖励，rmin和rmax是在线学习期间的最小和最大奖励）和著名的**<u>前后过滤算法[11]</u><strong>。 我们在</strong><u>图4</u>**中给出了相应的仿真结果。</li><li>请注意，对于这些结果，使用窗口[10，30] Mbps生成了相应的流量需求。</li></ul></li></ul></li></ul><ul><li><p><strong>结论</strong>    </p><ul><li><p>端到端时延</p><ul><li><p>从图1a，2a和3a中可以看出，与所有四种基线方法相比，DRL-TE显着降低了所有三种拓扑的端到端延迟。 例如，在NSF拓扑上，当流量负载为中等时（即流量需求窗口为[10，30] Mbps），DRL-TE可以将端到端延迟显着降低51.6％，28.6％，74.6％ 与SP，LB，NUM和DDPG相比分别为50.0％和50.0％。 总体而言，DRL-TE分别平均降低了55.4％，47.1％，70.5％和44.2％。 </p></li><li><p>与吞吐量相比，端到端延迟更难处理，因为如上所述，它缺乏能够很好地捕捉其特性和运行时动态的精确数学模型。 看到NUM导致性能相当差是不足为奇的，因为NUM无法明确解决端到端延迟，并且其设计基于网络状态相当稳定或变化缓慢的假设，这可能不是事实。 尽管诸如SP和LB之类的简单解决方案凭直觉可以提供预期的性能，但最短的路径和负载平衡（可以避免拥塞）可以帮助减少延迟。  DRL-TE毫无疑问在端到端延迟方面提供了卓越的性能，因为它不断学习运行时动态，并在DNN的帮助下做出明智的决策以使其达到最佳状态。</p></li></ul></li><li><p>吞吐量</p><p>即使DRLTE的目的（奖励功能）不是简单地最大化端到端吞吐量，它仍然提供令人满意的性能，如图1和2所示。  1b，2b和3b。 与所有其他方法相比，DRL-TE可以持续提高NSFNST拓扑的吞吐量。 在ARPANET和随机拓扑上，DRL-TE给出的吞吐量值可与LB给出的吞吐量值相媲美（负载均衡在整个过程中应产生很高的收益），但仍高于SP和NUM提供的吞吐量值。  </p></li><li><p>效用函数</p><p>如预期的那样，我们可以从图2和3中看到。 从图1c，2c和3c可以看出，DRL-TE在总效用方面胜过所有其他方法，因为其奖励功能已设置为最大化。 平均而言，DRL-TE分别胜过SP，LB，NUM和DDPG 7.7％，9.1％，26.4％和12.6％。 </p></li><li><p>使用并且无论选择哪种网络拓扑，吞吐量和延迟都基本上与流量需求有关（无论什么方法，什么拓扑，throughpout和delay就是会随着流量需求增大而上升，the total utility 通常会下降）。 这很容易理解，因为流量负载越高，通常吞吐量就越高，但是由于等待时间更长甚至拥塞而导致的延迟也就越大，从而降低了总实用性。 此外，吞吐量不会单调增加，当网络变得饱和时，由于拥塞和数据包丢失，更高的流量需求甚至可能导致吞吐量变差。 我们还注意到DRL-TE在流量负载和网络拓扑的变化方面具有鲁棒性，因为在所有流量需求设置和所有拓扑中，DRL-TE的性能始终优于所有其他方法。</p></li><li><p>另外，我们还可以从图1和图2中观察到。  1-3指出DDPG在这些拓扑上效果不佳。 例如，与SP和LB相比，就总效用而言，它通常表现较差，即使它提供了稍微更好的端到端延迟。 为了进一步说明DRL-TE为什么比DDPG更好的原因，我们还显示了图4中三种网络拓扑在在线学习过程中奖励价值的变化。显然，在所有这些网络拓扑中，DRL-TE很快（仅在几个范围内） 数以千计的决策时代）达到了很好的解决方案（给予了很高的回报）； 而DDPG似乎停留在具有较低奖励价值的局部最优解决方案上。 特别是，在随机拓扑上，我们只能看到前几百个世代的微小改进，然后它无法找到更好的解决方案（动作）来提高奖励。 这些结果清楚地证明了所提出的新技术的有效性，包括TE感知探索和基于行为者批评的优先体验重播。</p><blockquote><p>==??==问题就来了，DDPG不能加优先级体验重播么…</p></blockquote></li></ul></li></ul><h1 id="5-Related-Work"><a href="#5-Related-Work" class="headerlink" title="5. Related Work"></a>5. Related Work</h1><p>==关于网络的这一部分要好好看下==</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li><p><input checked="" disabled="" type="checkbox">  我觉得第四节中 一定概率选择$a_{base}$而不是$a_{random}$ 会不会造成随机性的丢失? </p><blockquote><p>不会！ 因为有噪声！而且a<del>base</del>设计的好，是可以覆盖全网的信息的。</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  NUM到底是什么模型？？这里指的应该是 以网络链路利用率最大化 （Network utility maxmization）</p><ul><li>attention！ 这里的U不是utilization，而是utility！e.g. utility function = - utilization</li></ul><blockquote><p>NUM就是一个满足网络状况的线性规划模型，which also includes MCF</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  路由和TE的区别到底是什么</p><blockquote><p>路由就是保持包可达性的；TE的话，正如本文所说，是有一个优化目标的</p></blockquote></li></ul><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><ul><li><p>VLB和ECMP的区别</p></li><li><p>标红的句子根本是看不懂。。问下飞哥</p></li><li><p>Caida数据集</p></li><li><p>看看人家代码里面的split ratio</p></li><li><p>还是那个问题。。这里reward的设立是不是有问题….看下Pensive，人家比较有建模经验</p><blockquote><p>其实我感觉没太大问题了</p></blockquote></li><li><p>evaluation </p><ul><li>结论部分讲端到端时延的其实我没有很懂</li></ul></li></ul><ul><li><p>APRANET</p></li><li><p>经常看到的empirical research/study 是什么意思</p></li></ul><h1 id="inspiration"><a href="#inspiration" class="headerlink" title="inspiration"></a>inspiration</h1><ul><li>不是直接套state-of-art就行</li></ul>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQR&amp;DLWR|Evaluating and Boosting Reinforcement Learning for Intra-domain Routing</title>
      <link href="/ExtensiveReading/Route/SQR-DLWR/"/>
      <url>/ExtensiveReading/Route/SQR-DLWR/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><strong>在所有路由方案中，一个解决方案都不可能成为“最佳”解决方案并胜过其他解决方案</strong></li></ul><blockquote><p>原来路由也是分场景的！</p></blockquote><ul><li>评价RL相关、域内路由的工作，且自己做了两套方案及逆行比较，which是集中式的</li></ul><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>​    机器学习在计算机视觉和计算机游戏等领域的成功引发了人们对在计算机网络中应用机器学习的兴趣激增。 本文试图回答一个广泛争论的问题：我们能否通过强化学习（RL）来提高域内路由的性能，域内路由是Internet上最基本的模块之一？ 由于复杂的网络流量条件和较大的路由选择空间，很难为现有的基于RL的路由解决方案给出确切的答案。 为了深入了解基于RL的路由的挑战，我们系统地对不同的基于RL的路由解决方案进行了分类，并从可扩展性，稳定性，鲁棒性和收敛性方面研究了几种代表性方法的性能。 结合评估各种基于RL的路由解决方案的经验教训，我们提出了两种方法，称为监督Q网络路由（supervised Q-network routing (SQR)）和基于离散链路权重的路由（discrete link weight-based routing，DLWR），它们可以提高基于RL的路由的性能，并提高性能。 形成事实上的最短路径域内路由。</p><h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><p>​    路由是一种网络功能，可将数据包从给定的源传递到给定的目的地。 可以说，它是Internet中最基本的构建块，在服务质量（QoS）保证中起着至关重要的作用。 传统的路由策略，例如开放式最短路径优先（OSPF）路由[1]，可能会导致网络拥塞和链路利用率低，并且与<strong>最佳路由方法相比，性能可能会差5000倍[2]**。 在动态业务量变化的情况下，已经致力于优化路由路径。 例如，反压路由[3]最初是为无线网络提出的，也可以应用在有线网络中，它基于相邻节点之间的拥塞梯度来动态转发流量。 但是，它在路由路径中的收敛速度可能会很长，</strong>并且不一定会导致良好的小队列性能，如[4]<strong>中所证明的。 将机器学习应用于网络路由以获得更好的性能可以追溯到1994年，</strong>当时提出了Q路由的概念[5]。** 由于机器学习在其他领域（例如计算机视觉，游戏和自然语言处理）的巨大成功，最近对Q路由的兴趣再<strong>次兴起[6] [7]**。 另外，最近的一些研究通过在路由中应用深度（强化）学习，证明了令人鼓舞的结</strong>果[8] – [10]<strong>。 这些研究讨论了潜在的基于学习的路由方法，并使用一些典型的机器学习方法进行了评估，例如深度信念架构，深度神经网络（DNN）和信任区域策略优化（TRPO）。 **但是，Internet路由的性能在很大程度上取决于流量动态和各种网络状况</strong>。<strong>例如，现有的Q路由及其变体会在数据包级别更新路由表，即，他们了解环境并估算单个数据包的数据包交付时间</strong>。显然，它们的性能在高速网络中会受到影响，在高速网络中，数据包需要以微秒为单位转发。 <strong>在所有路由方案中，一个解决方案都不可能成为“最佳”解决方案并胜过其他解决方案</strong>。 根据这一观察，我们因此有动机去研究Internet路由中不同机器学习算法的利弊，并清除一些（虽然不太可能是全部）在路由中实际采用机器学习的障碍。 我们的研究并非不切实际地针对设计最有效的路由解决方案。 相反，我们提供了lessons(这里我觉得翻译成经验比较好)，在此基础上，我们展示了如何进一步改进现有方法。 </p><p>​    为此，我们研究了基于不同强化学习（RL）的路由策略对域内Internet路由性能的影响。 由于以下三个原因，我们缩小了关注点到RL和域内路由的: (1)<strong>基于RL的路由[8]不需要标记的数据</strong>，由于操作数据的规模大和网络的规模大，这是禁止的并且难以获得 状态;（2）在路由器处于同一自治系统（AS）域内的域内路由中，可以获得所有路由信息；（3）软件定义网络（SDN）的发展使通过全局网络视图通过中央控制平面实现智能路由算法变得容易了[11]。</p><p>​    <strong>我们在以下方面评估基于RL的路由：</strong></p><blockquote><p>(1) <strong>可扩展性</strong>：在高速，大规模网络中是否可以保持良好的性能？(2) <strong>稳定性</strong>：路由方法是否对各种流量模式和网络条件具有弹性？(3) <strong>健壮性</strong>：路由方法是否可以有效避免“不良”路由状态?（例如，congested,long-delay links）？(4) <strong>Convergence</strong>：是否可以快速达到新的路由策略以适应动态网络变化？ 我们对强化学习的研究基于两种主要方法，即基于价值的优化方法和基于策略的优化方法。 图1总结了每种方法的架构及其相应的算法。在我们的研究中，对图1中标有*的算法（它们是强化学习的代表算法）进行了评估。 </p></blockquote><p>​    <strong>本文的贡献可以总结如下：</strong></p><blockquote><p>• 我们根据不同的时间尺度将基于RL的路由解决方案系统地分为两类，以更新路由决策：packet-controlled智能路由和epoch-controlled智能路由。在每个类别中，我们将路由问题都视为RL问题。 总体而言，我们的分类为将来基于RL的路由研究提供了一个全面的视图。<br>• 在第一类中，我们分析经典Q路由的适用性，并评估其在实际网络设备上的性能。<br>• 在第二类中，我们介绍了用于确定路由路径的不同方法：基于显式路径的路由和基于隐式链路权重的路由。 然后，我们彻底评估典型RL算法的性能，并讨论其优缺点。<br>• 利用从Q路由和将现有RL算法应用于时代控制路由中获得的见识，我们提出了两种方法，监督Q网络路由（SQR）和基于离散链路权重的路由（DLWR），可提高性能 基于RL的路由，性能优于事实上的最短路径路由。</p></blockquote><p>​    </p><p>​    <strong>本文的其余部分的结构如下。</strong></p><blockquote><p>第二节介绍智能路由问题的背景，并通过强化学习来阐述路由问题。</p><p>第三节分析了分组控制的智能路由的适用性。</p><p>然后，我们分别在第IV节和第V节中分别分析和改进基于显式的基于路径的路由和基于隐式链路权重的路由。</p><p>第六节总结了从RL路由方法获得的见解。</p><p>第七节介绍相关工作。</p><p>最后，第八节总结了论文</p></blockquote><h1 id="II-BACKGROUND-ROUTING-AS-REINFORCEMENT-LEARNING"><a href="#II-BACKGROUND-ROUTING-AS-REINFORCEMENT-LEARNING" class="headerlink" title="II. BACKGROUND:ROUTING AS REINFORCEMENT LEARNING"></a>II. BACKGROUND:ROUTING AS REINFORCEMENT LEARNING</h1><h2 id="A-Network-and-Traffic-Models"><a href="#A-Network-and-Traffic-Models" class="headerlink" title="A. Network and Traffic Models"></a>A. Network and Traffic Models</h2><p>​    假设网络是网络的有向图G =（V，E），并且E = {e（v1，v2），e（v2，v1），…}表示其中V = {v1，  v2，…，vn}表示路由器之间的节点（路由器）链接。 每个链接e（vi，vj）具有容量C（vi，vj），表示可以从节点vi传递到vj的流量。 将网络的流量需求表示为流量矩阵M = [m<del>ij</del>]<del>n×n</del>，其中mij是从源节点vi到目标vj的流量。 当源－目的地对之间没有流量时，相应的流量将设置为零。  RL适用于无法获取标签数据或难以获取标签数据的情况。 在这种情况下，假定未知环境中的agent2通过接收有关环境当前状态的信息，采取措施并接收奖励或惩罚信号来找到最佳的行为策略，这反映了该agent过去的行为是否适当 。 代理商的目标是找到可以最大化长期回报的政策。  RL的简要介绍和彻底处理可以分别在[12]和[13]中找到。 路由问题的制定者是路由决策者。 在RL框架中，代理的动作是更新路由路径。 当前，代理采取行动有两种不同的时间尺度：（1）对每个数据包采取行动，（2）假设时间划分为多个纪元，则每个纪元都采取行动。 前者称为分组控制的智能路由，后者称为历元控制的智能路由。</p><h2 id="B-Packet-Controlled-Intelligent-Routing"><a href="#B-Packet-Controlled-Intelligent-Routing" class="headerlink" title="B. Packet-Controlled Intelligent Routing"></a>B. Packet-Controlled Intelligent Routing</h2><blockquote><p>Q路由及其变体是典型的数据包控制的智能路由。  Q路由是由Boyan和Littman [5]基于Bellman-Ford最短路径算法[14]和Q学习框架[15]提出的。 使用Q路由，网络中的每个节点都可以充当代理，以决定转发当前数据包的下一跳。 之所以称为Q路由，是因为每个节点在转发数据包之前都使用Q值来估计从当前节点经过不同的邻居到目的地的延迟。 对于节点vi处的每个数据包，代理选择具有最小Qvi（vj，d）的相邻节点vj作为数据包的下一跳，其中，如果节点vi通过以下方式转发数据包，则Qvi（vj，d）表示Q值。 它的邻近节点vj到目的地d。 在将数据包发送到vj时，vi立即从vj接收行程中剩余时间的反馈，表示为Qvj（d），即Qvj（d）= min Qvj（vz，d）（1）vz∈n  vj用以下学习函数更新节点vi的Q值：？Qvi（vj，d）=η（r + minQvj（d）-Qvi（vj，d））（2）其中，η是学习率，  r是数据包从节点vi到节点vj花费的时间，包括排队时间和传输时间。 基于Bellman-Ford最短路径算法，公式（2）的公式为：使用最佳策略从节点vi到目的地d所需的时间等于节点vi到节点vj的最短时间以及从节点vj所需的时间 以最佳策略到达目的地。 证明该算法在n节点网络中最多经过n-1次迭代后收敛</p></blockquote><h2 id="C-Epoch-controlled-Intelligent-Routing"><a href="#C-Epoch-controlled-Intelligent-Routing" class="headerlink" title="C. Epoch-controlled Intelligent Routing"></a>C. Epoch-controlled Intelligent Routing</h2><h3 id="1-Objective-of-epoch-controlled-routing"><a href="#1-Objective-of-epoch-controlled-routing" class="headerlink" title="1) Objective of epoch-controlled routing"></a>1) Objective of epoch-controlled routing</h3><p>​    optimal routing有不同的目标。 在本文中，我们考虑以下最优路由的特殊形式。 将在时期t末尾的链接e（vi，vj）上等待传输的数据包数量表示为ut ij。 最佳路由的目标是最小化所有t上所有链路的队列长度，即最小</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/25/215424-353121.png" alt="image-20201125215423618"></p><h3 id="2-Reinforcement-Learning-for-Routing"><a href="#2-Reinforcement-Learning-for-Routing" class="headerlink" title="2) Reinforcement Learning for Routing"></a>2) Reinforcement Learning for Routing</h3><blockquote><p>​    在RL框架中投放上述路由问题，我们将做出路由决策的网络控制器称为代理，将与控制器交互的网络称为环境。 <u>环境状态由流量矩阵M捕获</u>。动作根据观察到的状态将动作空间作为A.组成路由选择决策。 将状态空间表示为S，并在每个时间点t，代理接收环境状态St∈S，然后确定一个动作At∈A，该动作根据观察到的状态构成路由决策。 在下一个时间段，环境Rt + 1和新状态St + 1的反馈将发送到代理。 为了符合路由目标，我们将环境Rt + 1的反馈设置为：</p></blockquote><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202011/25/215604-43857.png" alt="image-20201125215548761"></p><blockquote><p>​    在一系列时间t = 0、1、2，…的情况下，交互过程可以表示为S0，A0，R1，S1，A1，R2，S2，A2，…，可以用数学公式表示为 马尔可夫决策过程（MDP）[12]。 换句话说，奖励Rt + 1和下一状态St + 1仅取决于当前状态St和关联的动作At，概率为P（St + 1，Rt + 1 | St，At）。 因此，路由策略是从状态到选择每个动作的概率的映射，表示为S∈S和A∈A的π（A | S）。 如果代理在策略π下在状态S下采取动作A，则表示为Qπ（S，A）的动作值函数是来自环境的反馈值。 传统的强化学习问题通常是游戏问题，将在有限的范围内终止</p></blockquote><p>动作值通常定义为折现的未来奖励的期望Qπ（S，A）= E [Rt + 1 +γRt+ 2 +γ2Rt+ 3 + … +γTRT+ 1 | S，A]，其中γ为 奖励的折扣因子。 最佳Q值应遵循Bellman方程Q ∗，右侧是目标。i + 1（S，A）= E（r +γmaxA？Qi（S？，A？）| S，A）.</p><p>​    尽管如此，应根据路由问题量身定制传统的设置操作值的方法 。 由于未转发的数据包将在队列中进行缓冲，因此队列长度反映了一段时间内的累积结果。 因此，将本地时间段内所有链路上的最大队列大小最小化也是一个合理的目标^3^。</p><h3 id="3-Learning-Output"><a href="#3-Learning-Output" class="headerlink" title="3) Learning Output"></a>3) Learning Output</h3><blockquote><p>​    在以上基于RL的路由框架上，我们可能有不同的方式来呈现学习输出。 在本文中，我们研究了两种类型的学习输出：（1）基于显式路径的路由，以及（2）基于隐式链路权重的路由。 在基于显式路径的路由中，学习的输出包括一组路径，每个路径对应于应用于将数据包从给定源传递到给定目的地的路径。 在基于隐式链接权重的路由中，学习的输出包括所有链接上的权重值，我们根据这些值通过Dijkstra的最短路径算法找到路由路径</p></blockquote><h3 id="4-System-Architecture-for-RL-based-Routing"><a href="#4-System-Architecture-for-RL-based-Routing" class="headerlink" title="4) System Architecture for RL-based Routing:"></a>4) System Architecture for RL-based Routing:</h3><blockquote><p>​    由于我们只关注域内路由，因此我们可以通过具有全局网络视图的中央控制平面实现基于RL的智能路由[11]。 该代理在中央控制器中实现。 在每个时期，可编程路由器将环境信息（即流信息和队列大小）发送给代理； 代理学习环境并使用RL算法制定路由决策，然后将其发送到路由器以指导其数据包转发。</p></blockquote><h1 id="III-EVALUATING-PACKET-CONTROLLED-INTELLIGENT-ROUTING"><a href="#III-EVALUATING-PACKET-CONTROLLED-INTELLIGENT-ROUTING" class="headerlink" title="III. EVALUATING PACKET-CONTROLLED INTELLIGENT ROUTING"></a>III. EVALUATING PACKET-CONTROLLED INTELLIGENT ROUTING</h1><p>​    智能路由的代表性方法是Q路由及其变体。 在本节中，我们测试可编程交换机上Q路由的可扩展性。 <u>特别是，我们检查高速交换机是否能够负担一个包的处理时间内检查其缓冲区并更新路由表的开销</u>。 </p><p>​    在Q路由中，交换机需要（1）检查每个以太网端口上缓冲区的队列大小，（2）如II-B节所述更新Q表，并且（3）将收到的数据包转发到 具有每个数据包时间的最小估计延迟的下一跳。 实际上，Q路由需要下一跳开关才能将有关最小估计延迟的反馈返回给目的地。<u>尽管如此，我们真正关心的是交换机能够以多快的速度更新其路由表并转发数据包。</u>从本地交换机的观点来看，导致更新的原因（即，来自下一跳交换机的反馈信息）对于交换机的分组转发性能实际上并不重要。 基于此观察，我们可以模拟Q路由的行为并评估其数据包转发速度，而无需实际接收和使用下一跳的反馈信息。 <strong><u>换句话说，Q路由的实际性能甚至会比我们在此处公开的还要差。</u></strong>==？== 我们在一个简单的测试平台上实施和测试Q路由。 该测试平台内置有两台通过可编程交换机连接的台式计算机。 两台计算机被分配到不同的以太网段。 一台计算机用于流量生成器，以通过交换机将目的地为另一台计算机的数据包发送到另一台计算机。 交换机收到报文后，检查路由表，将报文转发到目的地址。 目标计算机还用于监视性能，即延迟和吞吐量。 <strong>可编程交换机具有2个3.1 GHz的Intel Core i5-3450 CPU，6 MB高速缓存和16 GB内存。 它还配备了7个以太网Intel i350千兆接口</strong>，而我们在实验中仅使用2个接口。 台式计算机是配备相同以太网接口的Dell poweredge T620。</p><p>​    **<u>Q路由算法是在可编程交换机中实现的，无需使用来自目的地的任何反馈信息</u>**，但是，交换机需要按照Q路由的要求，在传输每个数据包后使用相同的路由条目来“更新”其路由表。 相比之下，基准测试方法使用固定路由，该路由简单地使用固定转发表将接收到的数据包转发到目标，而没有任何“更新”。 这等效于具有稳定网络拓扑的网络中的最短路径路由。 我们分别测量了Q路由和最短路径路由的吞吐量和延迟。 为了评估吞吐量，我们让流量生成器以全速（1.5 Gbps）将大小为1024字节的数据包注入到交换机中。 我们评估监视器收到的数据包数量。 为了进行延迟评估，我们分别以450 Mbps，700 Mbps和965 Mbps的速率发送数据包。 表I显示了Q路由和最短路径路由的比较。从结果可以看出，转发速度越高，Q路由的等待时间就越长。 这是因为更高的转发速度意味着每秒发送更多的数据包，从而每秒发送更多的路由表更新。  Q路由中的此类更新减慢了交换机转发速度的近一半，并可能导致高速网络严重拥塞。</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li><p>introduction中说到Q路由的事情</p><ul><li><p>在数据包级别更新路由表 ，能保证收敛么…</p></li><li><p>需要调研这些文章</p></li><li><p><strong>在所有路由方案中，一个解决方案都不可能成为“最佳”解决方案并胜过其他解决方案</strong></p><blockquote><p>原来路由也是分场景的！</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ExtensiveReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Routing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDT</title>
      <link href="/Codes/UDT/"/>
      <url>/Codes/UDT/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="收集的、待整理的文章"><a href="#收集的、待整理的文章" class="headerlink" title="收集的、待整理的文章"></a>收集的、待整理的文章</h1><p>先不看架构了，直接看Aurora了</p><ul><li>wolfcs大佬的博客优先看，在reference那一节里面说了</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdWtlcm5lbC9wLzg5NzY5ODQuaHRtbA==">https://www.cnblogs.com/ukernel/p/8976984.html<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2xpZGVzdGFsay5jb20vdTQyL3Q4ZWZqaw==">https://www.slidestalk.com/u42/t8efjk<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2t0bGlmZW5nL2FydGljbGUvZGV0YWlscy83ODUzMzM1NQ==">https://blog.csdn.net/ktlifeng/article/details/78533355<i class="fa fa-external-link-alt"></i></span></li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly91ZHQuc291cmNlZm9yZ2UuaW8v">sourceforge官网<i class="fa fa-external-link-alt"></i></span> 【05年出的，更新到09年】</p><blockquote><p>ppt 、poster、documention、discussion/help 版块(including Chinese)</p></blockquote></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzZGZnaGprbDE5OTMvYXJ0aWNsZS9kZXRhaWxzLzU3NDE3MDc0">udt初步介绍<i class="fa fa-external-link-alt"></i></span> 里面有UDT的架构图，可惜没有再出后续了…</p><blockquote><img src="https://img-blog.csdn.net/20170226170700588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYXNkZmdoamtsMTk5Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" style="zoom: 33%;" /><img src="https://img-blog.csdn.net/20170226170750116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYXNkZmdoamtsMTk5Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" style="zoom:33%;" /></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  大佬系列博客：<span class="exturl" data-url="aHR0cHM6Ly93d3cud29sZmNzdGVjaC5jb20vY2F0ZWdvcmllcy8lRTclQkQlOTElRTclQkIlOUMlRTUlOEQlOEYlRTglQUUlQUUvcGFnZS81Lw==">udt源码分析<i class="fa fa-external-link-alt"></i></span> 后续想要读源码的话可以==再仔细看一下==（目前只是大概浏览了下）,which我觉得讲得真的不错</p><ul><li><p><input disabled="" type="checkbox">  大佬还有系列在<span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC93b2xmY3M=">oschina的平台上<i class="fa fa-external-link-alt"></i></span></p><blockquote><ul><li><input disabled="" type="checkbox"> 发送窗口大小及发送速率的调整</li><li><input checked="" disabled="" type="checkbox"> 实现分析总结</li></ul></blockquote></li></ul><blockquote><ul><li><p>UDT::startup()的调用过程为：UDT::startup()-&gt; CUDT::startup() -&gt; CUDTUnited::startup()。</p><p>从这里也可以看出UDT、CUDT、CUDTUnited之间的关系</p></li><li><p>UDT的命名规则有些讲究，前缀代表着数据类型</p></li><li><p><strong>设计架构</strong></p><ul><li><p>socket创建那一章说的：UDT的使用者在调用UDT API时，UDT API会直接调用CUDT类对应的static API函数，在CUDT类的这些static API函数中会将做实际事情的工作委托给s_UDTUnited的相应函数，但这个委托调用会被包在一个try-catch block中。s_UDTUnited的函数在遇到异常情况时抛出异常，CUDT类的static API函数捕获异常，根据捕获到的异常的具体类型，创建不同的CUDTException对象设置给s_UDTUnited的线程局部存储变量m_TLSError中并向UDT API调用者返回错误码，UDT API的调用者检测到错误码后，通过UDT::getlasterror()获取存储在m_TLSError中的异常。</p></li><li><p>bind( )函数<span class="exturl" data-url="aHR0cHM6Ly93d3cud29sZmNzdGVjaC5jb20vMjAxNS8wOS8wOS9VRFQlRTUlOEQlOEYlRTglQUUlQUUlRTUlQUUlOUUlRTclOEUlQjAlRTUlODglODYlRTYlOUUlOTAlRTIlODAlOTQlRTIlODAlOTRiaW5kJUUzJTgwJTgxbGlzdGVuJUU0JUI4JThFYWNjZXB0Lw==">那一章<i class="fa fa-external-link-alt"></i></span>说的: 和socket创建时一样是==分为3层==：UDT命名空间中提供了给应用程序调用的接口，可称为<strong>UDT API或User API</strong>；User API调用CUDT API，这一层主要用来做错误处理，也就是捕获动作实际执行过程中抛出的异常并保存起来，然后给应用程序使用；CUDT API调用CUDTUnited中API的实现。</p><blockquote><p>“此处可以看到，CUDT提供的这一层API，一个比较重要的作用大概就是做异常处理了。”</p><p>其实这里没有很懂UDT的==设计艺术==，为什么要分三个层次的类，中间那个特别像个中间件，为什么异常处理要单独拎出来。</p></blockquote></li><li><p>bind( )函数<span class="exturl" data-url="aHR0cHM6Ly93d3cud29sZmNzdGVjaC5jb20vMjAxNS8wOS8wOS9VRFQlRTUlOEQlOEYlRTglQUUlQUUlRTUlQUUlOUUlRTclOEUlQjAlRTUlODglODYlRTYlOUUlOTAlRTIlODAlOTQlRTIlODAlOTRiaW5kJUUzJTgwJTgxbGlzdGVuJUU0JUI4JThFYWNjZXB0Lw==">那一章<i class="fa fa-external-link-alt"></i></span>还介绍了UDT的多路复用器CMultiplexer、通道CChannel、发送队列CSndQueue和接收队列CRcvQueue的含义</p><ul><li><p><strong>CChannel</strong></p><blockquote><p>系统UDP socket的一个封装，它主要封装了系统UDP socket handle，IP版本号，socket地址的长度，发送缓冲区的大小及接收缓冲区的大小等信息，并提供了用于操作 系统UDP socket进行数据收发或属性设置等动作的函数。</p></blockquote></li><li><p><input disabled="" type="checkbox">  其实没有很懂多路复用器(Multiplexer)和socket之间的关系 ( 监听端口到底是什么操作？我理解的目前是socketchannel可以实现在一个线程里面监听多个某个端口的状况 ( 是否接收了数据等等 ) 并将更新的情况跟selector ( 也就是多路复用器 ) 交流 ,which会选择让哪个socket去处理这件事情) 、</p></li><li><p>CRcvQueue</p><blockquote><p>在接收队列CRcvQueue的worker线程中，接收到一条消息之后，它会根据消息的目标SocketID，及发送端的地址等信息，将消息以不同的方式进行dispatch</p></blockquote></li></ul></li></ul></li></ul></blockquote></li><li><p><input disabled="" type="checkbox">  这个<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdWtlcm5lbC9wLzg5NzY5ODQuaHRtbA==">UDT源码剖析<i class="fa fa-external-link-alt"></i></span>系列博客讲得很详细，相当于每个头文件在讲解了</p></li><li><p><span class="exturl" data-url="aHR0cDovL3d3dy53aXNlc3R1ZHkuY24vb3BlbnRlY2gvdWR0LWNvbmdlc3Rpb25Db250cm9sQWxnb3JpdGhtLmh0bWw=">这个博客<i class="fa fa-external-link-alt"></i></span>相当于翻译了udt的论文</p></li><li><p><input disabled="" type="checkbox">  ==CS 224==的那个project是怎么整的 还得看下</p></li><li><p>udt思路及代码分析</p><ul><li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cDovL3d3dy53aXNlc3R1ZHkuY24vb3BlbnRlY2gvdWR0LWNvbmdlc3Rpb25Db250cm9sQWxnb3JpdGhtLmh0bWw=">这个<i class="fa fa-external-link-alt"></i></span>里面有代码架构分析</li><li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9uZXR3b3JrLjUxY3RvLmNvbS9hcnQvMjAxNDA5LzQ1MTEzOS5odG0=">这个<i class="fa fa-external-link-alt"></i></span>里面有伪代码</li></ul></li><li><p><span class="exturl" data-url="aHR0cHM6Ly91ZHQuc291cmNlZm9yZ2UuaW8vdWR0NC8=">官方提供的reference<i class="fa fa-external-link-alt"></i></span>里面就有api手册  [代码的doc文件里面也可以离线查看]</p></li></ul><h1 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./src:     UDT <span class="built_in">source</span> code </span><br><span class="line">./app:     Example programs </span><br><span class="line">./doc:     UDT documentation (HTML)</span><br><span class="line">./win:     Visual C++ project files <span class="keyword">for</span> the Windows version of UDT </span><br></pre></td></tr></table></figure><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>refer@WolfCS的<span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC93b2xmY3MvYmxvZy81MTIwNjE=">UDT实现分析总结<i class="fa fa-external-link-alt"></i></span></p><ul><li><p><strong>UDT Socket</strong>是UDT中的核心，同时它也是一座桥梁，它将UDT的使用者应用程序与内部实现部分对于数据结构的管理、网络数据的传输连接起来。</p></li><li><p><strong>应用程序通过它</strong>将数据放进发送缓冲待发送，或者借由它来获取从网络接收数据。而与网络进行交互的部分，则从它那里拿到要发送的数据进行发送，或者在收到packet时将packet dispatch给它。</p></li></ul><h3 id="数据接收部分框架"><a href="#数据接收部分框架" class="headerlink" title="数据接收部分框架"></a>数据接收部分框架</h3><img src="http://static.oschina.net/uploads/space/2015/0928/110552_YTa3_919237.jpg" alt="110552_YTa3_919237.jpg" style="zoom: 67%;" /><h3 id="数据发送部分框架"><a href="#数据发送部分框架" class="headerlink" title="数据发送部分框架"></a>数据发送部分框架</h3><img src="http://static.oschina.net/uploads/space/2015/0928/135751_Ftye_919237.jpg" alt="img" style="zoom:67%;" /><h2 id="UDT-socket-structures"><a href="#UDT-socket-structures" class="headerlink" title="UDT socket structures"></a>UDT socket structures</h2><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202009/25/141253-492288.png" alt="image-20200923200351000" style="zoom: 80%;" /><ul><li><p>socket文件描述符 +  错误码 + UDT socket集合 + TraceInfo ()</p><ul><li><p>TraceInfo , performance的一些数据</p><ul><li><p><strong>aggregate</strong> values</p><ul><li>pktSndLossTotal 和 pktRcvLossTotal的区别？？这个RcvLoss怎么测试呢==？？==</li></ul></li><li><p><strong>local</strong> values since last recorded time</p><blockquote><p>目前理解是一段时间的period算出来的值  ==??不是很确定==</p></blockquote></li><li><p><strong>instant</strong> values at the time they are observed</p></li></ul></li></ul></li></ul><h2 id="UDT-socket-functions"><a href="#UDT-socket-functions" class="headerlink" title="UDT socket functions"></a>UDT socket functions</h2><ul><li>perfmon</li><li>其他的大部i分都跟传统的socket编程的api一致</li></ul><h2 id="CC-Base-Class"><a href="#CC-Base-Class" class="headerlink" title="CC Base Class"></a>CC Base Class</h2><ul><li><p>ccc.h文件定义了父类</p></li><li><p>app/cc.h里面定义了一个基于CCC的拥塞控制方法，是一个good tutorial</p></li><li><p>注意事项</p><ul><li>不要在CCC内部或者它的继承类中调用regular UDT API, 会有未知错误发生</li><li>CCCFactory&lt;…&gt;  是一个C++模板，不需要用类去继承他</li><li>UDT不会立马释放CCCFactory&lt;…&gt;的实例，应该在application类里面释放，只要是在setsockopt（）后就可以</li></ul></li></ul><h1 id="一些中途冒出来的想法"><a href="#一些中途冒出来的想法" class="headerlink" title="一些中途冒出来的想法"></a>一些中途冒出来的想法</h1><p>正如Sigcomm‘2020所示，我们的主机开销也算是延迟的一部分，那么我们的算法的耗时会不会影响整个delay的状况呢 ? </p><h1 id="代码梳理"><a href="#代码梳理" class="headerlink" title="代码梳理"></a>代码梳理</h1><h2 id="UDT部分"><a href="#UDT部分" class="headerlink" title="UDT部分"></a>UDT部分</h2><ul><li><p>跟UDTv4相比，src/core内改动比较大的是</p><ul><li><input disabled="" type="checkbox"> api.cpp</li><li><input disabled="" type="checkbox"> buffer.cpp </li><li><input disabled="" type="checkbox"> core.cpp  改动相当大 ，不仅添加了一些属性，还添加了不少功能</li></ul><blockquote><p> ccc.cpp虽然改动大， 但是本身就是要被继承的，which means没关系</p></blockquote></li></ul><h2 id="PCC"><a href="#PCC" class="headerlink" title="PCC"></a>PCC</h2><h3 id="pcc-sender"><a href="#pcc-sender" class="headerlink" title="pcc_sender"></a>pcc_sender</h3><p>主要是PccSender类，which</p><ul><li><p><strong>functions</strong></p><ul><li><p>触发型</p><ul><li>void OnCongestionEvent (  )</li><li>void OnPacketSent (  )</li></ul></li><li><p>调整型</p><ul><li>QuicBandwidth PacingRate (  )</li><li>QuicTime ComputeMonitorDuration (  )</li><li>QuicTime GetCurrentRttEstimate (  )</li><li>-void UpdateCurrentRttEstimate( )</li><li>-bool ShouldCreateNewMonitorInterval(  )</li><li>-QuicBandwidth UpdateSendingRate</li></ul></li><li><p>总结</p><ul><li>在事件（发包和ack (==目前不确定==这个CongestionEvent是不是ack获得的) ）发生的时候采取一些操作（比如信息统计( RTT估计值 )、调整结构信息）</li><li>调整结构信息<ul><li>sending rate (pacing) 的计算和调整</li><li>MI大小调整 以及 ==创建(??)==新的MI</li><li>RTT</li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>member</strong> </p><ul><li><p>观测值</p><ul><li>avg_rtt_</li><li>sending_rate_</li></ul></li><li><p>工具</p><ul><li>utility_calculator_  （PccUtilityCalculator</li><li>rate_controller_  ( PccRateController<ul><li>rate_control_lock_  (mutex</li></ul></li><li>interval_queue_   （PccMonitorIntervalQueue</li><li>interval_analysis_group_    （PccMonitorIntervalAnalysisGroup、</li></ul></li></ul></li></ul><h3 id="rate-control"><a href="#rate-control" class="headerlink" title="rate-control"></a>rate-control</h3><ul><li><p>在这里面发现了好几个Options的参数</p><ul><li>pypath </li><li>pyhelper ( default : pcc_rate_controller )</li></ul></li><li><p>利用了Python3.5进行了混编</p><ul><li><p><input checked="" disabled="" type="checkbox">  先尝试下能不能换成3.6</p><blockquote><p>坑太多，试到一半放弃了，不然其实是可以的</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  不然就开始配环境（对…换了台g8就可以</p></li></ul></li></ul><h1 id="代码疑惑"><a href="#代码疑惑" class="headerlink" title="代码疑惑"></a>代码疑惑</h1><ul><li><p><input disabled="" type="checkbox">  为什么可以不提前声明，也不include。虽然queue.h确实是在之前被编译的，但是这个就不需要指明依赖关系么</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20200926102437531.png" alt="image-20200926102437531" style="zoom: 50%;" /></li><li><p><input disabled="" type="checkbox">  又用到工厂模式了，可惜我还是不会（ 不过也不是重点，回头看下</p></li><li><p><input disabled="" type="checkbox">  之前master说TCP buffer不需要很大，不停poll就行？？ why ?没有很理解</p></li><li><p><input disabled="" type="checkbox">  用sourceCode整理一下代码结构</p></li></ul><blockquote><p>from aurora test</p></blockquote><hr><ul><li><p><input disabled="" type="checkbox">  sourceCodes 如何处理这么多宏定义的事情…. 一下子理清代码结构还是很重要的（lxg</p></li><li><p>C++特性</p><ul><li><p><input disabled="" type="checkbox">  chrome的Base库对于[]的使用方法  –》 跨平台开发</p><p>zyh给的<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rL3JlZnMvaGVhZHMvbWFzdGVyL2Jhc2UvZXhwb3J0X3RlbXBsYXRlLmgjNDA=">link<i class="fa fa-external-link-alt"></i></span>,针对QUIC_EXPORT_PRIVATE，有空学一手</p></li><li><p><input disabled="" type="checkbox">  哪些需要mutex的lock，哪些不需要，比如说为啥RTT更新就不需要</p><p>pcc_sender.cpp里面</p></li><li><p><input disabled="" type="checkbox">  类的explicit到底有什么作用来着…还有=delete之类，还有GCC扩展之类</p></li><li><p><input disabled="" type="checkbox">  这种单独的匿名的namespace意义何在？在pcc_lin_ucalc.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="comment">// Coefficeint of the loss rate term in utility function.</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> kLossCoefficient = <span class="number">5.0f</span>;</span><br><span class="line"><span class="comment">// Coefficient of RTT term in utility function.</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> kRttCoefficient = <span class="number">1.0</span>/<span class="number">30000.0f</span>;</span><br><span class="line">&#125;  <span class="comment">// namespace</span></span><br></pre></td></tr></table></figure><p>后面的都不在这个namespace里面，所以是文件里面的可以看到，文件外面的看不到 ?</p></li></ul></li></ul><h1 id="待整理"><a href="#待整理" class="headerlink" title="待整理"></a>待整理</h1><ul><li><input disabled="" type="checkbox"> 函数名的mangle过程<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JvbGFuZF9TdW4vYXJ0aWNsZS9kZXRhaWxzLzQzMjMzNTY1">这儿<i class="fa fa-external-link-alt"></i></span>讲得特别好 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteComparator.obj : error LNK2019: unresolved external symbol <span class="string">&quot;int __cdecl does_not_exist(void)&quot;</span> (?does_not_exist@@YAHXZ) referenced <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">&quot;void __cdecl TextScan(struct FileTextStats &amp;,char const *,char const *,bool,bool,__int64)&quot;</span> (?TextScan@@YAXAAUFileTextStats@@PBD1_N2_J@Z)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 利用了Python.h进行了混编</li><li>BBR的研究<ul><li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MC9hcnRpY2xlL2RldGFpbHMvNzIwNDI1MTY=">dog大佬<i class="fa fa-external-link-alt"></i></span>关于BBR的问题剖析，我觉得挺好的，等当前这个demo做完，就看看这个，然后基于BBR改进</li><li><input disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cDovL3d3dy5qZWVweGllLm5ldC9hcnRpY2xlLzUxMzQxNy5odG1s">这个<i class="fa fa-external-link-alt"></i></span>讲了BBR ProbeMore的两阶段探测，里面的idea我确实也没有很理解。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket编程</title>
      <link href="/Codes/socket%E7%BC%96%E7%A8%8B/"/>
      <url>/Codes/socket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><p>《Linux系统编程、网络编程》第10章 网络编程视频课程 ,which is in my Baidu Cloud</p><blockquote><p>目前看到12了，其他的组会上听吧</p></blockquote></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVJKNDExQjc2MS8/c3BtX2lkX2Zyb209MzMzLjc4OC52aWRlb2NhcmQuMQ==">这个b站视频<i class="fa fa-external-link-alt"></i></span>似乎是专门讲Unix网络编程这本书的</p></li><li><p><input disabled="" type="checkbox">  百度云里面存了一个系列视频，我觉得也不错</p></li></ul><blockquote><p> socket通信基础知识</p></blockquote><h1 id="网络编程基础概念"><a href="#网络编程基础概念" class="headerlink" title="网络编程基础概念"></a>网络编程基础概念</h1><ul><li><p>AF_INET ， PF_INET  ， AF_UNIX</p><blockquote><p>AF: address family </p><p>PF: protocol family</p><p>INET指的就是internet ，在网上传输的</p><p>AF_INET（又称 PF_INET）是 IPv4 网络协议的套接字类型，AF_INET6 则是 IPv6 的；而 AF_UNIX 则是 Unix 系统本地通信。</p><p>AF_INET 相比 AF_UNIX 更具通用性，因为 Windows 上有 AF_INET 而没有 AF_UNIX。</p></blockquote></li><li><p>网络编程中的<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mODExYmZmMTVkZTk=">基本数据结构<i class="fa fa-external-link-alt"></i></span></p><p>都是结构体</p><ul><li><p>sockaddr （旧版本为ipv4设置的</p></li><li><p>sockaddr_storage   // 为了兼容ipv6的 升级版本</p><blockquote><p>用到sockaddr的地方都可以用sockaddr_storage来替代。</p></blockquote></li><li><p>addrinfo //存储地址信息的</p></li><li><p>sockaddr_in &amp; sockaddr_in6</p></li><li><p>sockaddr_in和sockaddr使用上的区别</p><blockquote><p>sockaddr和sockaddr_in包含的数据都是一样的，但他们在使用上有区别：</p><ol><li><p>程序员不应操作sockaddr，sockaddr是给操作系统用的</p><p>程序员应使用sockaddr_in来表示地址，sockaddr_in区分了地址和端口，使用更方便。</p></li><li><p>一般用法是：程序员把类型、ip地址、端口填充sockaddr_in结构体，然后强制转换成sockaddr，作为参数传递给系统调用函数</p></li></ol></blockquote></li></ul></li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>socket就是一个文件描述符，但是没有文件名（Linux有七种文件描述符）</li></ul><h2 id="bind"><a href="#bind" class="headerlink" title="bind( )"></a>bind( )</h2><ul><li>bind ( int sockfd ,  const struct sockaddr *addr , socklen_t addrlen  )</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span>  <span class="keyword">short</span>  sa_family;     <span class="comment">/* address family, AF_xxx */</span></span><br><span class="line">    <span class="keyword">char</span>  sa_data[<span class="number">14</span>];                 <span class="comment">/* 14 bytes of protocol address */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sin_family;              <span class="comment">/* Address family */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;       <span class="comment">/* Port number */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>           <span class="comment">/* Internet address */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];    <span class="comment">/*padding to be the same size as struct sockaddr*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>因为sockaddr中直接在char[] 里面写端口和ip比较麻烦，所以用了sockaddr_in, which是分开来记录的</p><blockquote><p>这里sin的意思就是：s代表sockaddr ， in就是sockaddr_in后缀的in的意思</p><p>sin_addr存储的是ipv4的地址 ，acutually就只有32位的 unsigned int ，s_addr 【这个起名真是绕人啊…】</p><p>姑且认为，这里sockaddr_in里面的in代表着是包含在sockaddr内部的</p></blockquote><p>将sockaddr_in强制转换成sockaddr，看到有人这么写：(struct sockaddr*) &amp;sockaddr_in , ==感觉很神奇？不知道理由是什么==</p></li></ul><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll( )"></a>epoll( )</h2><ul><li><p><strong>epoll的过程</strong></p><ul><li><p>创建红黑树    <strong>epoll_create</strong>( int size)</p><blockquote><p>现在内核已经优化到size写一个大于0的数即可</p></blockquote></li><li><p>向树上增加要监听的文件描述符（已经上树了的就不用再上树了）</p><p><strong>epoll_ctl</strong> ( int epfd,  int op, int fd, struct epoll_event* event )</p><blockquote><p><strong>epfd</strong>  红黑树的根节点</p><p><strong>op</strong> 对红黑树的修改操作</p><pre><code>* EPOLL_CTL_ADD  上树 * EPOLL_CTL_MOD  修改* EPOLL_CTL_DEL 下树 </code></pre><p><strong>fd</strong> 要上树的文件描述符</p><p><strong>event</strong>  要监听该文件描述符的什么操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;</span><br><span class="line">   <span class="keyword">void</span>    *ptr;</span><br><span class="line">   <span class="keyword">int</span>      fd;</span><br><span class="line">   <span class="keyword">uint32_t</span> u32;</span><br><span class="line">   <span class="keyword">uint64_t</span> u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;  <span class="comment">// 一般就用上面两个</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">   <span class="keyword">uint32_t</span> events; <span class="comment">/*Epoll events,e.g.EPOLLIN,EPOLLOUT(也主要是这两个事件)*/</span></span><br><span class="line">   <span class="keyword">epoll_data_t</span> data;      <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>细节</strong>：在上树的时候，每个节点既包含了文件描述符fd的信息，又包含了event的信息</p></blockquote></li><li><p>监听节点  <strong>epoll_wait</strong>( int epfd, struct epoll_event *events,int maxevents, int timeout )</p><ul><li>events提供了一个用于存放返回值的数组</li><li>maxevents提供了数组的大小</li><li>返回值是 返回的事件的个数</li></ul></li></ul></li></ul><ul><li><input disabled="" type="checkbox"> epoll反应堆</li></ul><h2 id="setsockopt"><a href="#setsockopt" class="headerlink" title="setsockopt( )"></a>setsockopt( )</h2><ul><li>在创建socket之后，bind之前设定（比如说SO_REUSEADDR）<ul><li>SO_REUSEADDR 端口复用，为何可以端口复用？可以参考下<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNjg0NDkwMzUwOTYyNDY1MTc5MA==">这篇博客<i class="fa fa-external-link-alt"></i></span>提出的理由</li></ul></li></ul><h2 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h2><ul><li><input disabled="" type="checkbox"> ==看完了<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVJKNDExQjc2MT9wPTU2">P56 epoll反应堆<i class="fa fa-external-link-alt"></i></span>==，觉得这个系列视频讲得蛮好的，有空要接着看。</li></ul><h1 id="字节序转换"><a href="#字节序转换" class="headerlink" title="字节序转换"></a>字节序转换</h1><ul><li><p>主机字节序  无论是大端还是小端  本机的字节序就叫主机字节序</p></li><li><p>htonl  这里的l 是long ，32位 ; htons 这里的s是 short ，16位。无论是long还是short ，都是大端的</p><p><strong>htonl</strong> 用于转换ip地址（4个字节）  –》 attention 这里的ip地址是数值形式的（而非点分十进制）</p><p><strong>htons</strong> 用于转换端口号（2个字节）</p><blockquote><p>host to numerical long , host to numerical short</p></blockquote></li><li><p><strong>inet_pton</strong></p><p>将ip地址从点分十进制( point )转换为大端的数值( numerical )形式</p><p><strong>inet_ntop</strong></p></li><li><p>网络编程中尽量都用无符号的 ，不然一不小心出现负值</p></li></ul><h1 id="五大IO模型"><a href="#五大IO模型" class="headerlink" title="五大IO模型"></a>五大IO模型</h1><h2 id="阻塞IO-BIO"><a href="#阻塞IO-BIO" class="headerlink" title="阻塞IO BIO"></a>阻塞IO BIO</h2><p>应用层accept( ) –&gt;  内核recvFrom( <strong>Block</strong>，…  ) 取一个socket</p><p>​            |</p><p>​            V</p><p>应用层read( ) –&gt;内核 recvFrom( <strong>Block</strong>，… ) 取字节流</p><p>​            |</p><p>​            V</p><p>​            ….</p><ul><li>如果accept的时候没有客户端连接上来，那么就卡在这一步，不会往下行进了</li><li>另一方面，如果此时有别的连接进来了，也不会搭理，因为线程阻塞在其中某个步骤中了‘<ul><li>没有办法处理多个客户端连接的情况</li></ul></li></ul><h2 id="非阻塞IO-基于线程驱动模型"><a href="#非阻塞IO-基于线程驱动模型" class="headerlink" title="非阻塞IO   基于线程驱动模型"></a>非阻塞IO   基于线程驱动模型</h2><p>应用层accept( ) –&gt; 内核recvFrom( <strong>nonBlock</strong>，… ) 取一个socket</p><p>​            |</p><p>​            V</p><p>应用层read( ) –&gt; 内核recvFrom( <strong>nonBlock</strong>，… ) 取字节流</p><p>​            |</p><p>​            V</p><p>​            ….</p><ul><li>如果有客户端进来，我可以都处理–&gt;实际上是利用非阻塞的性质，一个函数没有获得结果，我还是可以往下走，keep循环走这个流程</li></ul><h2 id="IO多路复用-NIO-new-IO-基于事件驱动模型"><a href="#IO多路复用-NIO-new-IO-基于事件驱动模型" class="headerlink" title="IO多路复用 NIO new IO   基于事件驱动模型"></a>IO多路复用 NIO new IO   基于事件驱动模型</h2><blockquote><p>New IO是java的一个包，which includes socketChannel,ByteBuffer，Nonblocking IO是Linux操作系统的非阻塞IO</p></blockquote><ul><li>多路复用器 应用层select( ) –&gt; 内核epoll( )</li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202009/26/145842-614824.png" alt="image-20200926145841363"></p><pre><code>* epoll的过程是非阻塞的，但是处理数据的过程是阻塞的（当然还是得遍历，一个一个去处理）* 此外，epoll做了优化，不用把数据从内核空间拷贝到用户空间了，采用内存地址的方式，实现了“零拷贝”</code></pre><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li><p><strong>channel</strong></p><ul><li><p>BIO读写都是单向的</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20200926150226860.png" alt="image-20200926150226860" style="zoom:67%;" /><p>但是NIO是双向的（利用channel）</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20200926151233132.png" alt="image-20200926151233132" style="zoom:67%;" /><p>且在byte数组基础上还包装成了bytebuffer</p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbnBpL3AvNTM3Mjc4Ni5odG1s">bytebuffer与channel的交互<i class="fa fa-external-link-alt"></i></span></p></blockquote></li></ul></li><li><p><strong>selector</strong></p></li></ul><h2 id="NIO-reactor模型-反应堆模型"><a href="#NIO-reactor模型-反应堆模型" class="headerlink" title="NIO reactor模型  反应堆模型"></a>NIO reactor模型  反应堆模型</h2><ul><li>单线程</li><li>多线程</li><li>主从模型</li></ul>]]></content>
      
      
      <categories>
          
          <category> Codes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc链接梳理</title>
      <link href="/Summary/LinkDebug/"/>
      <url>/Summary/LinkDebug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5MzUwNzYvYXJ0aWNsZS9kZXRhaWxzLzUxMzc0Mzg4">这个博客<i class="fa fa-external-link-alt"></i></span>写的很全</p></li><li><p>程序员的自我修养</p><blockquote><p>相关内容，自己的博客上有总结其中几章</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlc3lfSC9hcnRpY2xlL2RldGFpbHMvMTAxMTA1NTcz">chapeter 6 可执行文件(.o)及动态链接(.a)的装载与进程<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlc3lfSC9hcnRpY2xlL2RldGFpbHMvMTAxMTE5Njk2">chapeter 8 Linux共享库(.so)的组织<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>主要讲了一些补充的、正交的 加载相关的环境变量，方便debug编译和链接过程</p></blockquote></li></ul></blockquote></li></ul><h2 id="nm命令-–-查看二进制和符号表的利器"><a href="#nm命令-–-查看二进制和符号表的利器" class="headerlink" title="nm命令  –  查看二进制和符号表的利器"></a>nm命令  –  查看二进制和符号表的利器</h2><blockquote><p>其实还有很多常用的用来读库文件的命令，比如objdump ， readelf ,  这里不过是因为nm比较通用，所以重点介绍一下（其实觉得objdump可以出更多的信息的） </p></blockquote><ul><li><p>nm -g –defined-only libxxx.a # -g 查看外部符号表 ，也是–extern-only</p><blockquote><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202009/18/224322-528256.png" alt="image-20200918224319703" style="zoom: 67%;" /></blockquote><p>  会把.a文件是从<strong>哪些.o文件</strong>中打包过来以及<strong>对应吸收了哪些符号</strong>都标清楚。</p></li></ul><h2 id="a-libxxxx-a-archive-和-so-libxxxx-so-major-minor-shared-object-的区别"><a href="#a-libxxxx-a-archive-和-so-libxxxx-so-major-minor-shared-object-的区别" class="headerlink" title=".a(libxxxx.a)[archive]和 .so(libxxxx.so.major.minor) [shared object]的区别"></a>.a(libxxxx.a)[archive]和 .so(libxxxx.so.major.minor) [shared object]的区别</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a><strong>生成</strong></h3><ol><li><p>生成<strong>静态库</strong>使用ar工具，其实ar是archive的意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar cqs libhello.a hello.o</span><br></pre></td></tr></table></figure><p>​    静态库与汇编生成的目标文件一起链接为可执行文件，那么静态库必定跟.o文件格式相似。其实一个静态库可以简单看成是<strong>一组目标文件</strong>（.o/.obj文件）的集合，即很多目标文件经过压缩打包后形成的一个文件。（这里cqs是静态库的名称，别搞混了）</p></li><li><p>生成<strong>动态库</strong>用gcc来完成，由于可能存在多个版本，因此通常指定版本号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步</span></span><br><span class="line">g++ -fPIC -o DynamicMath.o DynamicMath.cpp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步</span></span><br><span class="line">g++ -shared -o libhello.so.1.0 DynamicMath.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合起来就是</span></span><br><span class="line">g++ -fPIC -shared -o libhello.so.1.0 DynamicMath.o.cpp</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>-shared: 表示生成的是动态链接库</p><p>-fPIC: 生成位置独立的代码，用于编译共享库。在任意内存空间都可以被加载</p><p>-Wall: 生成所有警告信息</p><p>前两个是必加的参数，最后一个有时候会加</p></li></ul><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a><strong>查看</strong></h3><ul><li><p><strong>查看静态库包含了哪些.o文件也很简单</strong>：</p><ul><li><p>nm -g 命令 （上文） 还会列出符号表 </p></li><li><p>ar -t llibxx.a  ( display a <u>table</u> listing contents of the archive )</p><blockquote><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202009/18/230631-588422.png" alt="image-20200918230630480" style="zoom:67%;" /></blockquote></li></ul></li><li><p>查看<strong>动态库</strong>包含了哪些文件</p><ul><li><p>目前没有找到办法查看，只能使用<strong>nm -D xx.so</strong>的方式去查看动态库的动态符号表</p><ul><li>注意，nm的-D参数只对动态库有效</li></ul></li></ul></li></ul><h3 id="调用-–》被载入的时刻不同-最主要的区别在于此"><a href="#调用-–》被载入的时刻不同-最主要的区别在于此" class="headerlink" title="调用 –》被载入的时刻不同 [最主要的区别在于此]"></a><strong>调用</strong> –》被载入的时刻不同 [<strong>最主要的区别</strong>在于此]</h3><ul><li><p>静态库的代码在编译过程中已经被载入可执行程序，因此体积较大</p></li><li><p>共享库(动态库)的代码是在可执行程序运行时才载入内存的，在编译过程中仅简单的引用，因此代码体积较小。</p></li><li><p>共享库(动态库)的好处是，不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例。【这就是共享库诞生的原因之一，另一点就是静态库需要全量更新，但是动态库只需要增量更新】</p></li></ul><ul><li><p><strong>调用命令</strong> 都是一致的</p><p>gcc -L紧跟目录名字 -l紧跟库名字, e.g. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o hello main.c -L. -lmyhello</span><br></pre></td></tr></table></figure><blockquote><p>-L表示搜寻库的目录，-I表示依赖库的名称（这里是L的小写，表示lib）。这个应该都知道把…</p><p>-I（这里是i的大写）（inlcude的意思） 这里用不到，但是也经常用，就直接补充下把，是头文件(.h)所在的路径  </p></blockquote><ul><li><p>请注意，==-lxx一定要写在最后面==，因为gcc的命令是从左到右执行的，被依赖项得放在右边，因为是先解析main.c然后看到里面有一些外部的符号，which是在myhello这个库里面的，然后就往右边解析去寻找这个符号</p><ul><li><p>为什么这么做就很明了， 按需取你需要的符号，which means 没必要把整个myhello库都加载进内存或者集成到最终的hello可执行文件中</p></li><li><p>如果有循环依赖( libA.a&lt;–&gt;libB.so )，那么也要反复写依赖库， which means要写成gcc -IA -IB -IA</p></li></ul></li><li><blockquote><p>gcc -lmath -c test.cc -o test.o  <strong>[ x ]</strong><br>gcc -c test.cc -o test.o -lmath  <strong>[ √ ]</strong></p></blockquote></li><li><p>动态静态库都存在的时候，优先使用.so文件（毕竟动态库开销小、跨平台）</p><blockquote><p>如果想链接的就是动态库的话，就用如下参数：-WI,-Bstatic</p><p>关于WI参数和Bstatic的用法，可以参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIyOTQwMDQ4">这个回答<i class="fa fa-external-link-alt"></i></span></p><p>进一步，使用WI指定链接的soname可以参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfaHVmZW5nL2FydGljbGUvZGV0YWlscy81Mzg5OTEyMA==">这个<i class="fa fa-external-link-alt"></i></span></p></blockquote></li><li><p>动态库链接和运行时加载的过程是分开的，所以有时候链接的时候成功了，但是运行起来还是会报找不到符号表的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-LsoLibPath  <span class="comment"># 链接时的路径</span></span><br><span class="line">-WI,rpath=soLibPath  <span class="comment"># 链接时指定的参数，用于运行时加载的路径</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="链接时的默认搜索顺序、搜索路径"><a href="#链接时的默认搜索顺序、搜索路径" class="headerlink" title="链接时的默认搜索顺序、搜索路径"></a>链接时的默认搜索顺序、搜索路径</h3><h4 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h4><p>搜索顺序：</p><ol><li><p>GCC命令中的参数 -L</p><ol start="2"><li>gcc的环境变量LIBRARY_PATH</li><li>内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的</li></ol></li></ol><h4 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h4><ol><li><p>GCC命令中的参数 -L</p></li><li><p>环境变量LD_LIBRARY_PATH指定的动态库搜索路径</p></li><li><p>配置文件/etc/ld.so.conf中指定的动态库搜索路径</p></li><li><p>默认的动态库搜索路径 /lib 和 /usr/lib</p><blockquote><p>/lib 或 /usr/lib（64位系统下为/lib64 /usr/lib64）路径下的共享库比较特殊。 </p><p>a) 它是默认的共享库的搜索路径。 </p><p>b) 它没有放到/etc/ld.so.conf 文件中。但是在/etc/ld.so.cache 的缓存中有它。 </p><p>c) 其路径下的共享库的变动<strong>即时生效</strong>，不用执行ldconfig。就算缓存ldconfig -p 中没有，新加入的动态库也可以执行。</p></blockquote></li></ol><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li>其实会发现，路径的配置都是遵循着一个从小到大，从内到外的顺序（就跟局部变量和全局变量一样）</li></ul><h2 id="ldconfig"><a href="#ldconfig" class="headerlink" title="ldconfig"></a>ldconfig</h2><p>==注意，这是针对<strong>动态库</strong>的<strong>加载时路径</strong>的配置，<strong>和编译的路径无关</strong>==</p><ul><li><p>/etc/ld.so.conf 是指定动态库搜索路径的一个配置文件</p><blockquote><p>一般cat出来，里面的内容就是：<code>include /etc/ld.so.conf.d/*.conf</code></p><p>这意味着，具体的动态库搜索路径还是由/etc/ld.so.conf.d里面的conf文件决定，简单看下这个文件夹里面有些什么：</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202009/24/172716-465653.png" alt="image-20200924172715424"></p></blockquote></li><li><p>/etc/ld.so.conf.d</p><p>简单看下这个文件夹里面有些什么：</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202009/24/172716-465653.png" alt="image-20200924172715424"></p><p>实际上这是各个安装文件在安装时会自带的config文件，所有的配置集合最终会在ldconfig.so.cache里面存放</p><p>所以<strong>一般安装完一个文件</strong>，都会在ldconfig.so.conf.d文件夹里面更新相应的xx.config文件，这时候<strong>要使用ldconfig命令进行对ldconfig.so.cache文件的更新</strong>，which work according to ldconfig.so.conf , which will traverse ldconfig.so.d recursively to get the *.so/*.a files and record into teh cache file.</p></li><li><p>程序运行时加载库的时候，最终就是从<strong>ldconfig.so.cache</strong>这个文件里面去找</p><blockquote><p>这是一个二进制文件，没法直接查看，但是可以通过ldconfig -p去查看</p></blockquote></li><li><p><strong>ldconfig</strong></p><ul><li><p>当把库安装在/lib或者/usr/lib等默认的搜索路径以后，需要手动修改ld.so.conf文件添加对应路径，然后再调用ldconfig去更新cache文件</p><ul><li>注意，有root权限才可以修改ld.so.conf以及调用ldconfig进行对/etc/ldconfig.so.cache的更新</li></ul></li><li><p>没有root权限的时候就是采用修改环境变量LD_LIBRARY_PATH的方式 或者 编译时候添加参数( -WI,rpath=xxx )  </p><blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rpath</span> <span class="string">-- running path</span></span><br><span class="line"><span class="attr">Wl</span> <span class="string">的l 代表的是把后面的数传递给链接器(ld) </span></span><br></pre></td></tr></table></figure></blockquote><ul><li>注意，添加-L编译参数的方法属于链接路径，ldconfig管的是加载时路径，这两个不要混肴了</li><li>-WI参数和-Xlinker参数的区别可以看<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmlja3lrL3AvNDE4NjkwMi5odG1s">这个博客<i class="fa fa-external-link-alt"></i></span></li></ul></li><li><p>其他参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ldconfig -p 查看共享库的缓存内容 ( <span class="built_in">print</span> ld.config.cache )</span><br><span class="line">ldconfig -n 在当前文件夹下创建软链接，后面编译链接的时候还得加个-L路径参数指向这个文件夹</span><br><span class="line">ldconfig主要的作用是根据/etc/ld.so.conf 的内容，查找内容中所包含目录下实际的动态库文件，生成搜索共享库的缓存文件/etc/ld.so.cache</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="小心得"><a href="#小心得" class="headerlink" title="小心得"></a>小心得</h3><ul><li><p>安装完新的库之后，不管三七二十一，ldconfig一下</p></li><li><p>一开始我很好奇为什么要引入一个/etc/ld.so.cache，搞得那么麻烦。看到有资料是这么说的：</p><blockquote><p>linux下的共享库机制采用了类似于高速缓存的机制，将库信息保存在/etc/ld.so.cache里边</p></blockquote></li></ul><h2 id="ldd-ld-dependency"><a href="#ldd-ld-dependency" class="headerlink" title="ldd (ld dependency)"></a>ldd (ld dependency)</h2><ul><li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2RkYWkvcC8xMDM5NzUxMC5odG1s">ldd原理介绍<i class="fa fa-external-link-alt"></i></span> （最下方） </li></ul><p>例子：</p><p>ldd /usr/bin/passwd  得到返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NTP-slave:/usr/<span class="built_in">local</span>/openssl/lib </span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007fff15dff000)</span><br><span class="line">libpam.so.0 =&gt; /lib64/libpam.so.0 (0x00007fce5eb4b000)</span><br><span class="line">libldap-2.4.so.2 =&gt; /usr/lib64/libldap-2.4.so.2 (0x00007fce5e901000)</span><br><span class="line">        ...省略...</span><br><span class="line">libcrypto.so.0.9.8 =&gt; /usr/lib64/libcrypto.so.0.9.8 (0x00007fce5cefc000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fce5f1a3000)</span><br><span class="line">libz.so.1 =&gt; /lib64/libz.so.1 (0x00007fce5cce5000)</span><br></pre></td></tr></table></figure><p>第一列：程序需要依赖什么库<br>第二列: 系统提供的与程序需要的库所对应的库<br>第三列：库加载的开始地址</p><p>通过上面的信息，我们可以得到以下几个信息：<br>1.通过对比第一列和第二列，我们可以分析程序需要依赖的库和系统实际提供的，是否相匹配<br>2.通过观察第三列，我们可以知道在当前的库中的符号在对应的进程的地址空间中的开始位置<br>如果依赖的某个库找不到，通过这个命令可以迅速定位问题所在</p><ul><li>是一个脚本而不是程序</li></ul><h1 id="待整理"><a href="#待整理" class="headerlink" title="待整理"></a>待整理</h1><ul><li><p><span class="exturl" data-url="aHR0cDovL3d3dy5qZWVweGllLm5ldC9hcnRpY2xlLzg4NDU2MC5odG1s">符号表的含义<i class="fa fa-external-link-alt"></i></span>  &amp; <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1eWFueWd6L3AvNTUzNjYwNy5odG1s">还有这个<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>mangle</p><blockquote><p>恢复mangle后的函数名称使用<strong>c++filt</strong>命令即可,e.g.</p><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20200925114818204.png" alt="image-20200925114818204" style="zoom: 80%;" /></blockquote></li><li><p>U是未定义，which means 是调用外界的函数（在其它库中定义的），T(位于text section)表示函数是当前库中定义的，W(weak)类是当前库中定义，被其它库中的函数覆盖），B(位于bss section)</p></li><li><p>nm -n 按照地址排列符号 （–numeric sort )</p></li><li><p>nm -u 打印未定义符号 （ldd -r xx.so 也可以）</p></li></ul></li><li><p><input checked="" disabled="" type="checkbox">  终于明白了为什么makefile里面有的地方不需要.h，有的地方需要了</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/14ac540fae3bfde3bbaa6b7025ac4d365650fa7f/image4typora/202010/05/000501-970705.png"/><p>​    写在依赖里面是为了及时的更新，是makefile的特性，跟gcc和g++的命令无关。本身cc -E 里面就会处理头文件的事情，which means 头文件不需要我们手动去指定依赖，其实代码里面写的很清楚了，编译器是知道的，而且结果很明显，确实是知道的（详见阮一峰的博客：<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMTEvY29tcGlsZXIuaHRtbA==">编译器的工作过程<i class="fa fa-external-link-alt"></i></span>中的“第五步 预处理”的剖析）</p></li></ul><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li><p><input disabled="" type="checkbox">  静态链接和动态链接都是ld么</p><blockquote><p>目前我的理解是：</p><p>ld是静态链接器，动态链接器实际上是ld-linux.so（ 具体看机子</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compilation and Link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Summary of makefile</title>
      <link href="/Summary/makeFileSummary/"/>
      <url>/Summary/makeFileSummary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWlzbWFuLmdpdGh1Yi5pby9ob3ctdG8td3JpdGUtbWFrZWZpbGUvaW50cm9kdWN0aW9uLmh0bWw=">陈皓：跟我一起写makefile<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="others-拓展"><a href="#others-拓展" class="headerlink" title="others[拓展]"></a>others[拓展]</h2><ul><li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvMzc5MC5odG1s">陈皓：如何调试MAKEFILE变量<i class="fa fa-external-link-alt"></i></span><ul><li>makefile中的origin函数 等等， 在这里又介绍了几个自带的函数</li><li>陈皓自己写了个用于debug的mk</li><li>make的f参数，指定特定名称的文件，多个参数一起用，会连接起来传递给程序一起执行</li><li>还附上了一个remake tool的教程，which tl;dr ，以后再说吧</li></ul></li></ul><h1 id="basis"><a href="#basis" class="headerlink" title="basis"></a>basis</h1><ul><li><p>Makefile里主要包含了五个东西：显式规则、隐晦规则(自动推导)、变量定义、文件指示(makefile里面包含别的makefile 以及 其他一些规则)和注释(#)</p></li><li><p>Makefile最灵魂的东西就是：</p></li><li><p>如果目标(<target>)不存在 <strong>或者</strong> prerequisites的日期新于目标，就执行相应的command</p></li><li><p>make的<strong>工作方式</strong></p>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GNU的make工作时的执行步骤如下：（想来其它的make也是类似）</span><br><span class="line"><span class="number">1.</span> 读入所有的Makefile。</span><br><span class="line"><span class="number">2.</span> 读入被include的其它Makefile。</span><br><span class="line"><span class="number">3.</span> 初始化文件中的变量。</span><br><span class="line"><span class="number">4.</span> 推导隐晦规则，并分析所有规则。</span><br><span class="line"><span class="number">5.</span> 为所有的目标文件创建依赖关系链。</span><br><span class="line"><span class="number">6.</span> 根据依赖关系，决定哪些目标要重新生成。</span><br><span class="line"><span class="number">7.</span> 执行生成命令。</span><br></pre></td></tr></table></figure><ul><li>两个阶段<ul><li>lazy展开（有点python的意思</li></ul></li></ul></li></ul><h2 id="trivial-points"><a href="#trivial-points" class="headerlink" title="trivial points"></a>trivial points</h2><ul><li>.PHONY 伪目标<ul><li>clean命令放最后，因为最前的是默认的总目标</li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWlzbWFuLmdpdGh1Yi5pby9ob3ctdG8td3JpdGUtbWFrZWZpbGUvcnVsZXMuaHRtbA==">伪目标的巧用<i class="fa fa-external-link-alt"></i></span> –》 [ 单独一个make可以work的原理 ]</li></ul></li><li>命令前的小减号 , 出现错误只会弹警告，然后继续运行，不会退出  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-include &lt;filename&gt;   <span class="comment"># 找不到就不用找了</span></span><br><span class="line">-rm edit $(objects)   <span class="comment"># 删除失败就就继续执行吧</span></span><br></pre></td></tr></table></figure></li><li><strong>自动推导</strong> [隐晦规则]<br>  在生成xx.o的过程中可以省去gcc -c xx.c的命令</li><li><strong>另类风格</strong><br>  文件依赖关系会显得有点凌乱，但是会让makefile变得简单<br>  简而言之，就是一个xx.o可以在多行的左边出现</li><li>make -f / make –file 指定除了makefile 和Makefile以外的别的命名方式</li><li>寻找别的makefile的目录<ul><li>系统缺省的目录</li><li>-I / –include-dir 指定的目录</li><li>VPATH变量 &amp; 更灵活的vpath （in whose pattern我们应该用%而不是*的通配符），目录之间使用冒号(:)分隔</li><li>环境变量MAKEFILES<ul><li>不建议使用</li></ul></li></ul></li></ul><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ul><li>一般来说，make会以UNIX的标准Shell，也就是 /bin/sh 来执行命令。</li><li>命令要缩进(tab)</li></ul><h1 id="书写命令"><a href="#书写命令" class="headerlink" title="书写命令"></a>书写命令</h1><blockquote><p>每条规则中的命令和操作系统Shell的命令行是一致的。make会<strong>按顺序一条一条的执行命令会</strong>，每条命令的开头必须以 Tab 键开头，除非，命令是紧跟在依赖规则后面的分号后的。在命令行之间中的空格或是空行会被忽略，但是如果该空格或空行是以Tab键开头的，那么make会认为其是一个空命令。</p></blockquote><ul><li><p>注意点！</p><ul><li>如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令。比如你的第一条命令是cd命令，你希望第二条命令得在cd之后的基础上运行，那么你就<strong>不能把这两条命令写在两行上</strong>，而应该把这两条命令写在一行上，用分号分隔</li></ul></li><li><p>全局参数</p><ul><li>debug<ul><li>–just-print / -n</li><li>-s / –silent / –quiet</li></ul></li><li>-i / –ignore-errors<ul><li>.IGNORE为目标的规则 是另一种级别的防止命令出错的方式</li></ul></li><li>-k / –keep-going</li><li>-w / –print-directory<ul><li>-C 的时候自动打开-w</li><li>-s的时候-w总是失效的</li></ul></li></ul></li></ul><h2 id="嵌套执行make"><a href="#嵌套执行make" class="headerlink" title="嵌套执行make"></a>嵌套执行make</h2><ul><li>总控Makefile , subsystem</li><li>变量传递<ul><li>传递变量到下层用export<ul><li>后面什么都不跟，表示传递所有的变量</li></ul></li><li>SHELL 和 MAKEFLAGS 不管你是否export，其总是要传递到下层 Makefile中<ul><li>MAKEFLAGS如果是自己定义的，得确保其中的选项是大家都会用到的。如果其中有 -t , -n 和 -q 参数，容易出现让人意想不到的结果</li></ul></li><li>make命令中的有几个参数并不往下传递</li><li>不想往下层传递参数的话：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">subsystem:</span></span><br><span class="line">cd subdir &amp;&amp; <span class="variable">$(MAKE)</span> MAKEFLAGS=</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="命令包"><a href="#命令包" class="headerlink" title="命令包"></a>命令包</h2><ul><li>调用的时候和调用变量一样的方式  </li></ul><h1 id="条件判断和函数"><a href="#条件判断和函数" class="headerlink" title="条件判断和函数"></a>条件判断和函数</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li><p>格式</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;conditional-directive&gt;</span><br><span class="line">&lt;text-if-true&gt;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&lt;text-if-false&gt;</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></li><li><p>命令</p><ul><li><p>ifeq &amp; ifneq</p>  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (&lt;arg1&gt;, &lt;arg2&gt;)</span><br><span class="line"><span class="keyword">ifeq</span> &#x27;&lt;arg1&gt;&#x27; &#x27;&lt;arg2&gt;&#x27;</span><br><span class="line"><span class="keyword">ifeq</span> <span class="string">&quot;&lt;arg1&gt;&quot;</span> <span class="string">&quot;&lt;arg2&gt;&quot;</span></span><br><span class="line"><span class="keyword">ifeq</span> <span class="string">&quot;&lt;arg1&gt;&quot;</span> &#x27;&lt;arg2&gt;&#x27;</span><br><span class="line"><span class="keyword">ifeq</span> &#x27;&lt;arg1&gt;&#x27; <span class="string">&quot;&lt;arg2&gt;&quot;</span>        </span><br></pre></td></tr></table></figure></li><li><p>ifdef &amp; ifndef</p><ul><li>ifdef只是测试一个变量是否有值，其并不会把变量扩展到当前位置。*</li></ul></li></ul></li><li><p>注意点<br>  <strong>make是在读取Makefile时就计算条件表达式的值</strong>，并根据条件表达式的值来选择语句，所以，不要把自动化变量（如 $@ 等）放入条件表达式中，因为<strong>自动化变量是在运行时才有的</strong>。</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&lt;function&gt; &lt;arguments&gt;)</span><br></pre></td></tr></table></figure><ul><li><p>$(subst <from>,<to>,<text>)</p></li><li><p>$(patsubst <pattern>,<replacement>,<text>)</p><ul><li>顾名思义，不是text上的substitution了，而是pattern上的substitution</li><li>和变量替换的作用一样<blockquote><p>$(objects:.o=.c) 和 $(patsubst %.o,%.c,$(objects)) 是一样的。</p></blockquote></li></ul></li><li><p>$(strip <string>)</p></li><li><p>$(findstring <find>,<in>)</p></li><li><p>$(filter &lt;pattern…&gt;,<text>)</p></li><li><p>$(filter-out &lt;pattern…&gt;,<text>)</p></li><li><p>$(sort <list>)</p></li><li><p>$(word <n>,<text>)</p></li><li><p>$(wildcard PATTERN…) </p><ul><li><strong>在Makefile规则中，通配符会被自动展开。但在变量的定义和函数引用时，通配符将失效。这种情况下如果需要通配符有效，就需要使用函数“wildcard”</strong>。<blockquote><p>在Makefile中，它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表。如果不存在任何符合此模式的文件，函数会忽略模式字符并返回空。需要注意的是：这种情况下规则中通配符的展开和上一小节匹配通配符的区别。</p></blockquote></li></ul></li><li><p>循环 $(foreach <var>,<list>,<text>)</p></li><li><p>判断 $(if <condition>,<then-part>)   /  $(if <condition>,<then-part>,<else-part>)</p></li><li><p>shell函数</p><blockquote><p>注意，这个函数会新生成一个Shell程序来执行命令，所以你要注意其运行性能，如果你的Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有害的。特别是Makefile的隐晦的规则可能会让你的shell函数执行的次数比你想像的多得多。<br>… <span class="exturl" data-url="aHR0cHM6Ly9zZWlzbWFuLmdpdGh1Yi5pby9ob3ctdG8td3JpdGUtbWFrZWZpbGUvcnVsZXMuaHRtbA==">tl;dr<i class="fa fa-external-link-alt"></i></span></p></blockquote></li></ul><h1 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h1><ul><li>最重要的是 依赖关系 &amp; 生成目标的方法</li><li>通配符<ul><li>~ , * , ?</li><li>在目标和命令中都可以用</li></ul></li><li>多目标</li><li>静态模式语法  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;targets ...&gt; : &lt;target-pattern&gt; : &lt;prereq-patterns ...&gt;</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>e.g.  <target-pattern> like %.o , <prereq-pattern> like %.c</li><li>注意，这里<target-pattern> 和<prereq-pattern> 都是一个集合，所以后面的 $&lt; 表示第一个依赖文件，会<strong>依次</strong>取出这个集合里面的所有文件</li><li>example<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objects = foo.o bar.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.c</span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span> </span><br></pre></td></tr></table></figure></li></ul></li><li>自动生换成依赖性  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc -M xx.cc </span><br><span class="line">cc -MM xx.cc </span><br></pre></td></tr></table></figure><ul><li>与源代码解耦合的方法  <ul><li>.d文件包含.c文件的依赖</li><li>makefile配置生成.d文件，然后再包含这些.d文件</li></ul></li></ul></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul><li><p>命名规则</p><blockquote><p>传统的Makefile的变量名是全大写的命名方式，但我推荐使用大小写搭配的变量名，如：MakeFlags。这样可以避免和系统的变量冲突，而发生意外的事情。<br>可以是数字开头的</p></blockquote></li><li><p>调用</p><ul><li>${} 与 $() </li><li>也可以不加括号，但是加上比较安全</li></ul></li><li><p>定义 &amp; 赋值</p><ul><li><p>= </p><ul><li>右边可以是目前未定义变量</li><li>小心递归定义</li><li>避免在变量中使用函数,whcih 比较增大开</li></ul></li><li><p>:=</p><ul><li>只可以用前面定义好了的 ，所以比较安全</li></ul></li><li><p>#的用法：表示变量定义的中止</p><ul><li><p>正例</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nullstring :=</span><br><span class="line">space := <span class="variable">$(nullstring)</span> <span class="comment"># end of the line</span></span><br></pre></td></tr></table></figure><blockquote><p>nullstring是一个Empty变量，其中什么也没有，而我们的space的值是一个空格。因为在操作符的右边是很难描述一个空格的，这里采用的技术很管用，先用一个Empty变量来标明变量的值开始了，而后面采用“#”注释符来表示变量定义的终止，这样，我们可以定义出其值是一个空格的变量。</p></blockquote></li><li><p>反例</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir := /foo/bar    <span class="comment"># directory to put the frobs in</span></span><br></pre></td></tr></table></figure><blockquote><p>dir这个变量的值是“/foo/bar”，后面还跟了4个空格，如果我们这样使用这样变量来指定别的目录——“$(dir)/file”那么就完蛋了。</p></blockquote></li><li><p>个人想法<br>  何必呢。直接回车换行，也不用#不是很好。不过也可能一方面是为了方便阅读，另一方面也是显式定义，防止不小心打了空格啥的没有看见</p></li><li><p>?=<br>  如果之前没定义过，就赋值，否则就omit</p></li></ul></li></ul></li></ul><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="变量值替换"><a href="#变量值替换" class="headerlink" title="变量值替换"></a>变量值替换</h3><ul><li>$(var:a=b) 或 ${var:a=b}<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo := a.o b.o c.o</span><br><span class="line">bar := $(foo:.o=.c)</span><br></pre></td></tr></table></figure>另一种也能完成变量替换的级数就是 “静态模式”<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo := a.o b.o c.o</span><br><span class="line">bar := $(foo:%.o=%.c)</span><br></pre></td></tr></table></figure></li></ul><h3 id="变量值再当作变量"><a href="#变量值再当作变量" class="headerlink" title="变量值再当作变量"></a>变量值再当作变量</h3><ul><li><p>用法</p>  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = y</span><br><span class="line">y = z</span><br><span class="line">a := $(<span class="variable">$(x)</span>)</span><br></pre></td></tr></table></figure><ul><li>这个知识点主要要明确的就是，是“x=y”，而不是“x=$(y)”,如果没有$,关于y的值不会自动解开来赋值给x的</li></ul></li><li><p>使用多个变量来组成一个变量的名字，然后再取其值</p>  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_second = Hello</span><br><span class="line">a = first</span><br><span class="line">b = second</span><br><span class="line">all = $($a_$b)</span><br></pre></td></tr></table></figure><blockquote><p>这个例子中，如果 $(a1) 的值是“a”的话，那么， $(sources) 的值就是“a.c b.c c.c”；如果 $(a1) 的值是“1”，那么 $(sources) 的值是“1.c 2.c 3.c”。<br>所以配合条件句使用特别好</p></blockquote></li><li><p>也可以放在左值中</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(dir)</span>_sources := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(dir)</span>/*.c)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="多行变量"><a href="#多行变量" class="headerlink" title="多行变量"></a>多行变量</h3><ul><li><p>利用原理：因为命令需要以[Tab]键开头，所以如果你用define定义的命令变量中没有以 Tab 键开头，那么make 就不会把其认为是命令。</p></li><li><p>格式</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> two-lines</span><br><span class="line">echo foo</span><br><span class="line">echo <span class="variable">$(bar)</span></span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="overridd"><a href="#overridd" class="headerlink" title="overridd"></a>overridd</h3><p>如果有变量是通常make的命令行参数设置的，那么Makefile中对这个变量的赋值会被忽略</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖外部命令行的定义</span></span><br><span class="line"><span class="keyword">override</span> &lt;variable&gt;; = &lt;value&gt;;</span><br><span class="line"><span class="keyword">override</span> &lt;variable&gt;; := &lt;value&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加覆盖方式</span></span><br><span class="line"><span class="keyword">override</span> &lt;variable&gt;; += &lt;more text&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行变量的覆盖</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">define</span> foo</span><br><span class="line">bar</span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>优先考虑文件中的，但是如果有make -e的参数，就优先考虑e(nvironment)的变量</li></ul><h2 id="目标变量-Target-specific-Variable"><a href="#目标变量-Target-specific-Variable" class="headerlink" title="目标变量 Target-specific Variable"></a>目标变量 Target-specific Variable</h2><ul><li><p>变量分类</p><ul><li>全局变量<br>  整个文件，我们都可以访问这些变量</li><li>自动化变量<br>  如 $&lt; 等这种类量的自动化变量就属于“规则型变量”，这种变量的值依赖于规则的目标和依赖目标的定义</li><li>目标变量<br>  可以和“全局变量”同名，因为它的作用范围只在这条规则以及连带规则中，所以其值也只在作用范围内有效。而不会影响规则链以外的全局变量的值</li></ul></li><li><p>这个特性非常的有用，当我们设置了这样一个变量，这个变量会作用到由这个目标所引发的所有的规则中去。如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prog : CFLAGS = -g</span><br><span class="line">prog : prog.o foo.o bar.o</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> prog.o foo.o bar.o</span><br><span class="line"></span><br><span class="line">prog.o : prog.c</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> prog.c</span><br><span class="line"></span><br><span class="line">foo.o : foo.c</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> foo.c</span><br><span class="line"></span><br><span class="line">bar.o : bar.c</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> bar.c</span><br></pre></td></tr></table></figure><p>在这个示例中，不管全局的 $(CFLAGS) 的值是什么，在prog目标，以及其所引发的所有规则中（prog.o foo.o bar.o的规则）， $(CFLAGS) 的值都是 -g</p></li><li><p>语法</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;target ...&gt; : &lt;variable-assignment&gt;;</span><br><span class="line">&lt;target ...&gt; : overide &lt;variable-assignment&gt;</span><br></pre></td></tr></table></figure><p><variable-assignment>;可以是前面讲过的各种赋值表达式，如 = 、 := 、 += <code>或是</code>?= 。第二个语法是针对于make命令行带入的变量，或是系统环境变量。</p></li></ul><h2 id="模式变量-Pattern-specific-Variable"><a href="#模式变量-Pattern-specific-Variable" class="headerlink" title="模式变量 Pattern-specific Variable"></a>模式变量 Pattern-specific Variable</h2><ul><li>其实没有很懂 如何 定义到<strong>模式</strong>上，还要<span class="exturl" data-url="aHR0cHM6Ly9zZWlzbWFuLmdpdGh1Yi5pby9ob3ctdG8td3JpdGUtbWFrZWZpbGUvdmFyaWFibGVzLmh0bWw=">回来<i class="fa fa-external-link-alt"></i></span>再看下</li></ul><h2 id="自动化变量"><a href="#自动化变量" class="headerlink" title="自动化变量"></a>自动化变量</h2><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><ul><li>${MAKELEVEL}</li><li>${MAKE}<ul><li>代替make命令本身，在递归调用子文件中的makefile的时候，不能出现make本身(否则会陷入无穷的递归)，应该使用${MAKE}</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjIwNjEyOC9ob3ctdG8tY2FsbC1tYWtlZmlsZS1mcm9tLWFub3RoZXItbWFrZWZpbGU=">refer<i class="fa fa-external-link-alt"></i></span></li><li>经常和-C参数一起使用，代表进入一个目录后使用make命令<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">subsystem:</span></span><br><span class="line">    cd subdir &amp;&amp; <span class="variable">$(MAKE)</span> <span class="comment"># 注意，这两行命令不能分开写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  与上面的作用是一致的</span></span><br><span class="line"><span class="section">subsystem:</span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C subdir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更进一步，我想要执行特定的命令(比如clean)</span></span><br><span class="line"><span class="section">subsystem:</span></span><br><span class="line">    <span class="variable">$(MAKE)</span> -C subdir clean</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="关于各种赋值符号的小总结"><a href="#关于各种赋值符号的小总结" class="headerlink" title="关于各种赋值符号的小总结"></a>关于各种赋值符号的小总结</h2><ul><li>=</li><li>:=</li><li>?=</li><li>+=</li></ul><h1 id="隐含规则"><a href="#隐含规则" class="headerlink" title="隐含规则"></a>隐含规则</h1><h2 id="basis-1"><a href="#basis-1" class="headerlink" title="basis"></a>basis</h2><ul><li>如果没有写.o文件的生成规则，默认就会调用如下规则:把 .o 的目标的依赖文件置成 .c ，并使用C的编译命令 cc –c $(CFLAGS)  foo.c 来生成 foo.o 的目标</li><li>隐含规则可能优先于别的规则被使用，因为隐含规则也有分优先级</li><li>模式的隐含规则，只不过是规则中要有 % 罢了</li></ul><h2 id="自动化变量-1"><a href="#自动化变量-1" class="headerlink" title="自动化变量"></a>自动化变量</h2><ul><li><p>扩展时会一个个文件取出</p><ul><li><p>$@</p></li><li><p>$%</p></li><li><p>$&lt;</p></li><li><p>$*</p><blockquote><p>$* 指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$* 就表示 f1。</p><p>这里陈皓的一起来写makefile里面写错了</p></blockquote></li></ul></li><li><p>返回文件列表</p><ul><li><p>$?<br>  <strong>比较有用</strong></p><blockquote><p>所有比目标新的依赖目标的集合。以空格分隔。</p></blockquote></li><li><p>$^</p><blockquote><p>所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那么这个变量会去除重复的依赖目标，只保留一份。</p></blockquote></li><li><p>$+</p><blockquote><p>所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那么这个变量会去除重复的依赖目标，只保留一份。</p></blockquote></li></ul></li></ul><h2 id="本章节尾部tl-dr"><a href="#本章节尾部tl-dr" class="headerlink" title="本章节尾部tl;dr"></a><span class="exturl" data-url="aHR0cHM6Ly9zZWlzbWFuLmdpdGh1Yi5pby9ob3ctdG8td3JpdGUtbWFrZWZpbGUvaW1wbGljaXRfcnVsZXMuaHRtbCM=">本章节尾部<i class="fa fa-external-link-alt"></i></span>tl;dr</h2><h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><ul><li><p><input checked="" disabled="" type="checkbox">  手写makefile不是很麻烦？没有自动的么？like cmake</p><blockquote><p>autotools（常见的./configure文件就是autotools生成的）和 cmake （cmakelist） 都是用于自动生成makefile的</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  := 和 = 的区别</p><blockquote><p>后者可以使用未定义(但是后文定义了的)变量，但是前者不可以（所以更安全）</p></blockquote></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FycmVuLXdvbmcvcC8zOTc5MjcwLmh0bWw=">Makefile中*和%的区别<i class="fa fa-external-link-alt"></i></span></p></li><li><p><input checked="" disabled="" type="checkbox">  CPPFLAGS 和 CXXFLAGS 的区别</p><blockquote><p>前者是C预处理器的参数（PP代表preprocessing），后者是C++的语言编译器</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compilation and Link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic TCP Initial Windows and Congestion Control Schemes through Reinforcement Learning(JSAC&#39;19)</title>
      <link href="/PaperReading/TCP-RL/"/>
      <url>/PaperReading/TCP-RL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h1><ul><li><p>三个challenge（①如何仅在web服务器侧上测response time②如何建模③如何在大规模的解空间中求解）</p></li><li><p>建模reward的时候的两个目标（①体现IW对网络的影响②保障公平性）</p></li><li><p>虽然是个Non-stationary的环境（这篇文章指出且承认了），但是已有现有算法能比较好地去解决这个问题。</p></li></ul><blockquote><p>==我觉得non-stationary可以做一篇，stationary又可以做一篇2333==</p></blockquote><ul><li>其实我觉得这篇文章建模已经很好且优美了，但还是得跳出来想想缺点在哪儿，如何改进或者做出改变.</li></ul><h1 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h1><ul><li><p>三个challenge对应三个contribution    </p><ul><li><p>【实际可部署性】测量</p><ul><li>不需要<strong>客户端</strong>或者中间件做任何改动 [ 惊了 ]</li></ul><blockquote><p>为了解决挑战一，TCP-RL 修改了前端服务器的 Linux 内核代码和 Web Server 应用 Nginx的代码，使得服务器能够测量并且实时输出每条用户请求的 TCP 流信息(比如网络传输延迟、丢包率、RTT 等)。整个过程在服务器端完 成，不需要客户端或者中间件做任何改动。该数据采集和测量的工具不仅仅可以用于初始窗口的调整，也可用于 Web 服务的网络性能指标管理、监控、 故障诊断。</p></blockquote></li><li><p>【建模】建模的问题（网络是个环境高度变化的场景，且我们的短流场景，是一个非连续的网络条件。另一方面，如果以一条流为一个对象，我们的训练数据也不够）</p><blockquote><p>==我觉得这段分析得特别好==</p></blockquote></li><li><p>【求解】问题求解的复杂度上</p><p>滑动窗口从大规模的决策空间中快速收敛</p><blockquote><p>==但没有给出为什么或者一个比较intuitive的解释…==</p></blockquote></li></ul></li></ul><h1 id="2-background"><a href="#2-background" class="headerlink" title="2 background"></a>2 background</h1><ul><li><p>web services中什么是TCP response time</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/215205-808235.png" alt="image-20201208215203516" style="zoom:67%;" /><p>用T<del>4</del>去estimateT<del>1</del>, 两个都是小的ack数据包</p><p>T2主要是web service provider的情况，所以我们重点考虑的是T<del>1</del>+T<del>3</del> –&gt; TCP response time, which 在计算中就是T4+T5, 也就是用T<del>end</del> - T<del>start</del></p></li><li><p>然后给出了具体场景，where IW 大也不好，小也不好</p></li></ul><h1 id="3-core-Ideas-and-system-overview"><a href="#3-core-Ideas-and-system-overview" class="headerlink" title="3 core Ideas and system overview"></a>3 core Ideas and system overview</h1><blockquote><p>如§I所述，最佳的IW由客户端服务器端到端链接的网络条件（例如，可用带宽和RTT）确定，但是网络条件在时间和空间上都高度可变。 为了应对网络条件的可变性，我们提出了一种自下而上的方法来对来自具有相同网络功能的用户（例如，子网，ISP，省）的流量进行分组，以找到最细粒度的用户组，它们都具有足够的样本 并满足RL上下文连续性要求。</p><p>一方面，使用RL方法自然可以应对网络条件的时间变化。 即RL的目的是为特定用户组的每个给定网络条件找到最佳的IW，并动态适应该用户组的最新网络条件。</p><p>另一方面，用户分组用于处理网络条件的空间变异性。 我们的直觉是，对于给定时间的给定服务器，用户的网络功能（即子网，ISP，省）在很大程度上决定了客户端-服务器端到端链接的网络状况。 如果我们为网络条件相似的每个用户组运行RL，则可以提高每个组的性能。</p></blockquote><h2 id="A-why-RL"><a href="#A-why-RL" class="headerlink" title="A. why RL"></a>A. why RL</h2><blockquote><p>为TCP流选择适当的IW并非易事。<br>使用数据驱动的方法是一个有前途的方向，但是即使我们已详细记录了网络状况，仍然很难确定合适的IW，因为它与多个复杂因素（例如网络带宽，RTT，路由器缓冲区大小， 用户和服务器之间的端到端路径上的流量大小等。 而且，所有这些因素都可能随时间频繁变化，**<u>这意味着适当的IW随时间变化</u>**。</p><p>==我感觉这句暗指了non-stationary environment的本质== ==》 <strong><u>对于其他的RL来说，无法很好解决。但是对于MAB来说，可以通过折扣函数去解决non-stationary的问题</u></strong></p><p> 增强学习（RL）受人类行为主义心理学的启发[8]，是机器学习社区中的一种流行技术，非常适合应对上述情况。 基本上，它会根据环境反馈不断做出决策。 一旦正确定义了优化目标（在RL中称为奖励函数），RL就可以通过尝试次优决策与利用当前最佳决策之间的动态平衡，基于试错法逐渐找到最佳决策。 而且，其探索和开发算法可以对环境变化做出快速反应。 因此，RL自然适合动态设置IW的任务。 借助正确定义的奖励功能，RL算法可以帮助自动找到良好的IW，而无需担心复杂的网络因素及其变化。</p></blockquote><h2 id="B-How-to-define-the-reward-function"><a href="#B-How-to-define-the-reward-function" class="headerlink" title="B. How to define the reward function"></a>B. How to define the reward function</h2><ul><li><p>直接用我们的目标的绝对值作为reward不合适，因为不同环境下，我们的目标的取值范围也是在变化的</p><blockquote><p>一个简单的方法是直接使用TCP响应时间，这是我们在本文中的优化目标。 但是，对于不同的请求，Web响应的大小可能会有很大差异，因此无法直接比较其网络传输时间。我们注意到，RL方法需要将TCP流数据聚合在一起以学习历史并通过比较不同决策的收益来选择IW。 <u><strong>因此，我们需要一个奖励函数，无论response size如何，它都能准确反映IW对TCP响应时间的影响。</strong></u></p></blockquote></li><li><p>吞吐量（单位时间传输的字节数）是满足上述要求的良好候选者。 增加IW以获取部署我们方法的流（称为SmartIW流）的最佳收益可能会损害与SmartIW流共享某些网络资源的非SmartIW流的性能。因此，为了保持公平性，我们将RL优化目标限制为为SmartIW流获得尽可能高的吞吐量，同时尽力不损害非SmartIW流。 因此，我们在奖励函数中同时考虑了吞吐量和RTT，其中RTT是影响非SmartIW流性能的网络拥塞的良好指标[14]。 **<u>这里我们没有在奖励函数中增加损失，因为许多基于RTT的拥塞控制算法[15，16]在不考虑损失的情况下都能很好地工作</u>**。【这里引文是Vegas和Timely，后者是知道的，说的是RTT这一个指标就enough了】</p></li></ul><ul><li><p>hesy summary: 目标有两个</p><ul><li>降低响应时间( increase goodput ) ==其实这个逻辑还是没有很懂==</li><li>保证非smartIW流之间的公平性</li></ul></li></ul><h2 id="C-Overview-of-SmartIW"><a href="#C-Overview-of-SmartIW" class="headerlink" title="C. Overview of SmartIW"></a>C. Overview of SmartIW</h2><blockquote><p>​    如图3所示，当SmartIW前端服务器接收到来自用户的HTTP请求时，前端服务器与该用户建立会话并识别其属于哪个用户组。 然后，前端服务器从每组RL的结果中获取IW的最新决策，并在将响应发送给用户之前迅速为会话设置此IW。 响应的传输完成后，前端服务器输出TCP性能数据，并将其报告给服务器群集，该服务器群集使用新的测量数据按组RL运行，并充当学习每个用户组IW的大脑。 此外，大脑会根据历史数据运行用户分组算法。 大脑以分钟为单位的时间连续地将每个用户组的IW决策发送到前端服务器。 这样，它可以控制所有会话的行为。 请注意，所有过程都是在服务器端完成的，无需任何客户端或中间件（例如，路由器，交换机，链接）的修改或协助，并且我们的方法仅更改IW，而无需修改TCP拥塞控制算法。</p></blockquote><h1 id="4-CORE-ALGORITHMS"><a href="#4-CORE-ALGORITHMS" class="headerlink" title="4 CORE ALGORITHMS"></a>4 CORE ALGORITHMS</h1><blockquote><p>在本节中，我们介绍SmartIW的两种核心算法：用于在给定用户组（§IV-A）的情况下学习每组IW的RL算法和用户分组算法（§IV-B）。</p></blockquote><p>hesy：我觉得主要是引入了折扣的概念</p><h2 id="A-Reinforcement-Learning"><a href="#A-Reinforcement-Learning" class="headerlink" title="A. Reinforcement Learning"></a>A. Reinforcement Learning</h2><p>采用折现的UCB算法[12]来解决非平稳土匪问题</p><blockquote><p>对于平稳多臂匪徒问题，基本的UCB算法[17]已被证明是最优的[12]。 它的假设是上下文的未知分布不会随时间变化。 但是，在我们的方案中，网络条件可能会随时间而变化，从而使我们的RL问题成为非平稳的土匪问题。 在本文中，我们采用折现的UCB算法[12]来解决非平稳土匪问题。 基本过程如算法1所示。</p></blockquote><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/221525-355237.png" alt="image-20201208221524818"></p><p>ct（γ，i）是公式3中定义的discounted padding function，其中B是奖励的上限，而ξ&gt; 0是控制探索概率的适当常数方差。 请注意，如果历史上经常使用一只手臂，则其ct（γ，i）小于另一只手臂，因此可以将次优手臂用于勘探。 这样，该算法可以在探索和开发之间取得平衡。</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/221603-648108.png" alt="image-20201208221601756"></p><p>“最小填充函数值意味着该手臂比其他手臂被更频繁地利用“</p><blockquote><p>传统的UCB算法</p><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/221715-425521.png" alt="image-20201208221653974" style="zoom:67%;" /></blockquote><img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/222015-372992.png" alt="image-20201208222014171" style="zoom: 80%;" /><blockquote><p>为了在IW学习中使用折扣UCB，关键是奖励功能和臂的定义。 </p></blockquote><ul><li><p>Reward function definition</p><p>我们的目标是设置理想的IW，以充分利用客户端-服务器端到端链接的带宽而不会引起拥塞。 如§III-B所述，我们将RTT视为网络拥塞的信号。 公式4中的奖励反映了我们的目标，即最大化产量并最小化RTT。  Goodputs（i）是我在时间s的即时吞吐量，RTTs（i）是我在时间s的即时回报。  Goodputmax是历史记录测量中的最大吞吐量，RTTmin是历史记录测量中的最小RTT。  α是达到产量和RTT之间平衡的参数。 小α有利于降低RTT，这可能会使算法在IW小的情况下显得比较保守。 大α有利于高吞吐量，这可能会使算法在IW大的情况下具有攻击性。</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/222044-670705.png" alt="image-20201208222042659"></p><pre><code>&gt; hesy: 其实是体现了归一化的思想在内的</code></pre></li></ul><ul><li><p>Arms definition</p><blockquote><p>折扣UCB中的武器清单是具有一些离散值的决策空间。 但是，IW具有连续且较大的价值空间。 我们的目标是在大型决策空间中快速找到最佳的IW。 残酷地搜索整个决策空间效率低下，因为太多的武器会浪费探索过程中的时间。<u>为了解决这个问题，我们基于关于TCP性能和IW之间关系的常识（在II-B节中提到）提出了一种滑动决策空间方法。</u></p></blockquote><p>首先，我们从一小段IW作为武器开始，武器列表中的值根据武器的性能是动态的。 基本过程如图4所示。我们使用n个IW作为初始武器清单（例如，n = 4，IW = [15、20、25、30]）。 在更新决策时，我们将首先检查是否要更新清单。 基本思想是检查最大的臂IWlarge或最小的臂IWsmall当前是否是最佳臂。 如果是，我们将更新清单。 否则手臂列表保持不变。 最好的手臂是等式3中具有最大奖励和最小填充函数值的手臂。<u>最小填充函数值意味着该手臂比其他手臂被更频繁地利用</u>。 根据对IW的普遍理解（第II-B节），IW太大和太小都是次优的。 如果当前的最佳分支是IWlarge，则将新的IW（IWlarge +？）添加到分支列表并删除IWsmall。 如果当前的最佳分支是IWsmall，则将新的IW（IWsmall-？）添加到分支列表并删除IWlarge。  ？ 是用于搜索IW空间的恒定步长。 如果当前最佳IW不是最大或最小，则机械臂列表保持不变。</p></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/222406-576492.png" alt="image-20201208222312140"></p><blockquote><p>==这么做的原因是什么？？ 似乎没有就上面那句话”根据常识“，是没有办法很好解释的==</p><p>或者说 没有给收敛性的一个比较intuitive的解释</p></blockquote><h2 id="B-User-grouping"><a href="#B-User-grouping" class="headerlink" title="B. User grouping"></a>B. User grouping</h2><p><u>hesy: 这么分，是为了保障在context差不多的情况下，一个类型的训练数据尽量多</u></p><blockquote><p>实际上，由于用户具有不同的网络功能（例如，子网，ISP，省），因此用户的网络状况具有很大的多样性。 对于来自不同省（例如北京，上海）和ISP（例如CHINANET，CMNET，UNICOM）的用户，他们的网络条件（例如带宽和RTT）可能不同。 要将RL应用在空间变化很大的网络条件下，应对具有不同网络条件的用户进行不同对待。 流的IW由其端到端链接的网络条件（即带宽和RTT）确定。 </p><p><u>理想的解决方案是为每个链接学习IW</u>。但是，每个链接几乎没有足够的样本供RL学习IW。 </p><p>因此，我们认为将具有相似网络功能的用户分组以共享其样本是一种很有前途的解决方案。 但是，由于以下难题，<u>对用户进行分组具有挑战性</u>。  1）粒度太细的用户组（例如IP）通常缺乏足够的样本来连续监视其网络性能，这无法满足RL的要求;  2）用户组的粒度太粗（例如所有流）会导致性能欠佳。 </p></blockquote><blockquote><p>为了解决上述问题，我们提出了一种新的用户分组方法。 用户分组的目的是找到可以满足RL要求（即在网络条件下保持连续性）的最细粒度的用户组。 <strong><u>基本思想是使用自下而上（因此最细到最粗）的搜索技术来找到最佳用户组，每个用户组都有足够的样本并保持网络状况的连续性。</u></strong> 我们使用§IV-A中的奖励函数来量化网络条件，该函数同时考虑了吞吐量和RTT。</p></blockquote><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/08/222833-304334.png" alt="image-20201208222832909"></p><blockquote><p>更具体地说，在数据传输之前，**<u>IP是最细粒度的用户组</u>**，因为当时的服务器只能获取IP作为用户的网络功能。 通过使用IP查找B公司的地理位置数据库，该数据库类似于地理位置数据库[18]，我们可以推断出其他网络功能，例如子网，ISP，省等。表II显示了该地理位置数据库的示例。 请注意，IP仅属于表中功能的一条记录，并且所有记录在IP空间中都是互斥的。 因此，用户分组结果的结构形成了4层（子网，ISP，省，全部）树。 图5示出了一个例子。 </p></blockquote><p><u>我们说一个用户组在一个长度为t的time bin中至少有S<del>min</del>个样本时，具有足够的样本。</u></p><blockquote><p>对于每个time bin，我们计算奖励的分布，并使用平均奖励来量化此时间仓的网络状况。 这样，我们获得了平均回报的时间序列，以表征网络状况的变化。 然后，我们定义一个等式5中所示的称为网络抖动 J 的度量，以捕获网络条件的连续性。  n表示时间段的数量，X<del>s</del>是时间段s的奖励。 </p></blockquote><p>​    由于IW影响奖励，因此在计算 J 时，IW在每个时间段中应保持相同。 请注意，较小的 J 表示网络状况的变化较小。 要将RL方法应用于给定的用户组，J 越小越好。 这里我们选择一个阈值T，如果用户组 J ≤ T，则满足RL的要求。</p><blockquote><p>==hesy的理解是== : 一开始是有个训练过程，刻意去尝试某个IW值（不一定是最优），但多个时间段内要保持动作一致，去check</p></blockquote><p>​        <img src="https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/004907-711586.png" alt="image-20201209004906245" style="zoom:80%;" /></p><blockquote><p>​    在此示例中，假设最佳用户的网络功能是 <em>subnet</em>，而最coarse的特征就是<em>All</em>。 北京有3个ISP：CMNET，UNICOM和CHINANET，它们有8个子网S1-S8。 用户分组算法包括4个步骤：</p><p>• 步骤1：我们检查所有叶节点是否都满足RL的要求（等式5）。 该示例的结果是，S1，S3，S6（绿色）满足RL的要求，而S2，S4，S5，S7，S8（蓝色）不满足RL的要求，因此S1，S3，S6是三个可以 使用RL学习IW。</p><p>• 步骤2：无法满足RL要求的兄弟叶子节点被合并到一个名为“其他”的新叶子节点中，这是其原始父节点的新子节点。 在此示例中，S<del>2</del>变成了Other，是CMNET的新子节点。  S<del>4</del>和S<del>5</del>合并到UNICOM的新子节点Others中。  S7和S8合并到CHINANET的新子节点Others中。</p><p>• 步骤3：我们检查“其他”节点是否满足RL的要求。 如果“其他”节点不符合要求，则需要将其与父级（ISP）的兄弟“其他”节点合并，并形成其原始祖父母（省）的新子级“其他”节点。 在该示例中，CMNET的其他节点和CHINANET的其他节点合并为北京的新子节点其他。  UNICOM的Others节点满足要求，因为在合并S4和S5之后，它有足够的样本来测量其网络状况。</p><p>• 步骤4：算法将继续检查“其他叶子”节点，直到所有叶子节点（根的子“其他其他”节点除外）都满足RL的要求。 最后，如果“其他所有人”不符合要求，我们将使用标准IW [6]作为流程。 在此示例中，除“其他所有节点”之外的叶节点是可以使用RL学习IW的用户组。</p></blockquote><h1 id="5-Design-and-Implementation"><a href="#5-Design-and-Implementation" class="headerlink" title="5. Design and Implementation"></a>5. Design and Implementation</h1><p>tl；dr</p><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/09/005911-917455.png" alt="image-20201209005910544"></p><h1 id="inspiration-of-hesy"><a href="#inspiration-of-hesy" class="headerlink" title="inspiration of hesy"></a>inspiration of hesy</h1><ul><li><p>要会用这个词: <strong>data-driven</strong> 代替 ML-based 或者RL-based。高大上！</p></li><li><p>contribution绝对不能写自己是首先用DRL做这个的，因为还有些水会也是做这个的，所以我们也要credit他们并且讲清楚区别。</p></li><li><p>写作的时候要注意层次感，不能一上来就说这个feature适合用RL做，应该先给出一个也比较适合但是naive的solution，再说RL可以解决这个naive的defects</p></li><li><p>目标函数或者奖励函数的形式  需要找人背书，不能自己随便造一个</p><ul><li>目标函数没有想好要不要让清空队列，因为延迟梯度也能包含这个目标。（或许可以做一个实验来证明这两个的相关性，看下Timely怎么做ECN和延迟的相关性的，记得这两个并不是很大程度上的相关鸭）</li></ul></li><li><p>对于问题的建模做的很好，而且作为了一个challenge</p><p>hesy:The long flow switch like this, the cold start process should not be ignored–”Use SmartIW</p></li></ul><ul><li>实验细节还得要好好看下</li></ul>]]></content>
      
      
      <categories>
          
          <category> PaperReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>questions in paperreading</title>
      <link href="/Summary/questions/"/>
      <url>/Summary/questions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="TIMELY"><a href="#TIMELY" class="headerlink" title="TIMELY"></a>TIMELY</h1><p><span class="exturl" data-url="aHR0cHM6Ly9taXFpYW5taW1pLmdpdGh1Yi5pby8yMDE5LzAxLzIwL1RJTUVMWS8=">mamaqi的TIMELY笔记<i class="fa fa-external-link-alt"></i></span> (sigcomm’15)</p><ul><li><p><del>正反向的传输会相互影响么？? 正反向共享链路 ？</del> <img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202008/09/202622-45397.png" alt="image-20200809202217447"></p><blockquote><p>会的会的2333，因为RTT是往返嘛</p></blockquote></li></ul><h1 id="mamaqi-待读文章"><a href="#mamaqi-待读文章" class="headerlink" title="mamaqi 待读文章"></a>mamaqi 待读文章</h1><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9taXFpYW5taW1pLmdpdGh1Yi5pby8yMDE5LzAyLzE2L3F1aWMv">QUIC<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9taXFpYW5taW1pLmdpdGh1Yi5pby8yMDE5LzAyLzExL0RlZXBSTS8=">Hongzi Mao:Deep RM<i class="fa fa-external-link-alt"></i></span></p></li></ul><h1 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h1><h2 id="285"><a href="#285" class="headerlink" title="285"></a>285</h2><h3 id="lec-5"><a href="#lec-5" class="headerlink" title="lec 5"></a>lec 5</h3><ul><li>PG和POMDP的关系</li></ul><h3 id="lec-6"><a href="#lec-6" class="headerlink" title="lec 6"></a>lec 6</h3><ul><li><p>AC和PG的区别是不是这个：AC引入了TD去估计Q value ,which means我们可以online learning , 一步一学习。    </p><blockquote><p>==感觉PG和AC的区别主要还是用MC还是TD去拟合critic，到后来的GAE，说到底，还是采样的事情？==</p></blockquote></li></ul><h3 id="lec-7"><a href="#lec-7" class="headerlink" title="lec 7"></a>lec 7</h3>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research on Transport Control and Flow Scheduling in Low-latency Datacenter Networks</title>
      <link href="/PaperReading/Research-on-Transport-Control-and-Flow-Scheduling-in-Low-latency-Datacenter-Networks/"/>
      <url>/PaperReading/Research-on-Transport-Control-and-Flow-Scheduling-in-Low-latency-Datacenter-Networks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="第一章-引言"><a href="#第一章-引言" class="headerlink" title="第一章 引言"></a>第一章 引言</h1><ul><li>数据中心应用类型</li><li>数据中心流量特性</li><li>仍存在的问题</li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202008/08/214444-685710.png" alt="image-20200808214442717"></p><p>说实话感觉这里讲的不是很清楚，回头再来仔细梳理下把。</p><h1 id="第二章-背景和相关综述"><a href="#第二章-背景和相关综述" class="headerlink" title="第二章 背景和相关综述"></a>第二章 背景和相关综述</h1><ul><li>传统TCP及研究进展<ul><li>调整AIMD参数 –》good idea ==但是还是那个问题，为什么要搞pacing，而放弃窗口==</li><li>==incast 难道是数据中心特有的问题?== 其实只要BDP足够小就可以把？RTT不够小，但是我bandwidth够小总可以吧？TCP incast不就是拥塞么?<ul><li>我感觉只要是低延迟链路，就会有这种情况 （一旦有超时发生， 网络中会出现长时间的链路闲置状态）</li><li>如果要在数据中心做，得考虑放弃短流的调度，只调度长流？看看iroko怎么做的？</li></ul></li><li>DCTCP是解决TCP incast的？？</li></ul></li></ul><ul><li><p>TCP incast</p><ul><li><p>以前的解决方案</p><blockquote><p>第一类的主要方法是修改TCP配置参数，将RTO设置为微秒级 别，从而减小超时重传所需的等待时间; 第二类为修改TCP的拥塞控制算法，提高 缓存利用率，进而避免丢包；第三类是通过修改QCN算法来提高协议公平性；第 四类摒弃 TCP 方案采用 UDP 方案彻底避免超时重传的问题。</p></blockquote></li></ul></li><li><p>多种流量共存</p><ul><li><p>长流(重视高吞吐) &amp; 短流(重视低延迟) –》 目标不同</p></li><li><p>相互作用：长流容易造成短流的饥饿</p></li><li><p>还有部分应用存在截止时间需求 ，whose 主要性能指标是截止时间错过率</p></li><li><p>应对措施</p><blockquote><p>非截止时间流调度机制和传输协议研究，截止时间流调度机制 和传输协议研究和混合流调度机制和传输协议研</p></blockquote></li></ul></li><li><p>任务调度</p></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202008/09/154827-641523.png" alt="image-20200809154826511"></p><h1 id="第三章-支持选择性反馈的编码传输协议研究研究"><a href="#第三章-支持选择性反馈的编码传输协议研究研究" class="headerlink" title="第三章 支持选择性反馈的编码传输协议研究研究"></a>第三章 支持选择性反馈的编码传输协议研究研究</h1><ul><li>关于发送速率，on friendliness ，需要做的是：找论文背书，基于别人的公式进行建模</li></ul><h1 id="第四章-数据中心网络的混合流调度机制SMF"><a href="#第四章-数据中心网络的混合流调度机制SMF" class="headerlink" title="第四章 数据中心网络的混合流调度机制SMF"></a>第四章 数据中心网络的混合流调度机制SMF</h1><blockquote><p>这一部分讲的比较详细</p></blockquote><h2 id="miscelleneous"><a href="#miscelleneous" class="headerlink" title="miscelleneous"></a>miscelleneous</h2><ul><li>如何判断截止时间流还有非截止时间流本身也是个很大的问题啊！</li><li>传统解决方案中，基于速率的控制协议（RCP）到底是什么呢？Karuna采用的MCP又是什么呢?</li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ul><li><p>SMF</p><ul><li>对于非截止事件流，采用SJF</li><li>对于截止事件流，采用MLFQ</li><li>是满足多重目标的分布式拥塞控制协议，旨在调度混合流以改善流完成率和流完成时间</li><li>也对初始窗口大小做了改进，where也很重要。裴丹的，实际上是根据具体的业务进行改进了的。看看SMF采取了哪些feature，怎么做的，或许也是一个点？</li></ul></li><li><p>NP-hard问题证明</p><ul><li>截止时间流</li><li>非截止时间流（ 感觉讲得也很粗糙</li><li>所以使用启发式</li></ul></li><li><p>对于不能在截止时间前完成的流，<strong>“早丢弃”</strong>方式提前丢弃以节省网络带宽</p><ul><li>==自己的机制里面如果太简单，也可以加一些“早丢弃”等手工的规则==</li></ul></li><li><p>考察指标</p></li></ul><img src="C:\Users\hesy\AppData\Roaming\Typora\typora-user-images\image-20200809171054378.png" alt="image-20200809171054378" style="zoom: 80%;" /><h1 id="第五章-任务级别的截止时间感知流调度机制研究TAPS"><a href="#第五章-任务级别的截止时间感知流调度机制研究TAPS" class="headerlink" title="第五章 任务级别的截止时间感知流调度机制研究TAPS"></a>第五章 任务级别的截止时间感知流调度机制研究TAPS</h1><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><ul><li><p>如果某任务没有在截止事件前完成，那么该任务已经成功传输完成的所有数据都是无用数据。非常不幸的是，数据中心网络中采用的大部分传输协议，都是基于竞争的传输协议，如 TCP，RCP[35]，ICTCP[10]，DCTCP[2]，采用平均分配带宽的原则为网络中互相竞争的每条流分配链路以及可用带宽。这些方案固然可以有效将数据流从源端传输到目的端，但是他们忽略了数据流或是任务的截止时间，同时也没有意识到不同流之间的区别，无法做到最小化网络流完成时间。</p></li><li><p>统计数据表明，对于 web 应用，每个任务至少包括 88 条流[2]，对于 MapReduce 搜索工作每个任务包含 30 到 50000 条流[6]，对于 Cosmos 每个任务约包含 30 到 70 条流[97]。这些统计数据表明在数据中心内，很多应用对于每个任务会产生相应的多条数据流来完成，因此任务才是处理的单位。</p></li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>使用SDN</p>]]></content>
      
      
      <categories>
          
          <category> PaperReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python总结</title>
      <link href="/Summary/python/"/>
      <url>/Summary/python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><ul><li><p>说千道万，不如<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNjNDExaDdoZD9mcm9tPXNlYXJjaCZzZWlkPTE3OTE4NDE2ODkwNDkxMDIzMzY=">画图实在<i class="fa fa-external-link-alt"></i></span></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbG9sZWluYS9wLzUyNzY5MTguaHRtbA==">函数传参，传的是引用<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个<strong>可变对象（比如字典或者列表）</strong>的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。如果函数收到的是一个<strong>不可变对象（比如int、str或者tuple</strong>）的引用，就不能直接修改原始对象－－相当于通过“传值’来传递对象。 </p><blockquote><p> 注意，tuple本身不可变，但是tuple里面的元素可变</p></blockquote></blockquote></li><li><p><input disabled="" type="checkbox">  一些常用的基本操作哪些是深/浅拷贝？tf里面呢？</p></li></ul><h1 id="闭包-amp-nonlocal"><a href="#闭包-amp-nonlocal" class="headerlink" title="闭包 &amp; nonlocal"></a>闭包 &amp; nonlocal</h1><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTAzMDE1Mw==">nonlocal和global区别<i class="fa fa-external-link-alt"></i></span></p><p>global的作用对象是全局变量，nonlocal的作用对象是外层变量（很显然就是闭包的情况）。</p><p>注意，只有函数内的函数才是闭包，函数内的语句块，不算是闭包。</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNDQ2MTQwNA==">闭包<i class="fa fa-external-link-alt"></i></span></p><ul><li>其中几个作用：节省开销，将函数与某个参数绑定</li><li>装饰器就是一种闭包</li></ul></li></ul><h1 id="python-numpy-pandas-切片-amp-索引"><a href="#python-numpy-pandas-切片-amp-索引" class="headerlink" title="python,numpy,pandas 切片&amp;索引"></a>python,numpy,pandas 切片&amp;索引</h1><h2 id="python-list-amp-numpy的索引-异同"><a href="#python-list-amp-numpy的索引-异同" class="headerlink" title="python list &amp; numpy的索引 异同"></a>python list &amp; numpy的索引 异同</h2><ul><li><p>python ( list ) 支持的索引 和 np数组支持索引的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a[1][1]    <span class="comment"># 索引</span></span><br><span class="line">5</span><br><span class="line">&gt;&gt; a[1]</span><br><span class="line">[4,5,6]</span><br><span class="line">&gt;&gt; a[1][:]    <span class="comment"># 也支持切片</span></span><br><span class="line">[4,5,6]</span><br><span class="line">&gt;&gt; a[1,1]<span class="string">&quot;&quot;</span><span class="string">&quot;相当于a[1,1]被认为是a[(1,1)],不支持元组索引&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: list indices must be integers, not tuple</span><br><span class="line">&gt;&gt; a[:,1]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: list indices must be integers, not tuple</span><br></pre></td></tr></table></figure><p><strong><u>只支持 listData[ Idx_in_x ][ Idx_in_y ][ Idx_in_z ]的索引操作</u></strong> –》 先取出第一个维度的元素，然后再取出内部一个元素，再再再取出其中一个元素，像拆包一样。</p><p>numpy不仅支持上述操作，更支持多维度上更便捷的索引方式</p><p>我的理解是，索引就是select出到单个元素，切片是给出一个数组的子集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">listData=[ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ]</span><br><span class="line">npData = np.array( listData )</span><br><span class="line"></span><br><span class="line">listData[<span class="number">1</span>][<span class="number">2</span>]  <span class="comment"># 索引操作，select出单独的元素</span></span><br><span class="line">listData[<span class="number">1</span>][:]  <span class="comment"># 索引+切片</span></span><br><span class="line">listData[<span class="number">1</span>,<span class="number">2</span>]    <span class="comment"># list不支持这种索引方式</span></span><br><span class="line"></span><br><span class="line">npData[<span class="number">1</span>][<span class="number">2</span>]    <span class="comment"># list能支持的我也能！</span></span><br><span class="line">npData[<span class="number">1</span>][:]    <span class="comment"># list能支持的我也能！</span></span><br><span class="line">npData[<span class="number">1</span>,<span class="number">2</span>]    <span class="comment"># 我还能！在多维的索引上，np更方便!</span></span><br><span class="line">npData[<span class="number">1</span>,:]    <span class="comment"># 我还能！在多维的索引上，np更方便!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当维度一旦多起来，少打几个中括号还是很可观的</span></span><br><span class="line"><span class="comment"># 而且，还有这种情况：我想要1、3列的第2个元素</span></span><br><span class="line">listData[<span class="number">0</span>,<span class="number">2</span>][<span class="number">1</span>]    <span class="comment"># 当然错误，listData[1,3]都无法支持更别说listData[1,3][2]了</span></span><br><span class="line">true<span class="comment"># 但是np可以这样&quot;稀疏检索&quot;(我自己发明的词汇)</span></span><br><span class="line">npData[<span class="number">0</span>,<span class="number">2</span>][<span class="number">1</span>]    <span class="comment"># 但是这样是错误的，因为npData[1,3]是一个具体的元素</span></span><br><span class="line">npData[ [<span class="number">0</span>,<span class="number">2</span>],<span class="number">1</span> ] <span class="comment"># 这样才是对的，但就是这样，listData也不支持</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="numpy-amp-pandas的索引-异同"><a href="#numpy-amp-pandas的索引-异同" class="headerlink" title="numpy &amp; pandas的索引 异同"></a>numpy &amp; pandas的索引 异同</h2><blockquote><p>reference：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Nfb19sX29fbi9hcnRpY2xlL2RldGFpbHMvODA4NzU4MDQ=">ndarray对象和pandas中DataFrame对象的索引方法及对比<i class="fa fa-external-link-alt"></i></span></p><p>目前能得到的结论就是 pandas的DataFrame尽量用iloc的方式去索引</p></blockquote><h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><p><u>为了更好的记忆和统一索引方式</u>，pandas使用的时候请一律使用**<u> df.iloc</u>** ,这个时候就跟numpy的习惯用法一致了。</p><h3 id="再说原因-和-细节"><a href="#再说原因-和-细节" class="headerlink" title="再说原因 和 细节"></a>再说原因 和 细节</h3><ul><li>pds 是基于 numpy构建起来的数据    结构</li><li>没有 df[ i , j ] 的索引方法，df[ i ][ j ] 也和list/numpy不一样，是先索引列，再索引行（numpy实际上是从外向内索引，对于二维的来说就是先索引行再索引列了） 。<ul><li>注意，df[ i ][ j ]索引的时候，第一个维度一定要使用 标签，有（大多数）时候标签不一定是一个int，是一个str</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>listData=[ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdData = pd.DataFrame(listData,columns = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],index=[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdData[<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;f&#x27;</span>]    <span class="comment"># 正确</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdData[<span class="string">&#x27;c&#x27;</span>][<span class="number">2</span>]    <span class="comment"># 正确，第二个索引不一定要使用标签(因为pdData[&#x27;c&#x27;]实际上是一个Series了,Series的索引是int还是str没所谓)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdData[<span class="number">2</span>][<span class="number">2</span>]  <span class="comment"># 错误，第一个索引还是要对应于columns的标签的，除非使用iloc</span></span><br></pre></td></tr></table></figure><p>​        pdData  :  <img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/18/150002-412342.png" alt="image-20201218145959545"></p><ul><li>df.iloc[i][j] 和df.iloc[i,j] 就和numpy的一样了，而且 i 与 j 应该全为int，而不是str了( 就算index和columns都可能是str的情况下 )，如果贸然写columns/index对应的str标签，反而会报错</li><li>对应于iloc就是loc了，iloc要求索引下标全都是int，这里就要求严格与index/columns对应（大多数时候是string）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdData.loc[<span class="string">&quot;d&quot;</span>,<span class="string">&quot;a&quot;</span>] <span class="comment"># 正确，索引就应该是string，和DataFrame的标签一致</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdData.loc[<span class="string">&quot;d&quot;</span>][<span class="number">1</span>]    <span class="comment"># 正确，因为pdData.loc[&quot;d&quot;]实际上就是检出了Series,Series的索引是int还是str没所谓</span></span><br></pre></td></tr></table></figure><h2 id="视图与索引"><a href="#视图与索引" class="headerlink" title="视图与索引"></a>视图与索引</h2><p>**<u>np数组返回的都是视图</u>**，除非具体到某个元素，否则修改视图的内容，原内容都会变（including 切片）。</p><p><strong>list除了<u>切片</u>返回的是一份副本</strong>，其余都是返回视图。</p><pre><code>&gt; 所以python想要实现列表元素的值传递时，一个方式就是参数使用 listData[:]</code></pre>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; listData=[ [1,2,3],[1,2,3],[1,2,3] ]</span><br><span class="line">&gt;&gt;&gt; npData = np.array( listData )</span><br><span class="line">&gt;&gt;&gt; a = listData[1]    <span class="comment"># 这样是会改变的，返回的是数组对象的引用</span></span><br><span class="line">&gt;&gt;&gt; a[2]=8</span><br><span class="line">&gt;&gt;&gt; listData        </span><br><span class="line">[[1, 2, 3], [1, 2, 8], [1, 2, 3]]</span><br><span class="line">&gt;&gt;&gt; b = listData[1][:]    <span class="comment"># 这样是不会改变的</span></span><br><span class="line">&gt;&gt;&gt; b[2]=9</span><br><span class="line">&gt;&gt;&gt; listData        </span><br><span class="line">[[1, 2, 3], [1, 2, 8], [1, 2, 3]]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c = npData[1][:]    <span class="comment"># numpy无论如何都会改变原数据的</span></span><br><span class="line">&gt;&gt;&gt; c[2]=11</span><br><span class="line">&gt;&gt;&gt; npData        </span><br><span class="line">[[1, 2, 3], [1, 2, 11], [1, 2, 3]]</span><br></pre></td></tr></table></figure><blockquote><p>注意，副本是一份浅拷贝 详情可以参考==<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDQxNjY0OS9hcnRpY2xlL2RldGFpbHMvOTI4Nzg4NDc=">这个博客<i class="fa fa-external-link-alt"></i></span>==举的例子</p><p>想要实现深拷贝，还是得调用 .deepcopy( )</p></blockquote><h2 id="切片索引、布尔索引、花式索引"><a href="#切片索引、布尔索引、花式索引" class="headerlink" title="切片索引、布尔索引、花式索引"></a>切片索引、布尔索引、花式索引</h2><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rha2UxMy9hcnRpY2xlL2RldGFpbHMvODEzMDI0NTA=">refer : 切片索引、布尔索引、花式索引<i class="fa fa-external-link-alt"></i></span></p><ul><li>切片是快照，会改变原本元素，但是布尔和花式就不会</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">15</span>).reshape(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 切片    </span></span><br><span class="line">b1 = a[:<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line">mask = a2&lt;<span class="number">5</span></span><br><span class="line">b2 = a2[mask]</span><br><span class="line"><span class="comment"># 花式索引</span></span><br><span class="line">b3 = a3[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhbnhpdXRpbmcxOTkzL2FydGljbGUvZGV0YWlscy8xMDMyNTUyOTM=">多维度的花式索引<i class="fa fa-external-link-alt"></i></span>的写法和含义</p><blockquote><ul><li><p>一维的切片和索引差不多</p></li><li><p>二维的： array[ [ Idx_in_x ],[ Idx_in_y ],[ Idx_in_z ] ]    # 当Idx不是一个集合，是单个元素的时候，就可以省略中括号  </p><blockquote><p>array[ [ 1 ] ,[ 2 ] ,[ 3 ] ]  –&gt;  array[ 1 ,2  ,3  ] </p></blockquote><ul><li>请区分array[ [ 0,1] ]  和 array[ 0, 1]   <strong># 两个方括号是代表选取行数 要跟前面的[0,1] 区分开</strong></li><li>array[[1, 3,0], [1, 2,0]]     <strong># 获取索引为(1,1)和(3,2)和(0,0)的元素</strong></li></ul></li><li><p>三维的：array[[0,0],[1,1],[2,2]]</p></li></ul></blockquote></li></ul></li></ul><h1 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h1><p>可以参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E0NjQwNTcyMTYvYXJ0aWNsZS9kZXRhaWxzLzQ3MzU1MjE5">这个<i class="fa fa-external-link-alt"></i></span></p><h1 id="joyful-pandas"><a href="#joyful-pandas" class="headerlink" title="joyful pandas"></a>joyful pandas</h1><blockquote><p>pandas的一些少见的注意事项，具体代码和例子来源于datawhale的<span class="exturl" data-url="aHR0cHM6Ly9uYnZpZXdlci5qdXB5dGVyLm9yZy9naXRodWIvR1lISEFIQS9Kb3lmdWwtUGFuZGFzL3RyZWUvbWFzdGVyLw==">Joyful-Pandas系列<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1.基础操作"></a>1.基础操作</h3><ul><li>df.value_count()</li><li>df.unique()</li><li>df.nunique()</li><li>df.describe()的一些用法<ul><li>可以自行选择分位数 df.describe(percentiles=[.05, .25, .75, .95])</li><li>非数值型也可以用describe函数</li></ul></li></ul><p><img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202008/26/112845-885917.png" alt="image-20200826112844748"></p><ul><li>还有一些练习题，也可以做下</li></ul><h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h3><ul><li><p>函数式索引 &amp; 布尔索引</p></li><li><p><strong>loc</strong>可以接收整数或整数列表或布尔列表以及Series，而<strong>iloc</strong>中接收的参数只能为整数或整数列表或布尔列表，不能使用布尔Series，如果要用就必须使用.values()把dataframe里面的列表拿出来</p></li><li><p>索引不要用浮点数，否则在切片索引的时候，[2: ]就表示的不是索引的下标从第二个开始了，而是用比大小的方式去看哪些行的索引值比2大，都拿出来</p></li><li><p>[ ]的索引方式中，比较灵活。有几种方式：</p><ul><li><p>索引index：</p><ol><li><p>data[3:5] 数字的话，就是索引行的绝对位置，就算index也是数字，也不要混淆啊！</p><ul><li><p>这个和data.iloc[3:5]效果是一样的(Series和DataFrame都适用)</p><blockquote><p>tip: loc和iloc其实都是二维的，如果只写了一个维度，就是指的index</p></blockquote></li><li><p>对于Series来说，这个和data[data.index[3:5]]效果是一样的（但是DataFrame就会报错的）</p></li></ul></li><li><p>如果index也是数字，想要索引对应于某个数值的index怎么办？(比如索引index为33的那一行)<br> data[data.index.get_loc(33)]</p></li></ol></li><li><p>索引column：<br>  如果index是str类型，data[“label”]默认也是索引column（最标准的写法还是loc[:,”label”]）</p><blockquote><p>注意，我个人测试的时候loc对于Series也是不会报错的，但是我还是不建议。因为容易混肴，Series没必要用loc，具体的含义我也搞不清楚</p></blockquote></li></ul></li><li><p>[快速标量索引]:当只需要取一个元素时，at和iat方法能够提供更快的实现</p><blockquote><p>看到区间索引，其实目前觉得差不多了。没必要再学更多了</p></blockquote></li></ul><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><h2 id="代码展示（主要使用axex操作）"><a href="#代码展示（主要使用axex操作）" class="headerlink" title="代码展示（主要使用axex操作）"></a>代码展示（主要使用axex操作）</h2><p><span class="exturl" data-url="aHR0cHM6Ly9uYnZpZXdlci5qdXB5dGVyLm9yZy9naXRodWIvaGV4aTUxOS9Db2Rlc1NuaXBwZXRzL2Jsb2IvbWFzdGVyL3B5dGhvbkRlbW8vbWF0cGxvdGxpYkNvbmZpZy5pcHluYg==">my codes on github<i class="fa fa-external-link-alt"></i></span></p><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><blockquote><p>所有高级的api，包括seaborns在内，都是基于最基本的matplotlib开始的，那么一定都得先搞清matplotlib的基本概念（ax和fig等）</p></blockquote><img src="https://img-blog.csdnimg.cn/20200311202147484.png" alt="在这里插入图片描述" style="zoom:67%;" /><ul><li>每一次subplot动作都是独立的</li></ul><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure(num=<span class="string">&#x27;panel&#x27;</span>, figsize=(<span class="number">8</span>,<span class="number">4</span>),facecolor=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制两个不同大小的区域</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>) <span class="comment"># 划分1行3列，第1个子区域</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="comment"># 划分1行2列，第2个子区域</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>其实把每一次 <code>subplot</code> 动作看作是独立的就行了，第一次将整个画板划分为1行3列完全不影响第二次划分为1行2列，它们仅影响当前划分后子图的大小。</p><img src="https://img-blog.csdnimg.cn/20190930150818814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMzQ3ODY5,size_16,color_FFFFFF,t_70"  /></blockquote><ul><li><p>添加子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## 使用figure + addsubplot ########</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">######## 使用figure + subplot ########</span></span><br><span class="line">fig = plt.figure(num=<span class="string">&#x27;panel&#x27;</span>, figsize=(<span class="number">8</span>,<span class="number">4</span>),facecolor=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"><span class="comment"># 划分三个小区域，绘制出第一个和第三个区域</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)  <span class="comment"># 划分1行3列，第1个子区域  </span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)  <span class="comment"># 划分1行3列，第3个子区域</span></span><br><span class="line">plt.show()</span><br><span class="line">true<span class="comment"># 注意，这里是plt.subplot而不是fig.add_subplot，which让我感到奇怪，但是先记住吧</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">######## 使用subplots,which是最常用的 ########</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">6</span>,<span class="number">3</span>))  <span class="comment"># 不仅会出现一个新的axes对象，还会创建一个新的fig对象，which the axes belongs to</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plot data</span></span><br><span class="line">axes[<span class="number">0</span>].plot(A,B)</span><br><span class="line">axes[<span class="number">1</span>].scatter(A,C)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>用 <code>subplots</code> 创建一个画板，同时也创建了一个绘图子区域 <code>axes</code>。画板赋值给了 <code>fig</code>，绘画子区域赋值给了 <code>ax</code>。这样一来，所有 <code>fig.***</code> 都是对整个画板进行操作，所有 <code>ax.***</code> 都是对这个 Aexs 子区域进行操作。</p></blockquote></li><li><p><strong>fig.xx 如果用于处理ax内部的属性，比如轴的刻度范围之类的，其实都是对ax.xx的api的封装</strong>，所以掌握ax.xx才是王道 和 最正确的方式</p></li></ul><h1 id="整型数的大小"><a href="#整型数的大小" class="headerlink" title="整型数的大小"></a>整型数的大小</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly96eGkubXl0ZWNocm9hZC5jb20vYmxvZy9kZXNnaW4vcHl0aG9uJUU0JUI4JUFEJUU3JTlBJTg0JUU2JTk1JUI0JUU1JTlFJThCJUU1JThEJUEwJUU1JUE0JTlBJUU1JUIwJTkxJUU0JUI4JUFBJUU1JUFEJTk3JUU4JThBJTgy">refer1:最小占量<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzY1MDE0NTcy">refer2:可以无限大<i class="fa fa-external-link-alt"></i></span></li></ul><p>64位系统，至少是24个字节，每次增量是4。python取消了long类型，所以，存储的数据大小是无限大的，取决于你的内存大小</p><h1 id="collections-defaultdict和dict区别"><a href="#collections-defaultdict和dict区别" class="headerlink" title="collections.defaultdict和dict区别"></a>collections.defaultdict和dict区别</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjY3VtdWxhdGVfemhhbmcvYXJ0aWNsZS9kZXRhaWxzLzc4NzU4ODk4">refer<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># 用dict得非常小心...</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = dict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.get(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">3</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用defaultdict就不用检查是否存在这个key    </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = defaultdict(int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>]</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network常识记录</title>
      <link href="/Summary/CC%E5%B8%B8%E8%AF%86%E8%AE%B0%E5%BD%95/"/>
      <url>/Summary/CC%E5%B8%B8%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一些默认设置"><a href="#一些默认设置" class="headerlink" title="一些默认设置"></a>一些默认设置</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3ByaW50Lm5ldC9zbGFfcGVyZm9ybWFuY2UucGhwP25ldHdvcms9c2w=">Sprint.net中统计的网络性能参数<i class="fa fa-external-link-alt"></i></span> </li><li>rtt普通情况下也就0.1s【CUBIC论文中写的】(数据中心中就是微秒级别)<ul><li>BBR论文中表示，由于buffer是BDP的几个数量级，所以rtt从毫秒级别变成了秒级</li></ul></li><li>DC中的带宽应该是10Gbps</li></ul><h1 id="How-can-we-be-aware-of-congestion"><a href="#How-can-we-be-aware-of-congestion" class="headerlink" title="How can we be aware of congestion"></a>How can we be aware of congestion</h1><ul><li><p>the internet is a <strong><code>decentralized</code></strong> system, and as a result of that, doesn’t have any central coordinator telling senders to slow down if link queues downstream of some sender are filling up.</p></li><li><p>There are two main indicators: <strong><code>packet loss</code></strong> and increased  <strong><code>round trip times</code></strong>  for packets. </p><ul><li><p>If a sender notices packet loss, it’s a pretty good indicator that congestion is occuring. </p></li><li><p>Another consequence of queues filling up though is that if packets are spending more time in a queue before making it onto the link, the round trip time, which measures the time from when the sender sends a segment out to the time that it receives an acknowledgement, will increase.</p><blockquote><p>summary：可以通过 <strong>packet loss</strong> 和 <strong>RTT</strong> 这两个现象来观察是否有congestion</p></blockquote></li></ul></li></ul><h1 id="概念解释-辨析"><a href="#概念解释-辨析" class="headerlink" title="概念解释/辨析"></a>概念解释/辨析</h1><h2 id="sending-rate-amp-delivery-rate"><a href="#sending-rate-amp-delivery-rate" class="headerlink" title="sending rate &amp; delivery rate"></a>sending rate &amp; delivery rate</h2><ul><li>sending rate就是发送速率</li><li>delivery rate强调接收方收到的包的速率（你发出去但是人家不一定能收到不是</li></ul><h2 id="pacing"><a href="#pacing" class="headerlink" title="pacing"></a>pacing</h2><ul><li><p>TCP的流控机制，基本上是有两种的，专业一点的说法分别叫做pure rate control和windows-based这两种</p><ul><li><p>pure rate control </p><ul><li>告诉你sender一个发送速率(bottleneck bandwidth)，sender的发送速率不超过这个确定值。</li></ul></li><li><p>window-based control</p><ul><li>这个就是常见的TCP 滑动窗口的协议，就是有一个ack确认后我才能发送下面的。</li></ul></li><li><p>pacing结合了这两种</p><ul><li>uses the tcp window to determine how much to send but uses rates instead of acknowledgments to determine when to send.</li><li>为什么要这样，因为标准TCP的发包是back-to-back的,TCP的这种clumped方式会引发高延迟以及burst traffic下的丢包大大增加，同时还有ACK Compression，Multiplexing等各种问题都会导致性能受损，所以有人突出了一个机制，我们能不能不让包堆在一起发，在一个窗口里流出间隔，那我们的排队队长就会下降的。</li><li>pacing可以看作TCP的一个变体，是结合了上面的两个流控方式，他使用tcp window决定发多少,用bottleneck bandwidth决定什么时候发，它定义了一个发包的间隔</li></ul></li><li><p>paing需要优化嘛？需要。 更多的可以看这个<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMDc0MTA3Mw==">专栏<i class="fa fa-external-link-alt"></i></span>搜集的paper  </p></li></ul></li></ul><h2 id="ACK-compression"><a href="#ACK-compression" class="headerlink" title="ACK compression"></a>ACK compression</h2><ul><li>由于中间链路的缓存以及和其他TCP连接一起共享缓存等原因，可能会导致ACK报文成堆到达发送端。这种场景我们就称呼为ACK压缩。</li><li>i.e. 一个TCP发送者的 自计时取决于到来的，由接收机按照相同时间间隔生成的ACK。如果这些的ACK通过网络过境期间存在一些开销在队列中，但是，它们的间隔可能会改变。当ACK的到达间距小于它们发送的间距，发送者可能会被误导，发送比网络可以接受的更多的数据，这可能导致堵塞和效率损失。</li><li>于ACK compression场景，reno拥塞控制就是逐个处理每个ACK报文，这样就会导致拥塞窗口突然增大，发送端突然发出大量的TCP报文，这种突然发出大量数据的行为我们称呼为burst，影响网络平稳。另外一方面ACK compression还会影响RTT估计，之前我们介绍过有些拥塞控制算法基于时延来来估计网络拥塞情况，因此 ACK compresion还会影响这类基于时延的拥塞控制算法的性能。</li></ul><h2 id="数据平面-amp-控制平面"><a href="#数据平面-amp-控制平面" class="headerlink" title="数据平面&amp;控制平面"></a>数据平面&amp;控制平面</h2><p>除了控制平面(Control Plane)和数据平面(Data Plane)还有管理平面(Management Plane)。数据平面又叫转发平面(Forwarding Plane),通过查看收到流量的目的地址，按照转发表(forwarding table)来处理流量的去向。可能转发流量去一个出接口，可能丢弃流量，或者送去控制平面做进一步处理。控制平面维持数据平面操作所需的必要信息。 这些信息通过协议和算法，收集和计算得来。网络节点间的控制平面能相互交换信息。这些信息被处理之后用于建立不同的表来帮助数据平面的流量操作。除了EIGRP, OSPF, BGP，PIM, HSRP等3层协议以外，CDP,UDLD,LACP,ARP,STP,VLAN等2层协议都属于控制平面。管理平面就是处理配置和监控控制平面。比如CLI, SNMP,XML, Wireshark,NetFlow,SPAN,API,JSON，NETCONF等等都属于管理平面。   </p><h2 id="latency-V-S-delay"><a href="#latency-V-S-delay" class="headerlink" title="latency V.S. delay"></a>latency V.S. delay</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzU5MzgwNjc0">refer<i class="fa fa-external-link-alt"></i></span></p><ul><li><p><strong>latency</strong></p><p>指的是一个报文进入一台设备以致这台设备所经历的实践。实际上考验的是报文在这台设备上<strong>消耗的时间</strong>。时间越短，这台设备的性能越高。</p></li><li><p><strong>delay</strong></p><p>是指一个操作和另个一个操作之间<strong>停顿的时间</strong>。</p></li></ul><p>所以，latency是不可避免的正常开销，然而delay是额外的开销。</p><h1 id="做CC实验要注意的点"><a href="#做CC实验要注意的点" class="headerlink" title="做CC实验要注意的点"></a>做CC实验要注意的点</h1><ul><li>不仅要测拥塞程度是否改进了</li><li>还要测量收敛速度和fairness to existing congestion control protocols</li></ul><h1 id="数据中心的CC"><a href="#数据中心的CC" class="headerlink" title="数据中心的CC"></a>数据中心的CC</h1><p>数据中心的基本设置<img src="https://images.weserv.nl/?url=https://gitee.com/HesyH/Image-Hosting/raw/master/image4typora/202012/03/113542-587066.png" alt="image-20201203113534852"></p><h2 id="learn-from-Lili-Liu’s-paper"><a href="#learn-from-Lili-Liu’s-paper" class="headerlink" title="learn from Lili Liu’s paper"></a>learn from Lili Liu’s paper</h2><ul><li><p>一般<strong>低延迟应用</strong>的流<strong>的 SLA</strong> (Service Level Agreement)要求是 300ms 内完成</p></li><li><p><strong>研究TCP</strong>（而不是一些基于UDP协议）<strong>的重要性</strong> （ 请注意，quic只是实现的一个途径–》用户态 ）</p><ul><li><p>数据中心要求可靠性，目前实现数据中心间的可靠传输的唯一途径是TCP</p><blockquote><p>数据中心间的链路是由 ISP 提供带宽和时延保障的专用链路，但由于路由切换及一 些突发事件，这种专用链路上偶尔也会发生丢包 </p></blockquote><p>根据 ISP 与服务商的SLA，<strong>丢包率一般在 0.5% 到 5% 之间，时延一般不超过 20ms</strong>。</p></li><li><p>研究结果表明数据中心网络中99%的流量都是TCP流量[2]</p><blockquote><p>参考文献[2]是一个2010年的文章</p></blockquote></li><li><p>然而，数据中心网络的传输协议大多数都采用TCP，<strong>并使用平均分配带宽为原则</strong>，将网络资源平均分配。如此做的方案主要有**<u>TCP、RCP[35]、DCTCP和HULL[18]等</u>**</p></li></ul></li><li><p>诸多研究表明<strong>TCP RTO是导致TCP Incast</strong> 的主要原因</p><ul><li>在 TCP 中，默认超时重传计时器 $RTO_min$ 为 200ms，数据中心网络正常 RTT 通常为 200µs</li></ul></li><li><p>数据中心网络传输协议近年来<strong>主要面临的问题</strong>有：</p><ul><li>TCP Incast 问题</li><li>低延迟、高吞吐性能需求</li><li>多任务模式等（对于FCT有要求）</li></ul></li><li><p>最近发表的一个研究([3])表明，网络中由于低效的链路带宽利用率，平均<strong>有 7.25% 的数据流未能在截止时间前完成</strong>。</p></li><li><p>TCP的设计采用平<strong>均分配带宽原则</strong></p></li><li><p><strong>截止时间流和非截止时间流</strong></p><ul><li>尽管数据中心网络中<strong>有截止时间流</strong>所占比率很低，大概是所有流量的 5%。</li><li><strong>非截止时间流</strong>的应用彼此不同。有些应用像 VM 迁移或者数据备份等，在传输开始前就可以得知该流的大小，然而对于一些像数据库存取和 HTTP 分块传输的应用，这些应用在他们传输开始之前不知道流大小或者截止时间相关信息。<ul><li>因此，对于非截止时间流，较短的流完成时间和较高的吞吐率是他们的<strong>主要性能指标</strong>。</li></ul></li></ul></li></ul><h1 id="HULL"><a href="#HULL" class="headerlink" title="HULL"></a>HULL</h1><ul><li>high-performance ultra-low latency</li><li>他从三个层次来进行了设计：<ul><li>Phantom queues: Detecting and signaling congestion<ul><li>这个机制是一种为了创建剩余buffer提出的一种机制，也就是我们常说的bandwidth headroom，通过减少长流带宽来获取更高的短流效率，在端口使用仿真的虚拟队列基于链路利用率而不是利用队列的占有率来设计ECN标记。</li></ul></li><li>DCTCP: Adaptive reaction to ECN</li><li>Packet pacing<ul><li>这个在前面的文章里面也讲了Pacing的实现原理，但是我们也分析过Pacing其实不一定会带来特别好的效果，是有一定条件的，所以这篇文章用了一个硬件pacer，感觉很厉害。但是本质还是按照固定间隔发送封包。</li></ul></li></ul></li></ul><h1 id="some-resources（博客资源-and-so-on）"><a href="#some-resources（博客资源-and-so-on）" class="headerlink" title="some resources（博客资源 and so on）"></a>some resources（博客资源 and so on）</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zcXVpZGFydGguY29tL3JjL3Byb2dyYW1taW5nL25ldHdvcmtpbmcvMjAxOC8wNy8xOC9pbnRyby1jb25nZXN0aW9uLmh0bWw=">squidarth:intro congestion-control<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站 | Jekyll -》 mkdocs -》 hexo</title>
      <link href="/siteBuilding/"/>
      <url>/siteBuilding/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h1><p>之前是用的jekyll，但是没找到我想要的全局搜索功能，有兴趣的还是可以看下：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlc3lfSC9hcnRpY2xlL2RldGFpbHMvMTA0MTg0NzIw">Jekyll建站<i class="fa fa-external-link-alt"></i></span></p><hr><h1 id="mkdocs"><a href="#mkdocs" class="headerlink" title="mkdocs"></a>mkdocs</h1><blockquote><p>其实Jekyll已经省去了很多麻烦了，但是我真的真的很烦每个md开头要写一大段乱七八糟的配置，不方便迁移，所以就转到mkdocs了，虽然模板的页面效果没有Jekyll丰富，但是对懒人还是极其友好的。</p></blockquote><blockquote><p>本来想用mkdocs的，毕竟还是挺省事儿的，文件结构也很清晰，学神点拨下我发现hexo可以全局搜索，跟mkdocs的标题搜索等级比起来，更香了！<br>简单学了下，后续可能考虑用mkdocs做一些项目文档手册，作为子网址吧，做手册挺合适的。</p></blockquote><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cueG5jb2RpbmcuY29tLzIwMjAvMDMvMDEvdG9vbC9ta2RvY3MuaHRtbA==">蛮详细的，尤其是关于yml配置文件相关的<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d1dG9uZ3RyZWUuZ2l0aHViLmlvL2Rldm9wcy9tYW5hZ2UteW91ci1jbXMtdXNpbmctbWtkb2Nz">配置也很详细，尤其有一些关于mkdocs的冷知识<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC9menhpYW9tYW5nZS9ibG9nLzMwMTA5MjE=">列了一些注意事项，which我也觉得很重要<i class="fa fa-external-link-alt"></i></span></li><li>这个没仔细看，但是感觉很高贵的样子 <span class="exturl" data-url="aHR0cHM6Ly90b3V0aWFvLmlvL3Bvc3RzL3Q5M2E1Yy9wcmV2aWV3">将 Jupyter 自动发布到 GitHub Pages<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="配置中遇到的问题"><a href="#配置中遇到的问题" class="headerlink" title="配置中遇到的问题"></a>配置中遇到的问题</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0b25lOTE1OS9hcnRpY2xlL2RldGFpbHMvNzkwNzEzMTY=">py37下字符编码遇到的问题<i class="fa fa-external-link-alt"></i></span></p><hr><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><blockquote><p>我的两个config.xml（_config.next.xml是对应next主题的配置）都做了比较详细的注释，大家改起来也会很方便，欢迎在我的基础上修改！（虽然我本来也就是改学神的 :)</p></blockquote><h2 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h2><ol><li><p>环境配置请参考：<span class="exturl" data-url="aHR0cHM6Ly9scnNjeS5naXRodWIuaW8vMjAxNy8xMS8xMC9VYnVudHUtR2l0aHViLWlvLWNvbmZpZy1IZXhvLw==">linux下使用hexo建站<i class="fa fa-external-link-alt"></i></span>    </p><blockquote><ul><li>安装的时候提示8.x已经deprecated，所以我按照提示安装了12.x</li><li>在服务器上跑<code>npm install -g hexo-cli</code>等命令的时候，会遇到权限不够，根据提示给sudo就行</li></ul></blockquote></li><li><p>推送过程和基本配置网上已经很多了</p><blockquote><ul><li>next主题的仓库已经过期，我用的是学神给的这个：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">https://github.com/theme-next/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90ZGluZy50b3AvYXJjaGl2ZXMvNDJjMzhiMTAuaHRtbA==">next主题的基本设置<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC85NDAzODY4OA==">hexo主题进阶设置<i class="fa fa-external-link-alt"></i></span></li></ul></blockquote></li><li><p>其他trivial的可选功能</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kNjhkZTA2N2VhNzQ=">Hexo添加Disqus评论<i class="fa fa-external-link-alt"></i></span></li><li>hexo添加google-analytic功能 （ 不想做了2333累了</li></ul></blockquote></li></ol><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>hexo new ‘文章标题’<br>hexo new draft<br> hexo clean</p><blockquote><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p></blockquote><p>hexo g<br>hexo s<br>hexo d</p><hr><h1 id="mkdown-图床-获取-永久链接-（-香"><a href="#mkdown-图床-获取-永久链接-（-香" class="headerlink" title="mkdown+图床 获取 永久链接 （ 香"></a>mkdown+图床 获取 永久链接 （ 香</h1><p>可以参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlc3lfSC9hcnRpY2xlL2RldGFpbHMvMTA3NjIyMjAy">我之前写的文章：typora+gitee图床<i class="fa fa-external-link-alt"></i></span></p><hr><h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><ul><li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzQxN2RhNzUxODgyNTI1YzYzODA5Y2Q=">简单入个门<i class="fa fa-external-link-alt"></i></span></li><li><input checked="" disabled="" type="checkbox"> <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODU0NTczMjE4Nzc5MzgxNzcz">hexo+Actions保姆教程<i class="fa fa-external-link-alt"></i></span></li></ul><p>本来想自己写的，结果学神也用的actions，哈哈作业一抄到底 （ docker确实不太精通啊…  - -||| ）</p><hr><h1 id="miscelleous"><a href="#miscelleous" class="headerlink" title="miscelleous"></a>miscelleous</h1><ul><li><input disabled="" type="checkbox"> 添加多个部署源<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">- <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>:</span><br><span class="line">- <span class="attribute">type</span>: heroku</span><br><span class="line">  <span class="attribute">repo</span>:</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序员的自我修养 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RNN Prediction of TCP Transmission States(NCA&#39;18)</title>
      <link href="/PaperReading/RNN%20Prediction%20of%20TCP%20Transmission%20States(NCA&#39;18)/"/>
      <url>/PaperReading/RNN%20Prediction%20of%20TCP%20Transmission%20States(NCA&#39;18)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>NCA’18  @ IEEE (network computing and application)</p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><blockquote><p>关于序列学习和时间序列预测模型，长短期记忆（LSTM）神经网络是最先进的技术。在本文中，我们已使用基于LSTM的递归神经网络（RNN）为被动测量建立传输控制协议（TCP）连接特性的通用预测模型。据我们所知，这是尝试将LSTM应用于展示网络运营商如何识别可确定网络状况的TCP客户端最重要的系统范围TCP每连接状态（例如cwnd）的第一项工作。从网络中间节点测得的无源流量中获取，而无需访问发送方。我们发现LSTM学习者的表现优于最新的经典机器学习预测模型。通过在多种情况下进行的广泛实验评估，我们证明了该方法的可扩展性和鲁棒性，以及其从被动测量中监视与网络拥塞相关的TCP传输状态的潜力。我们基于仿真和现实环境的结果表明，深度学习是一种用于从被动测量监视系统范围TCP状态的有前途的工具，并且我们相信本文中介绍的方法可以加强计算机网络社区的未来研究工作。</p></blockquote><p>看起来是根据中间节点的信息去预测终端的拥塞窗口等属性 ?</p><h2 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h2><p>在本文中，我们对基于仿真和现实网络的RNN模型估计TCP cwnd的能力以及流中的基础TCP变体感兴趣。</p><blockquote><p>因此，我们探索了一种基于RNN的预测方法的LSTM架构，以通过与网络拥塞相关的被动测量来监视最重要的TCP每个连接状态。在我们的论文中，我们证明了LSTM可以使用其内存块和一系列门来有效地从被动测量中捕获TCP cwnd的模式。拥塞控制是计算机网络中的一个基本问题。当今广泛部署的TCP拥塞控制算法执行了与拥塞控制相关的最重要功能，例如从发送方处理cwnd。</p></blockquote><p>在本文中，我们定量地研究和探索了问题，因为这些问题适用于网络拥塞问题，其中包括：</p><ul><li>我们如何能够根据从网络的中间节点收集到的passive traffic中，很好地推断出最重要的TCP每连接传输状态，？ 【怎么建模】  <blockquote><p>?? 不知道如何翻译 infer the most important TCP per-connection transmission states that determine a network condition</p><ul><li>如何从被动测量中唯一地跟踪TCP客户端使用的underlying TCP variant？    【如何判别TCP variant】</li></ul></blockquote></li><li>为什么需要知道TCP发送者使用哪种算法是什么？ </li><li>在了解发送方的基础TCP变体的信息之后，我们是否会采取某些措施？</li><li>哪个用户负责网络中的大部分繁忙流量？等等。？<blockquote><p>(i) How well can we infer the most important TCP per-connection transmission states that determine a network condition from a passive traffic collected at an intermediate node of the network?<br>(ii) How can we uniquely track the underlying TCP variant that the TCP client is using from passive measurements?<br>(iii) What is the motivation why we need to know which algorithm the TCP sender is using? (iv) Is there some action that we would take based on knowing the information of the underlying TCP variant of the sender?<br>(v) Which user is responsible for the majority of heavy flow traffic in the network? etc.?</p></blockquote></li></ul><h3 id="前人工作"><a href="#前人工作" class="headerlink" title="前人工作"></a>前人工作</h3><blockquote><ul><li>先喷了04年的一篇文章  用状态机建模的  讲了两个缺陷  一个是可扩展性-》每个TCP variant都会需要建立一个状态机模型；另一个就是…（看文章叭）<br>然后就说没啥前人工作了。。。</li></ul></blockquote><p><code>&quot;在我们广泛地调查了现有的从被动测量监测TCP传输状态的工作之后，我们相信，对于使用基于RNN的技术的大多数广泛使用的TCP变体，在不知道发送方cwnd的情况下，对于预测cwnd和从被动通信量中唯一识别底层TCP控制算法类型的可伸缩方法，目前还没有太多的工作&quot; </code></p><blockquote><p>据我们所知，这是第一项尝试使用LSTM [14]来推断最重要的TCP每连接状态的工作，该状态根据网络中间节点收集的被动流量确定了网络状况，而没有sender的访问权限。正如我们在实验结果中所展示的，我们的预测模型比其他方法有很多好处。</p></blockquote><h3 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h3><ul><li>使用中间节点的被动测量信息和LSTM模型进行建模</li><li>方法是健壮、可扩展的</li><li>在模拟器上train，迁移到实际环境中效果不错</li><li>我们通过几个受控实验(controlled exp 不知道咋翻译..)广泛验证了我们的预测模型的鲁棒性和可扩展性方法，并在模拟，现实和组合场景设置中进行了实验验证。</li></ul><blockquote><p>• 我们演示了中间节点（例如，网络运营商）如何识别与TCP流相关的TCP客户端的传输状态，并使用LSTM递归模型根据被动测量预测发送方的拥塞窗口（cwnd）大小。<br>•我们通过提供一个健壮和可扩展的方法来唯一标识TCP客户端正在使用的广泛部署的基础TCP变量，从而探索基于LSTM的预测模型的适用性。<br>•我们证明，通过在实际场景设置中应用和转移模拟网络中的训练有素的知识，学习的预测模型可以很好地发挥作用。因此，我们的预测模型与机器学习社区中的转移学习概念大致相似[26]。<br>•我们通过几个受控实验广泛验证了我们的预测模型的鲁棒性和可扩展性方法，并在模拟，现实和组合场景设置中进行了实验验证。</p></blockquote><h2 id="2-motivation"><a href="#2-motivation" class="headerlink" title="2 motivation"></a>2 motivation</h2><p>我们的工作主要是由第一节中提出的问题引起的。拥塞控制算法在提高Internet上TCP的性能方面起着至关重要的作用[6]。但是，==当TCP算法的不同变体共存于网络中时，它们可能相互影响==。<br>==解决此问题的一种方法是通过预测cwnd并唯一标识基础TCP变量来单独控制TCP流。==</p><h3 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h3><p>讲了两个实际中该问题的应用背景 :</p><ul><li>可以唯一识别(identify)每个TCP连接，可以看看内容提供商有没有超额使用(TCP不公平现象检测)</li><li>从中间节点推测出更多信息，用于诊断拥塞原因</li></ul><blockquote><p>从运营的角度来看，此信息对于网络运营商(network operators)很有用，以监控主要内容提供商(content providers)（例如Google，Facebook，Netflix，Akamai等）是否正在操纵其服务器中的拥塞窗口，以实现超出其公平份额的目标带宽。运营商可能会发现此信息有用的另一种情况是，他们是否拥有一条由于客户投诉而导致其拥堵的路径，但是使用该路径的链接并没有被特别地订阅。在这种情况下，有关该路径上所有用户的拥塞窗口行为的详细信息可能有助于尝试诊断原因。从ISP的角度来看，我们认为有关端点中使用的TCP堆栈的知识对于进行大量流量工程和异常检测的大型ISP网络的运营商很有用[12]。</p></blockquote><h3 id="Methodological-Challenges"><a href="#Methodological-Challenges" class="headerlink" title="Methodological Challenges"></a>Methodological Challenges</h3><p>实践中；但是，从被动测量中预测TCP每个连接状态有许多困难。挑战之一是，例如，TCP数据包可能在发送方和中间监视器之间或监视器与接收方之间丢失。如果TCP数据包在到达中间节点之前丢失，并以某种方式重新传输，则无法确定是否发生了数据包丢失。因此，==中间监视器所看到的可能与发送方或接收方所看到的不完全相同。== 在[10]中更详细地介绍了我们确定的方法挑战，这些挑战涉及从被动测量中进行与网络拥塞相关的TCP每个连接状态的推断。在本文中，我们主张通过解决上述实际挑战，基于LSTM的方法可以从在中间节点收集的被动测量结果中提供更好的TCP发送方连接状态预测精度。</p><h3 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h3><blockquote><p>本文的其余部分安排如下：在第三节中，我们回顾并详细概述了被视为最新技术的TCP被动测量的紧密相关研究工作。在第四节中，我们描述了用于评估的实验装置。第五部分概述了我们的方法，重点介绍了本文中使用的机器学习技术和性能测量指标。第六节介绍了详细的实验结果以及用于验证我们的预测模型的多种方案设置。最后，第七节总结了论文并概述了未来扩展的研究方向。</p></blockquote><h2 id="3-related-work"><a href="#3-related-work" class="headerlink" title="3 related work"></a>3 related work</h2><p>本节简要讨论了有关通过被动测量来推断与网络拥塞相关的TCP每连接状态的紧密相关的研究工作。监视TCP每连接特征的技术分为两类：主动和被动测量。</p><p>主动测量</p><blockquote><p>已经提出的许多现有研究工作都依靠主动方法来测量TCP的特征。通过向至少两个端点之间的网络中注入人工流量，该技术可以主动测量Internet流的TCP行为[22，25]。它主要侧重于主动网络监视，并依赖于注入特定流量的能力，然后对其进行监视，以衡量从网络获得的服务。</p></blockquote><p>被动测量</p><blockquote><p>在被动测量中，检查被动收集的数据包迹线以测量Internet流的TCP行为[16]。</p><p>与我们的工作最密切相关的一项有趣的工作是[16]，它提供了一种被动的测量方法来推断和保持跟踪发件人变量：end-to-endRTT和cwnd的值。他们的想法是通过在发送方检测重传超时（RTO）事件并观察导致发送方更改cwnd值的ACK来模拟状态转换。这项工作[16]仅考虑了TCP的主要实现，其基本思想是为在中间节点观察到的每个TCP连接构造一个TCP发送者状态的副本。副本采用有限状态机的形式。但是，考虑到许多现有的TCP变体，无法对每个变体使用单独的状态机。我们还认为，考虑到大量数据，构造的副本[16]无法设法使转换反向或回溯。另一个限制是副本可能无法观察到与发送方相同的数据包序列，并且在中间节点处观察到的ACK也可能不会到达发送方。</p><p>==该研究的作者[27]开发了一种名为tcpflows的工具，该工具试图通过分析ACK流来检测TCP拥塞事件的发生，从而被动地估计cwnd的值并识别TCP拥塞控制算法。== 但是，使用tcpflowsis实现的状态机仅限于旧的TCP变体，因此无法唯一标识新的TCP拥塞控制算法。</p></blockquote><blockquote><p>我们的工作与以前的工作主要不同，我们的主要目标是从根本上开发一种==可扩展的基于LSTM的预测模型==，以便为使用最广泛的==基于损耗的拥塞算法==推断TCPper-connection状态。如果仅查看一个或两个TCP变体，则不同的TCP堆栈具有多种功能，这些功能将违反我们可能做出的假设。因此，在我们的工作中，为了覆盖问题的整个范围，我们考虑了使用最广泛的基于损耗的TCP算法变体，它们是==BIC [32]，CUBIC [9]和Reno [15]。==</p></blockquote><p>==这里提到了[27]A Passive State-Machine Based Approach for Reliable Estimation of TCP Losses. 2006 也是用于检测拥塞的 只不过还有局限性==</p><h2 id="EXPERIMENTAL-SETUP-AND-DISCUSSION"><a href="#EXPERIMENTAL-SETUP-AND-DISCUSSION" class="headerlink" title="EXPERIMENTAL SETUP AND DISCUSSION"></a>EXPERIMENTAL SETUP AND DISCUSSION</h2><h3 id="A-Experimental-Testbed"><a href="#A-Experimental-Testbed" class="headerlink" title="A. Experimental Testbed"></a>A. Experimental Testbed</h3><p>图2显示了本文中用于所有实验的实验设置。</p><ul><li>仿真网络+一条通信隧道以引入拥塞</li><li>iperf生成TCP流量  </li><li>单个TCP流中的参数带宽和延迟是恒定的，并且分布均匀；抖动作为平均值给出，因此其分布是正态的</li><li>我们在客户端节点上创建了相同的regular tcpdump of TCP packets，其中包括有关每个连接状态的信息，以便我们可以将tcpdump与TCP状态进行匹配。<blockquote><p>We created an identical regular tcpdump of the TCP packets on the client node including information about the per-connection states so that we can match the tcpdump with the TCP states. </p></blockquote></li><li>将测得的TCP数据当作输入，以预测TCP每个连接状态。使用Linux内核直接记录的实际TCP内核状态（仅用于培训）验证了预测的TCP状态，并为学习模型生成了新数据以进行预测。<blockquote><p>为了引入拥塞，我们首先创建了一个仿真网络，并在网络上放置了一条通信隧道，同时使用iperf流量生成器将TCP跨流量推送到网络[7]。我们通过捕获客户端和服务器发送TCP数据包时网络上的所有会话来进行实验。在我们实验的单个TCP流中，参数带宽和延迟是恒定的，并且分布均匀。但是，由于我们将抖动作为平均值给出，因此其分布是正态的。我们在客户端节点上创建了相同的常规TCP数据包tcpdump，其中包括有关每个连接状态的信息，以便我们可以将tcpdump与TCP状态进行匹配。如图2所示，我们将测得的TCP数据用作我们的方法输入，以预测TCP每个连接状态。最后，我们使用直接从Linux内核直接记录的实际TCP内核状态（仅用于培训）验证了预测的TCP状态，并为学习模型生成了新数据以进行预测。完成验证后，我们将运行学习模型并获得预测.</p></blockquote></li></ul><h3 id="B-Testbed-Hardware"><a href="#B-Testbed-Hardware" class="headerlink" title="B.Testbed Hardware"></a>B.Testbed Hardware</h3><blockquote><p>我们已经使用了一组基于GNU / Linux操作系统的HPC计算机集群进行了实验，该操作系统运行4.4.0-75-通用内核发行版的修改版。该预测模型是在具有以下特征的NVIDIA Tesla K80 GPU加速器计算上执行的：Intel（R）Xeon（R）CPU E5-2670 v3 @ 2.30GHz，64个CPU处理器，128GB RAM，在Linux 64-一点。群集中的所有节点都连接到低延迟56 Gbit / s Infiniband，千兆以太网，并可以访问600 TiB的BeeGFS并行文件系统存储。</p></blockquote><h3 id="C-Network-Emulation-and-Verification-of-the-emulator"><a href="#C-Network-Emulation-and-Verification-of-the-emulator" class="headerlink" title="C. Network Emulation and Verification of the emulator"></a>C. Network Emulation and Verification of the emulator</h3><p>==对于网络仿真，我们在单独的节点上使用了基于Linux的流行网络仿真器（NetEm）[13]，该仿真器支持带宽，延X迟，抖动，丢包和其他参数的等对cwnd赢下给比较大的参数。==</p><ul><li>另一个问题是软件仿真器不够精确  ——》 作者在此提出了一个验证方法(具体没有怎么看懂，也许并不重要??)</li></ul><blockquote><p>鉴于软件仿真器不够精确，我们是否可以信任网络仿真器来评估我们为评估而更改的所有带宽，延迟，抖动和丢包参数的变化，而不考虑我们从TCP流获得的测量结果？<br>为了在极为完善的环境中谨慎使用网络仿真器来处理所有参数的变化，我们创建了一个过滤器来设置每个数据包的参数变化。由于无法从TCP流中测量仿真器的精度，因此我们使用UDP进行了另一项实验，以评估和测量仿真器和流量生成器均会产生偏差的精度。<br>我们通过测量由接收方的流量生成器和网络仿真器创建的带宽，延迟，抖动和数据包丢失变化来验证原始性能。</p><p>Given that the software emulator is not precise, can we trust the network emulator for all the variations of bandwidth, delay, jitter and packet loss parameters that we change for our evaluation irrespective of the measurement we get from TCP stream? </p><p>In order to use the network emulator with great care in an extremely well-contained environment for all the variations of the parameters, we created a filter that sets the parameter variation of each packet. As the precision of the emulator cannot be measured from TCP streams, we set up a different experiment using UDP to evaluate and measure the precision where both the emulator and traffic generator create variations. </p><p>We verified the raw performance by measuring the bandwidth, delay, jitter and packet loss variations created by the traffic generator and network emulator at the receiver side.</p></blockquote><h3 id="D-Impact-of-Cross-traffic-Variability"><a href="#D-Impact-of-Cross-traffic-Variability" class="headerlink" title="D. Impact of Cross-traffic Variability"></a>D. Impact of Cross-traffic Variability</h3><p>结论：</p><ul><li>仿真器运行的每个变化都不会影响我们的结果–》交叉流量的可变性不会影响我们的分析</li><li>cwnd可变性取决于所使用的特定TCP拥塞控制</li><li>仿真器可能会受到其范围之外的网络元素的影响，例如CPU负载，网卡缓冲区，硬件架构因素等<blockquote><p>我们运行NetEm [13]时，客户端和服务器之间的数据速率和仿真参数有所不同。我们通过模拟其他UDP流量，仔细研究并验证了来自同一TCP拥塞协议的跨业务量变化对结果的影响，我们发现，仿真器运行的每个变化都不会影响我们的结果。我们认为，在当前设置中交叉流量的可变性不会影响我们的分析。通常，当涉及到cwnd可变性时，它将取决于所使用的特定TCP拥塞控制。我们还认为，仿真器可能会受到其范围之外的网络元素的影响，例如CPU负载，网卡缓冲区，硬件架构因素等。  </p></blockquote></li></ul><h3 id="E-Network-Traces"><a href="#E-Network-Traces" class="headerlink" title="E. Network Traces"></a>E. Network Traces</h3><h3 id="F-Network-Emulation-Parameters"><a href="#F-Network-Emulation-Parameters" class="headerlink" title="F. Network Emulation Parameters"></a>F. Network Emulation Parameters</h3><p>为了在仿真和实际网络条件下评估我们的预测模型，我们使用tcptrace [24]生成了自己的数据集。我们所有实验的数据轨迹都是使用iperf [7]流量生成器在模拟的LAN链路上生成的，在该LAN链路上，我们运行每个TCP变量，并改变了参数带宽，延迟，抖动和数据包丢失，如表I所示，其中cwnd极其受影响。==但是，内核可能会将数据包的TCP每次连接状态保留在缓冲区中，并等待足够数量的数据包，然后再将TCP状态发送到用户空间。由于用户空间进程的TCP进程缓慢，TCP的每个连接状态也可能会丢失。== </p><p>？？<br>因此，作为合理性检查(sanity check)，我们要做的第一件事就是在发送方和接收方都捕获数据包，因为它有助于我们知道数据包是丢失还是从未发送过，因为从接收方到发送方的ACK与数据包以推断数据包丢失。这样，可以验证流量捕获是否相同，并且每个连接的TCP状态都没有丢失。</p><p>为了避免丢失数据包并在发送方上和monitor上捕获完全相同数量的数据包，我们执行的第二件事是==调整缓冲区大小并将缓冲区刷新到用户空间==。通过禁用TCP分段卸载，我们在巨型帧清洁的路径上进行了实验，从而可以避免数据包大小超过常规合法大小。</p><blockquote><p>Therefore, the first thing we did as a sanity check is to capture the packets at both the sender and the receiver for it helps us to know whether a packet was lost or just never sent as the ACKs from receiver to sender are just as important as the data packets for inferring packet loss. This way, it is possible to verify if the traffic captures are identical and there are no missing per-connection TCP states. </p><p>The second thing we carried out in order to avoid missing of packets and capture exactly the same number of packets on the sender and the monitor is tuning the buffer size and flush the buffer to the userspace. We carried out our experiment over a path that is jumbo-frame clean by disabling TCP segmentation offloading so that we can avoid packet sizes way over the regular legitimate size.</p></blockquote><p>TCP拥塞控制设置为根据带宽，不同的交叉流量，RTT等的可变性进行操作。因此，为了创建现实的场景，我们在设置中模拟了网络，如图2所示，通过在一条流中向表I中列出的重要网络仿真参数添加可变性。</p><h3 id="G-Assumptions"><a href="#G-Assumptions" class="headerlink" title="G. Assumptions"></a>G. Assumptions</h3><p>在TCP中，cwnd是决定随时可以处理的字节数的主要因素之一。 因此，我们假设在存在带宽变化，延迟， 损失和RTT情况下，使用（大概理解为bytes in flight)==the observed outstanding sequence of unacknowledged bytes on the network seen at any point in time in the lifetime of the connection as an estimate of the sending TCP’s cwnd from tcptrace==是一种更好的方法来估算cwnd以及恢复速度的方法。<br>首先，由于我们是根据飞行中的字节估算cwnd的，因此我们还考虑了cwnd肯定是是发送方的限制因素的事实，以及cwnd必须小于接收方的窗口的事实。<br>其次，我们假设我们不知道网络中正在运行什么TCP变体以及该变体中的每个连接状态。<br>最后，我们在本文中给出的结果是基于如下假设的:端点具有与操作系统无关的、由底层操作系统独立设置的相同接收器窗口(receiver window)。</p><h2 id="5-METHODOLOGY"><a href="#5-METHODOLOGY" class="headerlink" title="5 METHODOLOGY"></a>5 METHODOLOGY</h2><p>本节说明了我们用于通过基于RNN的技术从被动测量中通过实验推断cwnd和唯一标识基础TCP变体的通用方法。</p><h3 id="A-Passive-Monitoring-of-bytes-in-flight"><a href="#A-Passive-Monitoring-of-bytes-in-flight" class="headerlink" title="A. Passive Monitoring of bytes in flight"></a>A. Passive Monitoring of bytes in flight</h3><p>TCP拥塞控制算法通过使用cwnd来控制TCP发送方的发送速率，该cwnd限制了在任何给定时间允许的累积未确认字节的数量。 如图2所示，在中间节点处收集的测得的被动TCP数据用于我们模型的训练实验。 在监视点看不到TCP实现的详细信息和TCP选项的使用。 TCP发送器还通过内核中的两个变量来跟踪未完成的字节：snd nxt（要发送的下一个数据包的序列号）和snd una（最小的未确认序列号）。</p><h3 id="B-Prediction-of-TCP-cwnd-from-Passive-Traffic"><a href="#B-Prediction-of-TCP-cwnd-from-Passive-Traffic" class="headerlink" title="B. Prediction of TCP cwnd from Passive Traffic"></a>B. Prediction of TCP cwnd from Passive Traffic</h3><p>cwnd是TCP每次连接状态内部变量，表示发送者可以根据发送者的网络容量和条件在任何给定时间点潜在传输的最大数据量。 TCP [15]使用cwnd来确定在任何给定时间没有被发送方独立维护以进行拥塞避免的情况下，未确认的最大字节数。图3显示了在运行神经模型和应用LSTM技术之前，来自中间节点的未完成字节数与从发送方内核跟踪的实际cwnd之间在时间方面的比较。</p><blockquote><p>考虑到TCP的本质，通过检查中间节点被动收集的端点的TCP流的每个交叉流量来准确推断发送者的cwnd是一项具有挑战性的任务，因为它不做广告。我们尝试估计cwnd的一种初始方法是处理tcpdump中流的数据包头，并根据跟踪集计算汇总的TCP交叉流量，并将其添加为asa功能。然而，我们在实验中发现对于准确的预测而言，细节不足。在本文中，我们认为利用基于RNN的算法训练分类器和预测模型来从被动测量中预测cwnd非常重要。</p></blockquote><p><strong>Learning Context</strong></p><blockquote><p>我们使用带有TensorFlow后端的Keras深度学习框架，构建了高度健壮且可扩展的基于RNN的预测模型，</p></blockquote><ul><li>cwnd批量大小为32。</li><li>在t的每个时间步长处，LSTM模型都将飞行中的未完成字节的整个数组作为输入特征向量（x），该向量由从内核获得的时间戳索引。</li><li>多层LSTM单元 + 15维隐藏状态的dense layer + ReLU激活函数(==?最后一层居然也ReLU==) –&gt; 输出 a sequence dimensional vector of predicted cwnd (y) of the same size indexed by time stamp.</li><li>经过时间截断的反向传播（TBPTT）训练算法进行训练 | Adam 默认学习速率为0.001 | RMSE 和 MAPE(Mean Absolute Percentage<br>Error) 同时作为损失函数的评价指标 (？具体怎么综合起来的待后面考查)</li></ul><h3 id="C-Prediction-of-TCP-Variants"><a href="#C-Prediction-of-TCP-Variants" class="headerlink" title="C. Prediction of TCP Variants"></a>C. Prediction of TCP Variants</h3><p>对于基本的TCP变体预测任务，仅考虑了基于丢包的TCP拥塞控制算法(loss-based)(e.g., CUBIC [9] BIC [32], and Reno [15]) 用预测出来的cwnd去判断β值(back-off parameter) &lt;– 对于AIMD的拥塞控制算法来说，β值是一个很典型的特征。</p><h2 id="6-EXPERIMENTS-AND-RESULTS"><a href="#6-EXPERIMENTS-AND-RESULTS" class="headerlink" title="6 EXPERIMENTS AND RESULTS"></a>6 EXPERIMENTS AND RESULTS</h2><blockquote><p>本节总结了几个实验结果。针对每个TCP做了36种配置，如表I所示，总共216种在实验(?咋算的..)实验评估中，给出其中一个测试方案配置并给出CUBIC [9]，BIC [32]和Reno [15]三个baseline的测试效果。</p></blockquote><p>==TCP cwnd模式预测模型是在训练和测试样本大小比率的不同配置下评估的。==</p><ul><li><p>如上图所示，==我们发现了用于预测cwnd的基于RNN的模型可以非常准确地捕获cwnd下降的比率。== </p><blockquote><p>图6（a）和（b）没有共享相同的带宽，延迟，损耗和抖动配置，这会导致在连接过程中最大段数有所不同。例如，如果我们在图6（b）上看到，它的带宽延迟乘积（BDP）[17]为700mb * 0.01s = 875,000字节（logic here:这个和1500都是configuration）。在1500个字节段中，即583个段，而我们的仿真显示cwnd的最大段数为500-600。在下面显示的所有图中，==我们可以看到，一旦发生超时，响应3个重复的ACK，所有数据包丢失都会得到快速恢复。这是因为cwnd不会低于其先前峰值的一半。== 结果是，存在一个线性增加阶段，随后是一个丢包事件，其中cwnd随着新到达的ACK而增加。这也演示了TCP拥塞控制算法如何响应拥塞事件。</p></blockquote></li><li><p>我们还可以看到，预测的cwnd的模式通常与实际的cwnd非常匹配，并且预测误差很小。我们使用从内核获得的精确时间戳来匹配锯齿模式的增加部分和减少部分。</p><blockquote><p>We can see that the pattern of the predicted cwnd generally matches the actual cwnd quite well with a small prediction error. We matched both the increasing and decreasing parts of the sawtooth pattern using the precise timestamp obtained from the kernel.</p></blockquote></li></ul><h2 id="hesy-summary"><a href="#hesy-summary" class="headerlink" title="hesy summary"></a>hesy summary</h2><ul><li>对于基本的TCP变体预测任务，仅考虑了基于丢包的TCP拥塞控制算法(loss-based)</li><li>首创性(被动测量 中间节点 LSTM) 、 可扩展性 (scalable)</li><li>使用iperf制造数据包  使用tcptrace构建数据集</li></ul><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><ul><li>Network Emulation Parameters中“但是，内核可能会将数据包的TCP每次连接状态保留在缓冲区中，并等待足够数量的数据包，然后再将TCP状态发送到用户空间。由于用户空间进程的TCP进程缓慢，TCP的每个连接状态也可能会丢失”不是很明白<ul><li>对应的==调整缓冲区大小并将缓冲区刷新到用户空间==  不是很明白这是在干什么<br>这两天找yanshu问下【！！！！】</li></ul></li><li>G. Assumptions 中的一些假设不是很懂在干什么 …. 目的何在？</li><li>使用tcptrace构建数据集指的应该是将检测到的信息里面的数据特征抽取出来？</li><li>仅考虑了基于丢包的TCP拥塞控制算法(loss-based)(e.g., CUBIC [9] BIC [32], and Reno [15])  –&gt; BIC是基于loss的么？？？</li><li>针对每个TCP做了36种配置，如表I所示，总共216种在实验(?咋算的..)</li><li>FIG6为什么跌破的时候没有跌到一半 反而比一半多一点<br>  这个逻辑是什么<blockquote><p>我们可以看到，一旦发生超时，响应3个重复的ACK，所有数据包丢失都会得到快速恢复。这是因为cwnd不会低于其先前峰值的一半。<br>  是后面是前面的现象的意思么  所以快恢复难道不是设置成一半么。。。</p></blockquote></li><li>这啥意思<blockquote><p>我们还可以看到，预测的cwnd的模式通常与实际的cwnd非常匹配，并且预测误差很小。我们使用从内核获得的精确时间戳来匹配锯齿模式的增加部分和减少部分。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> PaperReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeePCCI(SIGCOMM&#39;19)</title>
      <link href="/PaperReading/DeePCCI(SIGCOMM&#39;19)/"/>
      <url>/PaperReading/DeePCCI(SIGCOMM&#39;19)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><blockquote><p>拥塞控制（CC）[12]是当今传输协议的基本组成部分，并强烈影响数据传输的性能。 CC最初建于1980年代以应对早期Internet的拥塞崩溃[17]，但CC仍在发展，并且出现了新的变体，例如BBR [1]或Vivace [3]。</p></blockquote><blockquote><p>CC引入了一个拥塞窗口（cwnd），该窗口限制了飞行中未确认字节的数量。==每种CC算法都定义了在特定算法定义的拥塞信号下，cwnd的变化情况==。给定CC方法的数量及其对性能的影响[9]，因此研究CC的使用方法很重要。例如，如果知道新的CC通常会与哪些其他算法竞争，则为公平起见，更容易对其进行调整。</p></blockquote><h2 id="传统的缺点"><a href="#传统的缺点" class="headerlink" title="传统的缺点"></a>传统的缺点</h2><blockquote><ul><li>但是，用于识别CC变体的现有工作（例如[2、18、24]）不适用于最新的CC和传输协议。==扩展和维护这些方法很复杂，因为它需要详细的领域知识才能知道CC参数化和配置如何影响其行为。== 当CC离开内核并引入用户空间协议（例如QUIC [11]）时，这一点变得尤为重要，这些协议相当容易更改，并且已经可以大规模部署[21]。</li></ul></blockquote><blockquote><ul><li>==此外，许多识别方法都基于fragile assumptions。== 例如，当使用TCP pacing （例如，与RENO [12]或CUBIC [5]结合使用）时，它们将失败。</li><li>*令人担忧的是，我们已知的所有被动方法都基于头部信息is parsable的的假设**。完全加密的传输（例如QUIC实施方案）使这些设计无效，并且如果可能的话，将需要进行重大更改。</li></ul></blockquote><p><strong>因此，目前就推理部署CC提出挑战。</strong></p><h2 id="难点与贡献"><a href="#难点与贡献" class="headerlink" title="难点与贡献"></a>难点与贡献</h2><p>作为应对这些挑战的第一步，本文介绍了DeePCCI，这是一种基于监督的基于深度学习的被动拥塞控制识别方法。<br>==它仅根据流数据包到达时间信息识别CC变体，因此甚至可以在加密的传输头上使用。==<br>此外，它使用深度学习来学习功能-从而避免了手动的，特定于领域的功能设计。<br>因此，与相关方法不同，==DeePCCI除了流分组定时的可用性之外，不做任何假设，== <strong>除了能够收集CC变体的训练流量之外，不需要任何领域知识。</strong><br>我们认为，这种假设和免手动调整方法允许在Internet流量中进行通用且可扩展的CC标识。具体来说，我们介绍DeePCCI的设计，评估及其局限性，并做出以下贡献：</p><p>•我们描述了流量的预处理和用于识别拥塞控制变量的深度学习模型。<br>•我们介绍了如何在测试平台上生成带有标记数据的多种拥塞控制变量模型。</p><p>我们评估了CUBIC，RENO和BBR作为主要拥塞控制变量的测试平台的性能。我们展示了该方法能够在各种情况下识别流量拥塞控制变量，但同时也介绍并讨论了无法识别拥塞控制变量的情况。结构体。第2节讨论了CC识别的最新技术及其缺点。第3节介绍DeePCCI的设计，而第4节介绍我们如何生成训练数据和评估我们的方法。最后，第5节总结了论文并讨论了未来的工作。</p><h1 id="related-work"><a href="#related-work" class="headerlink" title="related work"></a>related work</h1><blockquote><p>各种工作涉及识别CC变体。这些方法主要分为两类：使用被动[2、6、13、18、20]或主动[19、24]测量的识别方法。</p></blockquote><blockquote><p>主动方法可通过主动打开并操纵CC来激发CC反应进行检测。 Padhye和Floyd提出了TBIT [19]，该协议将精心制作的TCP段发送到Web服务器以主动触发拥塞控制。它记录响应丢失的数据包发送了哪些段，因为这种反应在TBIT中所区分的CC变体之间有很大差异。<br><br><br>杨等。目前的CAAI [24]扩展了TBIT的方法。为了估计发送方的cwnd，CAAI人为地延迟了观察所有飞行段的ACK。然后，CAAI导致数据包丢失，并从变化的cwnd中提取特征。这些功能随后用于使用随机森林进行分类。虽然这两种方法都可以实现较高的识别精度，但是由于错误选择的主机，因此依靠主动测量很容易引入测量偏差。<br><br><br>被动方法（与我们一样）不与主机交互，而是依靠流量跟踪来推断使用的流量CC变体，因此，它们允许收集有关实际流量的信息，该信息取决于有利位置而不是主动选择的主机。<br><br><br>Paxson等。和Jaiswal等。使用tcpanaly [20]和tcpflows [13]重建TCP状态机，以比较接收到的数据包和预期数据包。两种方法都需要非常详细的CC甚至实施知识来重建状态机。我们的方法的不同之处在于它不需要详细的CC知识。卡萨格兰德等。 [2]将cwnd中的特征更改用作其方法TCPMoon中的特征。针对这些功能检查了不同的手工规则，以区分CC。对于cwnd估计，作者使用基于TCP时间戳的RTT估计。因此，使用TCPMoon无法识别没有TCP时间戳选项或加密了传输头的流。由于我们的方法仅观察数据包到达的行为，因此不需要任何明文传输协议字段。<br><br><br>Oshio等。 [18]提出了一种基于聚类的方法。他们根据RTT估计值提取cwnd的特征并将其聚类以区分两个竞争的CC变体。我们的方法的不同之处在于，它不仅限于两个相互竞争的变体。哈戈斯等。<br><br><br>[6]使用发送方和接收方之间的未完成字节作为粗略且嘈杂的cwnd估计。使用递归神经网络对该估计值进行细化。精简后的Cwnd的突然减少用作CUBIC，BIC和RENO之间不同的乘法减少因子的估计。尽管此方法使用深度学习是相似的，但它仍然需要手动设计的乘数递减因子，因此只能识别基于损失的CC。我们的方法使用端到端深度学习模型，还识别基于延迟的CC并避免使用手动功能。</p></blockquote><h2 id="active-measurements"><a href="#active-measurements" class="headerlink" title="active measurements"></a>active measurements</h2><ul><li>制造丢包现象（ 通过延迟ack的发送或者是发送crafted packets to senders ）获得终端的变化情况<ul><li>获取了特征数据以后使用随机森林的方法</li></ul></li></ul><h2 id="passive-measurements"><a href="#passive-measurements" class="headerlink" title="passive measurements"></a>passive measurements</h2><ul><li>gather information on real traffic on vantage points ，而不是像active measurements那样观测主动选好的hosts</li><li>rebuild TCP  state machine –》 需要detailed CC domain knowledge and implementation knowledge</li><li>建模去估计Cwnd changes –》 like 使用TCP的时间戳来估计RTT （ 加密了以后就不适用了</li></ul><p><br><br><br></p><h1 id="DeePCCI-design"><a href="#DeePCCI-design" class="headerlink" title="DeePCCI design"></a>DeePCCI design</h1><h2 id="CC-Manifestaion-in-Traffic"><a href="#CC-Manifestaion-in-Traffic" class="headerlink" title="CC Manifestaion in Traffic"></a>CC Manifestaion in Traffic</h2><ul><li>only use <strong>arrival time</strong> of a flow as input<ul><li>unlike Netflow 是什么意思 ？ Netflow没有packet timing嘛</li><li>目的 :associate packets to flow</li></ul></li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><img src="https://images.weserv.nl/?url=https://img-blog.csdnimg.cn/20190924094304705.png" alt="在这里插入图片描述"></p><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><ul><li>用于特征提取</li><li>改进了VGG net  结合了 residual network</li></ul><h3 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h3><ul><li>如果packet的size是固定的，就用VGGNet就够了 ，但是由于我们想看的是length-variant的packet，所以使用LSTM–》有记忆<ul><li>用的是unidirectional network     </li></ul></li></ul><p><br><br><br></p><h1 id="Experimental-setup"><a href="#Experimental-setup" class="headerlink" title="Experimental setup"></a>Experimental setup</h1><h2 id="Mininet-based-Network-Testbed"><a href="#Mininet-based-Network-Testbed" class="headerlink" title="Mininet-based Network Testbed"></a>Mininet-based Network Testbed</h2><ul><li>不同的网络环境<ul><li>TCP sender number</li><li>link latency</li><li>bottleneck link’s BDP</li></ul></li><li>选择了三个variant进行对比 ( RENO, CUBIC ,BBR ) <ul><li>每个发送60s 的fully-loaded TCP stream </li><li>观测者比发送者早2s开启     </li></ul></li></ul><h2 id="Single-Host-Network"><a href="#Single-Host-Network" class="headerlink" title="Single-Host Network"></a>Single-Host Network</h2><ul><li><strong>baseline condition</strong></li><li>哑铃状拓扑</li><li>没有背景流量</li></ul><h2 id="Multi-Host-Network"><a href="#Multi-Host-Network" class="headerlink" title="Multi-Host Network"></a>Multi-Host Network</h2><ul><li>reside on each side of the network</li></ul><h2 id="Cross-Traffic-Network"><a href="#Cross-Traffic-Network" class="headerlink" title="Cross-Traffic Network"></a>Cross-Traffic Network</h2><ul><li>side flow</li><li>main flow</li></ul><h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><h3 id="identifacation-by-Delay-and-Bandwidth"><a href="#identifacation-by-Delay-and-Bandwidth" class="headerlink" title="identifacation by Delay and Bandwidth"></a>identifacation by Delay and Bandwidth</h3><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li>带宽越大、延迟越大、host越多越容易识别成功</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>带宽越大越成功是因为</p><ul><li>归因于拥塞窗口的整数离散化，而最大cwnd取决于瓶颈带宽。 ( 我的理解就是：允许的cc窗口的区别度高 ）</li><li>以较大的带宽采样了诸如CUBIC的cubic行为的更多步骤。 较低的带宽意味着较少的采样步骤，并且三次行为很难与例如RENO的线性行为相区别。</li></ul></li><li><p>认为延迟越大越成功</p><ul><li>与histogram的bin-size  有关<blockquote><p>我个人在这里的理解就是： bin-size 就有点像分辨率 如果延迟太小，会导致整个图被横向压扁；如果延迟大一点，整个图就会舒展开，一些特征啥的会更加清晰，容易被CNN识别、提取到<br>有点意思 :)</p></blockquote></li></ul></li><li><p>认为多主机效果更好是因为</p><ul><li>对于相同的延迟，多主机情况也能获得更好的结果。我们将此影响归因于流量竞争。当link饱和时，单主机流的速率不会随着cwnd的增加而迅速增加，<strong>但是在多主机方案中增加流的cwnd可以增加其在队列中的数据包的份额，从而增加其速率。</strong> <strong>因此，对不同拥塞控制变量的cwnd的单独更改会对速率产生更大的影响，从而更强烈地影响数据包到达</strong>，并在更长的时间内影响较小的延迟和带宽问题。</li></ul></li></ul><p><strong>【感觉这一点实际上是利用了这三种方案面对竞争时候的特性有所区别的特点，并不是说：Competing的时候会有种让CC增加cwnd的动力(只有发的多才能收的快 收的快才能滑动)  ，而应该说：面对 competing的时候有不同的特性，有的人会趋于让cwnd增大，所以对应的包发得多，到达的间隔就短了】</strong></p><blockquote><p>如我们所见，<strong>带宽和延迟会影响我们的方法</strong>，延迟/带宽过小会导致识别性能降低。<strong>为了进一步评估，我们将以50Mbps作为带宽</strong>继续进行实验，以更好地了解该方法在何处面临挑战。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PaperReading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Congestion Control </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
